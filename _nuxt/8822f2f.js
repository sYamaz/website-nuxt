(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{462:function(n,l,e){n.exports=e.p+"img/qiita_logo-background-color.ae796f6.png"},480:function(n,l,e){"use strict";e.r(l);var c=e(25),t=e(24),o=e(42),r=e(38),d=e(27),f=e(20),m=(e(15),e(4),e(82),e(1)),k=e(420),h=e(475),v=[{rendered_body:'<p>GitHubpagesに自己紹介サイトを立てて少しずつ拡張しています。<br>\n今回、サイトにQiita記事へのリンクを貼りたい、けどリンクをペタペタ貼るのもつまらないということで、QiitaApiから私が書いた記事を取得しサイトに表示することにしました。</p>\n<h3>\n<span id="準備" class="fragment"></span><a href="#%E6%BA%96%E5%82%99"><i class="fa fa-link"></i></a>準備</h3>\n<div class="code-frame" data-lang="shell"><div class="highlight"><pre><code>yarn add @nuxtjs/axios\n</code></pre></div></div>\n<h2>\n<span id="qiitaのpatを使用する" class="fragment"></span><a href="#qiita%E3%81%AEpat%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B"><i class="fa fa-link"></i></a>QiitaのPATを使用する</h2>\n<p>Qiitaの設定でPATを生成、axiosのヘッダーに登録します。<br>\nここではQiitaApiクラスを作成し、<code>asyncData(ctx:Context)</code>などで使用できるようにします。<br>\n（ここでは型定義の紹介は省きます）</p>\n<div class="code-frame" data-lang="typescript">\n<div class="code-lang"><span class="bold">~/plugins/apiPlugins.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Plugin</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@nuxt/types</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">QiitaApi</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">~/api/QiitaApi</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">QiitaApi</span> <span class="k">as</span> <span class="nx">MockApi</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">~/mock/QiitaApi</span><span class="dl">\'</span> <span class="c1">// テストとかではモックに切り替えたい願望</span>\n<span class="k">import</span> <span class="nx">IApi</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">~/types/Qiita/Api/v2/IApi</span><span class="dl">\'</span>\n\n<span class="c1">// vueインスタンスから$qiitaApiを使用可能にする</span>\n<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">\'</span><span class="s1">vue/types/vue</span><span class="dl">\'</span> <span class="p">{</span>\n  <span class="kr">interface</span> <span class="nx">Vue</span> <span class="p">{</span>\n    <span class="nl">$qiitaApi</span><span class="p">:</span> <span class="nx">IApi</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="c1">// this.$nuxt.contextから$qiitaApiを使用可能にする</span>\n<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">\'</span><span class="s1">@nuxt/types</span><span class="dl">\'</span> <span class="p">{</span>\n  <span class="kr">interface</span> <span class="nx">NuxtAppOptions</span> <span class="p">{</span>\n    <span class="nl">$qiitaApi</span><span class="p">:</span> <span class="nx">IApi</span>\n  <span class="p">}</span>\n\n  <span class="kr">interface</span> <span class="nx">Context</span> <span class="p">{</span>\n    <span class="nl">$qiitaApi</span><span class="p">:</span> <span class="nx">IApi</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="k">export</span> <span class="kd">const</span> <span class="nx">apiPlugin</span><span class="p">:</span> <span class="nx">Plugin</span> <span class="o">=</span> <span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">inject</span><span class="p">):</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kd">const</span> <span class="nx">qiitaAxios</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">$axios</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>\n    <span class="c1">// baseURL: context.$config.baseURL</span>\n    <span class="na">baseURL</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">https://qiita.com/api/v2/</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span> \n      <span class="c1">// 環境変数に設定したQiita PATを登録</span>\n      <span class="na">Authorization</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Bearer </span><span class="dl">\'</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PAT</span>\n    <span class="p">}</span>\n  <span class="p">})</span>\n\n  <span class="nx">inject</span><span class="p">(</span><span class="dl">\'</span><span class="s1">qiitaApi</span><span class="dl">\'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">QiitaApi</span><span class="p">(</span><span class="nx">qiitaAxios</span><span class="p">))</span>\n<span class="p">}</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nx">apiPlugin</span>\n</code></pre></div>\n</div>\n<p><code>GET /api/v2/authenticated_user/items</code>を使用することで、PATを設定したユーザーの記事を取得できます。</p>\n<div class="code-frame" data-lang="typescript">\n<div class="code-lang"><span class="bold">~/api/QiitaApi.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NuxtAxiosInstance</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@nuxtjs/axios</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">PostData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">~/types/Qiita/Api/v2/datas</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">IApi</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">~/types/Qiita/Api/v2/IApi</span><span class="dl">\'</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">QiitaApi</span> <span class="k">implements</span> <span class="nx">IApi</span> <span class="p">{</span>\n  <span class="k">private</span> <span class="k">readonly</span> <span class="nx">axios</span><span class="p">:</span> <span class="nx">NuxtAxiosInstance</span>\n\n  <span class="kd">constructor</span> <span class="p">(</span><span class="nx">axios</span><span class="p">:</span> <span class="nx">NuxtAxiosInstance</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">axios</span> <span class="o">=</span> <span class="nx">axios</span>\n  <span class="p">}</span>\n\n  <span class="k">public</span> <span class="k">async</span> <span class="nx">getMyQiitaItems</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">PostData</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>\n     <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">authenticated_user/items</span><span class="dl">\'</span>\n     <span class="k">try</span> <span class="p">{</span>\n       <span class="kd">const</span> <span class="na">response</span> <span class="p">:</span> <span class="nx">PostData</span><span class="p">[]</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">axios</span><span class="p">.</span><span class="nx">$get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>\n       <span class="k">return</span> <span class="nx">response</span>\n     <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>\n       <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>\n     <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<p>APIから取得する記事のタイプ</p>\n<div class="code-frame" data-lang="typescript">\n<div class="code-lang"><span class="bold">~/types/Qiita/Api/v2/datas.d.ts</span></div>\n<div class="highlight"><pre><code><span class="cm">/**\n * 投稿データ\n * https://qiita.com/api/v2/docs#%E6%8A%95%E7%A8%BF\n * */</span>\n<span class="k">export</span> <span class="kr">interface</span> <span class="nx">PostData</span><span class="p">{</span>\n  <span class="cm">/** HTML形式の本文 */</span>\n  <span class="nl">rendered_body</span><span class="p">:</span><span class="kr">string</span>\n  <span class="cm">/** Markdown形式の本文 */</span>\n  <span class="nx">body</span><span class="p">:</span><span class="kr">string</span>\n  <span class="cm">/** この記事が共同更新状態かどうか (Qiita Teamでのみ有効) */</span>\n  <span class="nx">coediting</span><span class="p">:</span><span class="nx">boolean</span>\n  <span class="cm">/** この記事へのコメントの数 */</span>\n  <span class="nx">comments_count</span><span class="p">:</span><span class="kr">number</span>\n  <span class="cm">/** データが作成された日時 */</span>\n  <span class="nx">created_at</span><span class="p">:</span><span class="kr">string</span>\n  <span class="cm">/** Qiita Teamのグループを表します。 */</span>\n  <span class="nx">group</span><span class="p">:</span><span class="kr">any</span>\n  <span class="cm">/** 記事の一意なID */</span>\n  <span class="nx">id</span><span class="p">:</span><span class="kr">string</span>\n  <span class="cm">/** この記事への「LGTM！」の数（Qiitaでのみ有効） */</span>\n  <span class="nx">likes_count</span><span class="p">:</span><span class="kr">number</span>\n  <span class="cm">/** 限定共有状態かどうかを表すフラグ (Qiita Teamでは無効) */</span>\n  <span class="k">private</span><span class="p">:</span><span class="nx">boolean</span>\n  <span class="cm">/** 絵文字リアクションの数（Qiita Teamでのみ有効） */</span>\n  <span class="nx">reactions_count</span><span class="p">:</span><span class="kr">number</span>\n  <span class="cm">/** 記事に付いたタグ一覧 */</span>\n  <span class="nx">tags</span><span class="p">:</span><span class="kr">any</span>\n  <span class="cm">/** 記事のタイトル */</span>\n  <span class="nx">title</span><span class="p">:</span><span class="kr">string</span>\n  <span class="cm">/** データが最後に更新された日時 */</span>\n  <span class="nx">updated_at</span><span class="p">:</span><span class="kr">string</span>\n  <span class="cm">/** Qiita上のユーザー情報 */</span>\n  <span class="nx">user</span><span class="p">:</span> <span class="kr">any</span>\n  <span class="cm">/** 記事のurl */</span>\n  <span class="nx">url</span><span class="p">:</span><span class="kr">string</span>\n  <span class="cm">/** Qiita上のユーザーを表します。 */</span>\n  <span class="nx">page_views_count</span><span class="p">:</span><span class="kr">number</span> <span class="o">|</span> <span class="kc">undefined</span>\n  <span class="cm">/** Qiita Teamのチームメンバー情報を表します */</span>\n  <span class="nx">team_membership</span><span class="p">:</span> <span class="kr">any</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<h2>\n<span id="qiitaのpatを使用しない" class="fragment"></span><a href="#qiita%E3%81%AEpat%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84"><i class="fa fa-link"></i></a>QiitaのPATを使用しない</h2>\n<p>publicリポジトリでGithub pages使うとenvファイルに書いたPATが丸見えになってしまうので他の方法を考えます。（もしかしたらGithubのsecretsなどをうまく使用する方法があるのかもしれませんが、現状思い浮かばなかったので...）</p>\n<p><code>GET /api/v2/items</code>で取得します。<br>\nまだ、大した記事数ではないので<code>page</code>や<code>per_page</code>パラメータは使用せず、検索クエリパラメータ<code>query</code>のみ使用します</p>\n<div class="code-frame" data-lang="typescript">\n<div class="code-lang"><span class="bold">~/api/QiitaApi.ts</span></div>\n<div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NuxtAxiosInstance</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@nuxtjs/axios</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">PostData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">~/types/Qiita/Api/v2/datas</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">IApi</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">~/types/Qiita/Api/v2/IApi</span><span class="dl">\'</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">QiitaApi</span> <span class="k">implements</span> <span class="nx">IApi</span> <span class="p">{</span>\n  <span class="k">private</span> <span class="k">readonly</span> <span class="nx">axios</span><span class="p">:</span> <span class="nx">NuxtAxiosInstance</span>\n\n  <span class="kd">constructor</span> <span class="p">(</span><span class="nx">axios</span><span class="p">:</span> <span class="nx">NuxtAxiosInstance</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">axios</span> <span class="o">=</span> <span class="nx">axios</span>\n  <span class="p">}</span>\n\n  <span class="k">public</span> <span class="k">async</span> <span class="nx">getMyQiitaItems</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">PostData</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>\n    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">\'</span><span class="s1">items</span><span class="dl">\'</span>\n    <span class="k">try</span> <span class="p">{</span>\n      <span class="kd">const</span> <span class="na">response</span><span class="p">:</span> <span class="nx">PostData</span><span class="p">[]</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">axios</span><span class="p">.</span><span class="nx">$get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>\n        <span class="na">params</span><span class="p">:</span> <span class="p">{</span>\n          <span class="na">query</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">user:sYamaz</span><span class="dl">\'</span><span class="c1">//ユーザー名でフィルタリング</span>\n        <span class="p">}</span>\n      <span class="p">})</span>\n      <span class="k">return</span> <span class="nx">response</span>\n    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div>\n</div>\n<h2>\n<span id="終わりに" class="fragment"></span><a href="#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB"><i class="fa fa-link"></i></a>終わりに</h2>\n<p><code>@nuxt/axios</code>を使ってQiitaApiにアクセスし、自分の記事一覧を取得することができました。</p>\n<p>ただし、使用制限（認証あり：1000回/時、認証なし：60回/時）があったり、記事自体そこまで頻繁に更新するものでもないことから、今回のような目的の場合はスクリプトなどでコードを自動生成するような方法の方が適していると思います。</p>\n<p>Github Actionを使って定期的にApiアクセス＆コード自動生成→コミット/マージ→Github Pagesにデプロイとかできると面白そうです。</p>\n<hr>\n<p>参考リンク</p>\n<ul>\n<li><a href="https://qiita.com/api/v2/docs">Qiita Api v2 ドキュメント</a></li>\n<li><a href="https://axios.nuxtjs.org/extend#new-axios-instance" rel="nofollow noopener" target="_blank">axios.nuxtjs.org</a></li>\n</ul>\n<p>自己紹介サイト</p>\n<ul>\n<li><a href="https://syamaz.github.io/website-nuxt/" rel="nofollow noopener" target="_blank">https://syamaz.github.io/website-nuxt/</a></li>\n</ul>\n',body:"GitHubpagesに自己紹介サイトを立てて少しずつ拡張しています。\n今回、サイトにQiita記事へのリンクを貼りたい、けどリンクをペタペタ貼るのもつまらないということで、QiitaApiから私が書いた記事を取得しサイトに表示することにしました。\n\n### 準備\n\n```shell\nyarn add @nuxtjs/axios\n```\n\n## QiitaのPATを使用する\n\nQiitaの設定でPATを生成、axiosのヘッダーに登録します。\nここではQiitaApiクラスを作成し、`asyncData(ctx:Context)`などで使用できるようにします。\n（ここでは型定義の紹介は省きます）\n\n```~/plugins/apiPlugins.ts\nimport { Plugin } from '@nuxt/types'\nimport QiitaApi from '~/api/QiitaApi'\nimport { QiitaApi as MockApi } from '~/mock/QiitaApi' // テストとかではモックに切り替えたい願望\nimport IApi from '~/types/Qiita/Api/v2/IApi'\n\n// vueインスタンスから$qiitaApiを使用可能にする\ndeclare module 'vue/types/vue' {\n  interface Vue {\n    $qiitaApi: IApi\n  }\n}\n\n// this.$nuxt.contextから$qiitaApiを使用可能にする\ndeclare module '@nuxt/types' {\n  interface NuxtAppOptions {\n    $qiitaApi: IApi\n  }\n\n  interface Context {\n    $qiitaApi: IApi\n  }\n}\n\nexport const apiPlugin: Plugin = (context, inject): void => {\n  const qiitaAxios = context.$axios.create({\n    // baseURL: context.$config.baseURL\n    baseURL: 'https://qiita.com/api/v2/',\n    headers: { \n      // 環境変数に設定したQiita PATを登録\n      Authorization: 'Bearer ' + process.env.PAT\n    }\n  })\n\n  inject('qiitaApi', new QiitaApi(qiitaAxios))\n}\n\nexport default apiPlugin\n```\n\n`GET /api/v2/authenticated_user/items`を使用することで、PATを設定したユーザーの記事を取得できます。\n\n```~/api/QiitaApi.ts\nimport { NuxtAxiosInstance } from '@nuxtjs/axios'\nimport { PostData } from '~/types/Qiita/Api/v2/datas'\nimport IApi from '~/types/Qiita/Api/v2/IApi'\n\nexport default class QiitaApi implements IApi {\n  private readonly axios: NuxtAxiosInstance\n\n  constructor (axios: NuxtAxiosInstance) {\n    this.axios = axios\n  }\n\n  public async getMyQiitaItems (): Promise<PostData[]> {\n     const url = 'authenticated_user/items'\n     try {\n       const response : PostData[] = await this.axios.$get(url)\n       return response\n     } catch (e) {\n       return Promise.reject(e)\n     }\n  }\n}\n```\n\nAPIから取得する記事のタイプ\n\n```~/types/Qiita/Api/v2/datas.d.ts\n/**\n * 投稿データ\n * https://qiita.com/api/v2/docs#%E6%8A%95%E7%A8%BF\n * */\nexport interface PostData{\n  /** HTML形式の本文 */\n  rendered_body:string\n  /** Markdown形式の本文 */\n  body:string\n  /** この記事が共同更新状態かどうか (Qiita Teamでのみ有効) */\n  coediting:boolean\n  /** この記事へのコメントの数 */\n  comments_count:number\n  /** データが作成された日時 */\n  created_at:string\n  /** Qiita Teamのグループを表します。 */\n  group:any\n  /** 記事の一意なID */\n  id:string\n  /** この記事への「LGTM！」の数（Qiitaでのみ有効） */\n  likes_count:number\n  /** 限定共有状態かどうかを表すフラグ (Qiita Teamでは無効) */\n  private:boolean\n  /** 絵文字リアクションの数（Qiita Teamでのみ有効） */\n  reactions_count:number\n  /** 記事に付いたタグ一覧 */\n  tags:any\n  /** 記事のタイトル */\n  title:string\n  /** データが最後に更新された日時 */\n  updated_at:string\n  /** Qiita上のユーザー情報 */\n  user: any\n  /** 記事のurl */\n  url:string\n  /** Qiita上のユーザーを表します。 */\n  page_views_count:number | undefined\n  /** Qiita Teamのチームメンバー情報を表します */\n  team_membership: any\n}\n```\n\n## QiitaのPATを使用しない\n\npublicリポジトリでGithub pages使うとenvファイルに書いたPATが丸見えになってしまうので他の方法を考えます。（もしかしたらGithubのsecretsなどをうまく使用する方法があるのかもしれませんが、現状思い浮かばなかったので...）\n\n`GET /api/v2/items`で取得します。\nまだ、大した記事数ではないので`page`や`per_page`パラメータは使用せず、検索クエリパラメータ`query`のみ使用します\n\n```~/api/QiitaApi.ts\nimport { NuxtAxiosInstance } from '@nuxtjs/axios'\nimport { PostData } from '~/types/Qiita/Api/v2/datas'\nimport IApi from '~/types/Qiita/Api/v2/IApi'\n\nexport default class QiitaApi implements IApi {\n  private readonly axios: NuxtAxiosInstance\n\n  constructor (axios: NuxtAxiosInstance) {\n    this.axios = axios\n  }\n\n  public async getMyQiitaItems (): Promise<PostData[]> {\n    const url = 'items'\n    try {\n      const response: PostData[] = await this.axios.$get(url, {\n        params: {\n          query: 'user:sYamaz'//ユーザー名でフィルタリング\n        }\n      })\n      return response\n    } catch (e) {\n      return Promise.reject(e)\n    }\n  }\n}\n```\n\n## 終わりに\n\n`@nuxt/axios`を使ってQiitaApiにアクセスし、自分の記事一覧を取得することができました。\n\nただし、使用制限（認証あり：1000回/時、認証なし：60回/時）があったり、記事自体そこまで頻繁に更新するものでもないことから、今回のような目的の場合はスクリプトなどでコードを自動生成するような方法の方が適していると思います。\n\nGithub Actionを使って定期的にApiアクセス＆コード自動生成→コミット/マージ→Github Pagesにデプロイとかできると面白そうです。\n\n---\n参考リンク\n\n* [Qiita Api v2 ドキュメント](https://qiita.com/api/v2/docs)\n* [axios.nuxtjs.org](https://axios.nuxtjs.org/extend#new-axios-instance)\n\n自己紹介サイト\n\n* [https://syamaz.github.io/website-nuxt/](https://syamaz.github.io/website-nuxt/)\n",coediting:!1,comments_count:0,created_at:"2022-05-23T22:46:08+09:00",group:"{ }",id:"10c8c9db83e5dad62b90",likes_count:1,private:!1,tags:[{},{},{},{}],title:"@nuxt/axiosを使ってQiita Apiから記事一覧を取得する",updated_at:"2022-05-23T22:46:08+09:00",url:"https://qiita.com/sYamaz/items/10c8c9db83e5dad62b90",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>2022年5月2日に初めてアプリをリリースしました。</p>\n<p>今回は提出からリリースに至るまでの審査の過程やリジェクト内容などをサクッと共有できればと思います。</p>\n<h2>\n<span id="2021年12月15日アプリ提出" class="fragment"></span><a href="#2021%E5%B9%B412%E6%9C%8815%E6%97%A5%E3%82%A2%E3%83%97%E3%83%AA%E6%8F%90%E5%87%BA"><i class="fa fa-link"></i></a>2021年12月15日：アプリ提出</h2>\n<p>App Store Connectの審査に自作アプリを提出しました。<br>\n私としてはこれが初めての経験となります。</p>\n<h2>\n<span id="2021年12月20日in-review状態になる" class="fragment"></span><a href="#2021%E5%B9%B412%E6%9C%8820%E6%97%A5in-review%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%AA%E3%82%8B"><i class="fa fa-link"></i></a>2021年12月20日：In Review状態になる</h2>\n<p>休日を除けば提出してから２〜３日経過してレビューが開始されたようでした。</p>\n<p>思ったよりレビュー開始までに時間かかったなと思いましたが、個人開発で特に切羽詰まっているものでもなかったので気長に待つつもりでいました。</p>\n<h2>\n<span id="2021年12月20日謎のリジェクトを受ける" class="fragment"></span><a href="#2021%E5%B9%B412%E6%9C%8820%E6%97%A5%E8%AC%8E%E3%81%AE%E3%83%AA%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E5%8F%97%E3%81%91%E3%82%8B"><i class="fa fa-link"></i></a>2021年12月20日：謎のリジェクトを受ける</h2>\n<blockquote>\n<p>Hello,</p>\n<p>The review of your app is taking longer than expected. Once we &gt; have completed our review, we will notify you via Resolution Center.</p>\n<p>If you would like to inquire about the status of this review, you may file a request via the Apple Developer Contact Us page.</p>\n<p>Best regards,</p>\n<p>App Store Review</p>\n<p>却下の理由：Other</p>\n</blockquote>\n<p>意訳：予想より時間かかっています。レビュー終わったらお知らせします。</p>\n<p>ということで、ステータスはリジェクトでしたが、こちらから何かアクションを起こさなくても良さそうだったのでそのまま放置していました。</p>\n<h2>\n<span id="2022年3月29日再びin-review状態になる" class="fragment"></span><a href="#2022%E5%B9%B43%E6%9C%8829%E6%97%A5%E5%86%8D%E3%81%B3in-review%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%AA%E3%82%8B"><i class="fa fa-link"></i></a>2022年3月29日：再びIn Review状態になる</h2>\n<p>忘れた頃、実に約３ヶ月ぶりに唐突にレビューが再開されました</p>\n<h2>\n<span id="2022年3月29日リジェクト" class="fragment"></span><a href="#2022%E5%B9%B43%E6%9C%8829%E6%97%A5%E3%83%AA%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88"><i class="fa fa-link"></i></a>2022年3月29日：リジェクト</h2>\n<p>却下の理由は<code>Guideline 2.3 - Performance - Accurate Metadata</code></p>\n<p>前回の、<code>却下の理由：Other</code>と違ってこの時はアプリに問題があってのリジェクトだったので対応する必要があります。</p>\n<h2>\n<span id="2022年5月2日再審査" class="fragment"></span><a href="#2022%E5%B9%B45%E6%9C%882%E6%97%A5%E5%86%8D%E5%AF%A9%E6%9F%BB"><i class="fa fa-link"></i></a>2022年5月2日：再審査</h2>\n<p>上記の却下の理由は、"ライトモードとダークモードのスクリーンショットを提出しているがアプリ本体にテーマ切り替えの機能はない"ことのようです。</p>\n<p>システムのテーマに合わせてアプリのテーマも切り替わるようにはなっていたのですが、どうやらそれだけでは足りないみたいです（ここの確証が得られる情報をまだ見つけられていません）。</p>\n<p>今回はテーマにこだわりはなかったのでライトモードのスクリーンショットのみに差し替えたところ即日審査通過となりました。</p>\n<p>対応自体は1日で終わりましたが、プライベートがバタバタしていたのでリジェクトから約１ヶ月後の再提出となりました。</p>\n<hr>\n<p>そのアプリ（iPhoneのみ）</p>\n<p><qiita-embed-ogp src="https://apps.apple.com/jp/app/routinetree/id1600469504"></qiita-embed-ogp></p>\n',body:'2022年5月2日に初めてアプリをリリースしました。\n\n今回は提出からリリースに至るまでの審査の過程やリジェクト内容などをサクッと共有できればと思います。\n\n## 2021年12月15日：アプリ提出\n\nApp Store Connectの審査に自作アプリを提出しました。\n私としてはこれが初めての経験となります。\n\n## 2021年12月20日：In Review状態になる\n\n休日を除けば提出してから２〜３日経過してレビューが開始されたようでした。\n\n思ったよりレビュー開始までに時間かかったなと思いましたが、個人開発で特に切羽詰まっているものでもなかったので気長に待つつもりでいました。\n\n## 2021年12月20日：謎のリジェクトを受ける\n\n> Hello,\n> \n> The review of your app is taking longer than expected. Once we > have completed our review, we will notify you via Resolution Center.\n>\n> If you would like to inquire about the status of this review, you may file a request via the Apple Developer Contact Us page.\n>\n> Best regards,\n>\n> App Store Review\n>\n> 却下の理由：Other\n\n意訳：予想より時間かかっています。レビュー終わったらお知らせします。\n\nということで、ステータスはリジェクトでしたが、こちらから何かアクションを起こさなくても良さそうだったのでそのまま放置していました。\n\n## 2022年3月29日：再びIn Review状態になる\n\n忘れた頃、実に約３ヶ月ぶりに唐突にレビューが再開されました\n\n## 2022年3月29日：リジェクト\n\n却下の理由は`Guideline 2.3 - Performance - Accurate Metadata`\n\n前回の、`却下の理由：Other`と違ってこの時はアプリに問題があってのリジェクトだったので対応する必要があります。\n\n## 2022年5月2日：再審査\n\n上記の却下の理由は、"ライトモードとダークモードのスクリーンショットを提出しているがアプリ本体にテーマ切り替えの機能はない"ことのようです。\n\nシステムのテーマに合わせてアプリのテーマも切り替わるようにはなっていたのですが、どうやらそれだけでは足りないみたいです（ここの確証が得られる情報をまだ見つけられていません）。\n\n今回はテーマにこだわりはなかったのでライトモードのスクリーンショットのみに差し替えたところ即日審査通過となりました。\n\n対応自体は1日で終わりましたが、プライベートがバタバタしていたのでリジェクトから約１ヶ月後の再提出となりました。\n\n---\n\nそのアプリ（iPhoneのみ）\n\nhttps://apps.apple.com/jp/app/routinetree/id1600469504\n',coediting:!1,comments_count:0,created_at:"2022-05-11T21:35:51+09:00",group:"{ }",id:"6f6985cc71cd96dfdb4f",likes_count:0,private:!1,tags:[{},{}],title:"初めてAppStoreにアプリを出した話（ほぼ日記）",updated_at:"2022-05-11T21:35:51+09:00",url:"https://qiita.com/sYamaz/items/6f6985cc71cd96dfdb4f",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>タイトルの通りのことをやってみました。</p>\n\n<p>結論から言うと、Blazorをやっているとvueの学習コストが下がるので「dotnetしかやったことないよ！」という人にはVueはお勧めできるかと思います。</p>\n\n<p>Blazorで作った話はこちら↓</p>\n\n<ul>\n<li><a href="https://qiita.com/sYamaz/items/d0b12043f5b25a36d8e6" id="reference-c26eddef344ca9780a75">BlazorでSkclusive-UIを使った話</a></li>\n<li>ページ：<a href="https://syamaz.github.io/website/" class="autolink" rel="nofollow noopener" target="_blank">https://syamaz.github.io/website/</a>\n</li>\n</ul>\n\n<p>今回作ったものはこちら↓</p>\n\n<ul>\n<li>ページ：<a href="https://syamaz.github.io/website-vue/" class="autolink" rel="nofollow noopener" target="_blank">https://syamaz.github.io/website-vue/</a>\n</li>\n</ul>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<ul>\n<li>Vue3</li>\n<li>Vue-router@4</li>\n<li>Vuetify 3.0.0-alpha</li>\n<li>Vite</li>\n<li>gh-pages</li>\n</ul>\n\n<h2>\n<span id="vueコンポーネントとrazorコンポーネント" class="fragment"></span><a href="#vue%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%A8razor%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88"><i class="fa fa-link"></i></a>vueコンポーネントとrazorコンポーネント</h2>\n\n<p>コンポーネントにはスタイル、テンプレート（UI）、スクリプトが含まれるという点でvueコンポーネントとrazorコンポーネントはほぼ同じ役割を持たせることができます</p>\n\n<p>以下、Materialデザインの「カード」を列挙するページについてのコンポーネントです。</p>\n\n<h5>\n<span id="vue" class="fragment"></span><a href="#vue"><i class="fa fa-link"></i></a>vue</h5>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/website-vue/blob/main/src/components/Works.vue"></qiita-embed-ogp></p>\n\n<p><details><summary>コード</summary><div>\n\n<div class="code-frame" data-lang="vuejs"><div class="highlight"><pre><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>\n  <span class="nt">&lt;v-container&gt;</span>\n  <span class="nt">&lt;h1&gt;</span>Works<span class="nt">&lt;/h1&gt;</span>\n  <span class="nt">&lt;v-container</span> <span class="na">v-for=</span><span class="s">"app in apps"</span> <span class="na">v-bind:key=</span><span class="s">"app"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;v-card&gt;</span>\n      <span class="nt">&lt;v-card-title&gt;</span><span class="si">{{</span><span class="nx">app</span><span class="p">.</span><span class="nx">name</span><span class="si">}}</span><span class="nt">&lt;/v-card-title&gt;</span>\n      <span class="nt">&lt;v-card-media&gt;</span>\n        <span class="nt">&lt;v-img</span> <span class="na">:src=</span><span class="s">"app.img"</span><span class="nt">&gt;&lt;/v-img&gt;</span>\n      <span class="nt">&lt;/v-card-media&gt;</span>\n      <span class="nt">&lt;v-card-text&gt;</span><span class="si">{{</span> <span class="nx">app</span><span class="p">.</span><span class="nx">text</span> <span class="si">}}</span><span class="nt">&lt;/v-card-text&gt;</span>\n\n\n      <span class="nt">&lt;v-card-subtitle&gt;</span>Platform <span class="si">{{</span> <span class="nx">app</span><span class="p">.</span><span class="nx">platform</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="p">)</span> <span class="si">}}</span><span class="nt">&lt;/v-card-subtitle&gt;</span>\n      <span class="nt">&lt;v-card-subtitle&gt;</span>Status <span class="si">{{</span><span class="nx">app</span><span class="p">.</span><span class="nx">status</span><span class="si">}}</span><span class="nt">&lt;/v-card-subtitle&gt;</span>\n      <span class="nt">&lt;v-card-text&gt;&lt;/v-card-text&gt;</span>\n      <span class="nt">&lt;v-divider&gt;&lt;/v-divider&gt;</span>\n      <span class="nt">&lt;v-card-actions&gt;</span>\n        <span class="nt">&lt;v-btn</span> <span class="na">v-if=</span><span class="s">"app.url != \'\'"</span> <span class="na">:to=</span><span class="s">"app.url"</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">"text-info"</span><span class="nt">&gt;</span>Read more<span class="nt">&lt;/span&gt;&lt;/v-btn&gt;</span>\n        <span class="nt">&lt;v-btn</span> <span class="na">v-if=</span><span class="s">"app.outerurl != \'\'"</span> <span class="na">:href=</span><span class="s">"app.outerurl"</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">"text-info"</span><span class="nt">&gt;</span>Read more<span class="nt">&lt;/span&gt;&lt;/v-btn&gt;</span>\n      <span class="nt">&lt;/v-card-actions&gt;</span>\n    <span class="nt">&lt;/v-card&gt;</span>\n  <span class="nt">&lt;/v-container&gt;</span>\n  <span class="nt">&lt;/v-container&gt;</span>\n<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">script</span> <span class="na">setup</span><span class="nt">&gt;</span>\n<span class="k">import</span> <span class="nx">routineTreeImg</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../assets/RoutineTree.png</span><span class="dl">"</span>\n<span class="kd">const</span> <span class="nx">apps</span> <span class="o">=</span> <span class="p">[</span>\n  <span class="p">{</span>\n    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">RoutineTree</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">img</span><span class="p">:</span> <span class="nx">routineTreeImg</span><span class="p">,</span>\n    <span class="na">text</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Task management application that helps you accomplish your daily routine tasks.</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">platform</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">iOS</span><span class="dl">"</span><span class="p">],</span>\n    <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">In Review</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">url</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>\n    <span class="na">outerurl</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://syamaz.github.io/RoutineTree/</span><span class="dl">"</span>\n  <span class="p">},</span>\n  <span class="p">{</span>\n    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">My homepage</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">img</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>\n    <span class="na">text</span><span class="p">:</span> <span class="dl">"</span><span class="s2">This website.</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">platform</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">web</span><span class="dl">"</span><span class="p">],</span>\n    <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Released</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>\n    <span class="na">outerurl</span><span class="p">:</span> <span class="dl">""</span>\n  <span class="p">}</span>\n<span class="p">]</span>\n<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>\n\n<span class="nt">&lt;</span><span class="k">style</span><span class="nt">&gt;</span>\n<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>\n</code></pre></div></div>\n\n<p></p>\n</div></details></p>\n\n<h5>\n<span id="blazor" class="fragment"></span><a href="#blazor"><i class="fa fa-link"></i></a>Blazor</h5>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/website/blob/main/website/Pages/Works/WorksPage.razor"></qiita-embed-ogp></p>\n\n<p><details><summary>コード</summary><div>\n\n<div class="code-frame" data-lang="razor"><div class="highlight"><pre><code>@page "/works"\n\n@inject NavigationManager navman\n@using website.Components\n@using website.Pages.Works.Parts\n@using website.Pages.Works.Datas\n&lt;style&gt;\n    .styled-linkbutton {\n        @*縦並び*@\n        display: block;\n        text-transform:none;\n    }\n\n        .styled-linkbutton:is(:hover) {\n            text-decoration: underline;\n        }\n&lt;/style&gt;\n\n&lt;PageTitle&gt;Works - sYamaz&lt;/PageTitle&gt;\n\n\n&lt;Typography Variant="TypographyVariant.H5"&gt;\n    Works\n&lt;/Typography&gt;\n\n\n@foreach (var item in Datas)\n{\n    &lt;Box Padding="2" Margin="2"&gt;\n        &lt;WorkCardView WorkData="@item" /&gt;\n    &lt;/Box&gt;\n}\n\n\n\n@code {\n\n\n\n    private IEnumerable&lt;AnyWorkData&gt; Datas\n    {\n        get\n        {\n\n\n            yield return new AnyWorkData\n            {\n                Title = "RoutineTree",\n                Description = "Task management application that helps you accomplish your daily routine tasks.",\n                ReadMoreURL = "https://syamaz.github.io/RoutineTree/",\n                ImagePath = "images/RoutineTree.png",\n                Status = WorkStatus.inReview,\n                SupportPlatform = SupportPlatform.iOS\n            };\n\n            yield return new AnyWorkData\n            {\n                Title = "Some web app/service",\n                Description = "My practice project using Vue and AWS",\n                ReadMoreURL = "",\n                ImagePath = "images/Noimage.png",\n                Status = WorkStatus.underDevelop,\n                SupportPlatform = SupportPlatform.web\n            };\n\n            // --- end ---\n\n            yield return new AnyWorkData\n            {\n                Title = "My homepage",\n                Description = "This website.",\n                ReadMoreURL = "",\n                ImagePath = "images/Noimage.png",\n                Status = WorkStatus.release,\n                SupportPlatform = SupportPlatform.web\n            };\n        }\n    }\n\n\n}\n\n</code></pre></div></div>\n\n<p></p>\n</div></details></p>\n\n<h2>\n<span id="ルーティング" class="fragment"></span><a href="#%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0"><i class="fa fa-link"></i></a>ルーティング</h2>\n\n<p>Blazorの場合、デフォルトでルーティング機能が付いてます。</p>\n\n<p><code>@page "/{url}"</code>をコンポーネント内で宣言することで他ページから遷移することができます。</p>\n\n<p>vueでvue-routerを使う場合はコンポーネントで宣言というよりは一括で宣言することになります。（ドキュメントを十分に読み込めてないだけで、別の方法があるかもしれません）</p>\n\n<h5>\n<span id="vue-1" class="fragment"></span><a href="#vue-1"><i class="fa fa-link"></i></a>vue</h5>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/website-vue/blob/main/src/router/index.js"></qiita-embed-ogp></p>\n\n<p><details><summary>コード</summary><div>\n\n<div class="code-frame" data-lang="js"><div class="highlight"><pre><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createRouter</span><span class="p">,</span> <span class="nx">createWebHistory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vue-router</span><span class="dl">\'</span>\n<span class="c1">// ページのコンポーネントをインポート</span>\n<span class="k">import</span> <span class="nx">AboutVue</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">../components/About.vue</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">WorksVue</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">../components/Works.vue</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">PostsVue</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">../components/Posts.vue</span><span class="dl">\'</span>\n\n\n<span class="kd">const</span> <span class="nx">routes</span> <span class="o">=</span> <span class="p">[</span>\n  <span class="p">{</span>\n    <span class="na">path</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">/</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">About</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">component</span><span class="p">:</span> <span class="nx">AboutVue</span>\n  <span class="p">},</span>\n  <span class="p">{</span>\n    <span class="na">path</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">/works</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Works</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">component</span><span class="p">:</span> <span class="nx">WorksVue</span>\n  <span class="p">},</span>\n  <span class="p">{</span>\n    <span class="na">path</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">/posts</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">name</span><span class="p">:</span> <span class="dl">\'</span><span class="s1">Posts</span><span class="dl">\'</span><span class="p">,</span>\n    <span class="na">component</span><span class="p">:</span> <span class="nx">PostsVue</span>\n  <span class="p">},</span>\n<span class="p">]</span>\n\n\n<span class="kd">const</span> <span class="nx">baseURL</span> <span class="o">=</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">BASE_URL</span><span class="p">;</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">base : </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">baseURL</span><span class="p">)</span>\n\n<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">createRouter</span><span class="p">({</span>\n  <span class="na">history</span><span class="p">:</span> <span class="nx">createWebHistory</span><span class="p">(</span><span class="nx">baseURL</span><span class="p">),</span>\n  <span class="nx">routes</span>\n<span class="p">})</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span>\n</code></pre></div></div>\n\n<p></p>\n</div></details></p>\n\n<h2>\n<span id="github-pages" class="fragment"></span><a href="#github-pages"><i class="fa fa-link"></i></a>GitHub Pages</h2>\n\n<p>基本的に楽をしたいため、<code>gh-pages</code>npmパッケージを使用します。</p>\n\n<p>vite.config.jsにデバッグ時と公開時でBaseURLをスイッチする定義を追加</p>\n\n<div class="code-frame" data-lang="js"><div class="highlight"><pre><code><span class="c1">// vite.config.js</span>\n<span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">vite</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">vue</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@vitejs/plugin-vue</span><span class="dl">\'</span>\n<span class="k">import</span> <span class="nx">vuetify</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">@vuetify/vite-plugin</span><span class="dl">\'</span>\n\n<span class="k">import</span> <span class="nx">path</span> <span class="k">from</span> <span class="dl">\'</span><span class="s1">path</span><span class="dl">\'</span>\n\n<span class="c1">// https://vitejs.dev/config/</span>\n<span class="k">export</span> <span class="k">default</span> <span class="nx">defineConfig</span><span class="p">({</span>\n  <span class="c1">// 略</span>\n  <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>\n    <span class="na">alias</span><span class="p">:</span> <span class="p">{</span>\n      <span class="dl">\'</span><span class="s1">@</span><span class="dl">\'</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">\'</span><span class="s1">src</span><span class="dl">\'</span><span class="p">),</span>\n    <span class="p">},</span>\n  <span class="p">},</span>\n  <span class="c1">// この一行を追加　\'/{Githubリポジトリ名}\'とか\'/\'とか</span>\n  <span class="na">base</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">\'</span><span class="s1">production</span><span class="dl">\'</span> <span class="p">?</span> <span class="dl">\'</span><span class="s1">{公開時}</span><span class="dl">\'</span> <span class="p">:</span> <span class="dl">\'</span><span class="s1">{デバッグ時}</span><span class="dl">\'</span><span class="p">,</span>\n\n  <span class="c1">// 略</span>\n<span class="p">})</span>\n\n</code></pre></div></div>\n\n<p>このbaseプロパティをvue-routerで使用します</p>\n\n<p><qiita-embed-ogp src="https://ja.vitejs.dev/guide/env-and-mode.html"></qiita-embed-ogp></p>\n\n<blockquote>\n<p>import.meta.env.BASE_URL: {string} アプリが配信されているベース URL。これは base 設定オプション によって決まります。</p>\n</blockquote>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/website-vue/blob/main/src/router/index.js"></qiita-embed-ogp></p>\n\n<div class="code-frame" data-lang="js"><div class="highlight"><pre><code><span class="c1">//vue-router@4</span>\n\n<span class="kd">const</span> <span class="nx">baseURL</span> <span class="o">=</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">BASE_URL</span><span class="p">;</span>\n\n<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">createRouter</span><span class="p">({</span>\n  <span class="na">history</span><span class="p">:</span> <span class="nx">createWebHistory</span><span class="p">(</span><span class="nx">baseURL</span><span class="p">),</span>\n  <span class="nx">routes</span>\n<span class="p">})</span>\n\n<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span>\n</code></pre></div></div>\n\n<h1>\n<span id="まとめ" class="fragment"></span><a href="#%E3%81%BE%E3%81%A8%E3%82%81"><i class="fa fa-link"></i></a>まとめ</h1>\n\n<p>dotnet開発者が→Webに手を広げていく際の一つの道が、「WinForm/WPF/UWP」→「Blazor」→「vue」なのかもしれません</p>\n',body:'タイトルの通りのことをやってみました。\n\n結論から言うと、Blazorをやっているとvueの学習コストが下がるので「dotnetしかやったことないよ！」という人にはVueはお勧めできるかと思います。\n\nBlazorで作った話はこちら↓\n\n* [BlazorでSkclusive-UIを使った話](https://qiita.com/sYamaz/items/d0b12043f5b25a36d8e6)\n* ページ：https://syamaz.github.io/website/\n\n今回作ったものはこちら↓\n\n* ページ：https://syamaz.github.io/website-vue/\n\n## 環境\n\n* Vue3\n* Vue-router@4\n* Vuetify 3.0.0-alpha\n* Vite\n* gh-pages\n\n## vueコンポーネントとrazorコンポーネント\n\nコンポーネントにはスタイル、テンプレート（UI）、スクリプトが含まれるという点でvueコンポーネントとrazorコンポーネントはほぼ同じ役割を持たせることができます\n\n以下、Materialデザインの「カード」を列挙するページについてのコンポーネントです。\n\n##### vue\n\nhttps://github.com/sYamaz/website-vue/blob/main/src/components/Works.vue\n\n<details><summary>コード</summary><div>\n\n```vuejs\n<template>\n  <v-container>\n  <h1>Works</h1>\n  <v-container v-for="app in apps" v-bind:key="app">\n    <v-card>\n      <v-card-title>{{app.name}}</v-card-title>\n      <v-card-media>\n        <v-img :src="app.img"></v-img>\n      </v-card-media>\n      <v-card-text>{{ app.text }}</v-card-text>\n\n      \n      <v-card-subtitle>Platform {{ app.platform.join(", ") }}</v-card-subtitle>\n      <v-card-subtitle>Status {{app.status}}</v-card-subtitle>\n      <v-card-text></v-card-text>\n      <v-divider></v-divider>\n      <v-card-actions>\n        <v-btn v-if="app.url != \'\'" :to="app.url"><span class="text-info">Read more</span></v-btn>\n        <v-btn v-if="app.outerurl != \'\'" :href="app.outerurl"><span class="text-info">Read more</span></v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-container>\n  </v-container>\n</template>\n\n<script setup>\nimport routineTreeImg from "../assets/RoutineTree.png"\nconst apps = [\n  {\n    name: "RoutineTree",\n    img: routineTreeImg,\n    text: "Task management application that helps you accomplish your daily routine tasks.",\n    platform: ["iOS"],\n    status: "In Review",\n    url: "",\n    outerurl: "https://syamaz.github.io/RoutineTree/"\n  },\n  {\n    name: "My homepage",\n    img: "",\n    text: "This website.",\n    platform: ["web"],\n    status: "Released",\n    url: "/",\n    outerurl: ""\n  }\n]\n<\/script>\n\n<style>\n</style>\n```\n\n</div></details>\n\n\n##### Blazor\n\nhttps://github.com/sYamaz/website/blob/main/website/Pages/Works/WorksPage.razor\n\n<details><summary>コード</summary><div>\n\n```razor\n@page "/works"\n\n@inject NavigationManager navman\n@using website.Components\n@using website.Pages.Works.Parts\n@using website.Pages.Works.Datas\n<style>\n    .styled-linkbutton {\n        @*縦並び*@\n        display: block;\n        text-transform:none;\n    }\n\n        .styled-linkbutton:is(:hover) {\n            text-decoration: underline;\n        }\n</style>\n\n<PageTitle>Works - sYamaz</PageTitle>\n\n\n<Typography Variant="TypographyVariant.H5">\n    Works\n</Typography>\n\n\n@foreach (var item in Datas)\n{\n    <Box Padding="2" Margin="2">\n        <WorkCardView WorkData="@item" />\n    </Box>\n}\n\n\n\n@code {\n\n\n\n    private IEnumerable<AnyWorkData> Datas\n    {\n        get\n        {\n\n\n            yield return new AnyWorkData\n            {\n                Title = "RoutineTree",\n                Description = "Task management application that helps you accomplish your daily routine tasks.",\n                ReadMoreURL = "https://syamaz.github.io/RoutineTree/",\n                ImagePath = "images/RoutineTree.png",\n                Status = WorkStatus.inReview,\n                SupportPlatform = SupportPlatform.iOS\n            };\n\n            yield return new AnyWorkData\n            {\n                Title = "Some web app/service",\n                Description = "My practice project using Vue and AWS",\n                ReadMoreURL = "",\n                ImagePath = "images/Noimage.png",\n                Status = WorkStatus.underDevelop,\n                SupportPlatform = SupportPlatform.web\n            };\n\n            // --- end ---\n\n            yield return new AnyWorkData\n            {\n                Title = "My homepage",\n                Description = "This website.",\n                ReadMoreURL = "",\n                ImagePath = "images/Noimage.png",\n                Status = WorkStatus.release,\n                SupportPlatform = SupportPlatform.web\n            };\n        }\n    }\n\n\n}\n\n```\n\n</div></details>\n\n\n## ルーティング\n\nBlazorの場合、デフォルトでルーティング機能が付いてます。\n\n`@page "/{url}"`をコンポーネント内で宣言することで他ページから遷移することができます。\n\nvueでvue-routerを使う場合はコンポーネントで宣言というよりは一括で宣言することになります。（ドキュメントを十分に読み込めてないだけで、別の方法があるかもしれません）\n\n##### vue\n\nhttps://github.com/sYamaz/website-vue/blob/main/src/router/index.js\n\n<details><summary>コード</summary><div>\n\n```js\nimport { createRouter, createWebHistory } from \'vue-router\'\n// ページのコンポーネントをインポート\nimport AboutVue from \'../components/About.vue\'\nimport WorksVue from \'../components/Works.vue\'\nimport PostsVue from \'../components/Posts.vue\'\n\n\nconst routes = [\n  {\n    path: \'/\',\n    name: \'About\',\n    component: AboutVue\n  },\n  {\n    path: \'/works\',\n    name: \'Works\',\n    component: WorksVue\n  },\n  {\n    path: \'/posts\',\n    name: \'Posts\',\n    component: PostsVue\n  },\n]\n\n\nconst baseURL = import.meta.env.BASE_URL;\nconsole.log("base : " + baseURL)\n\nconst router = createRouter({\n  history: createWebHistory(baseURL),\n  routes\n})\n\nexport default router\n```\n\n</div></details>\n\n## GitHub Pages\n\n基本的に楽をしたいため、`gh-pages`npmパッケージを使用します。\n\nvite.config.jsにデバッグ時と公開時でBaseURLをスイッチする定義を追加\n\n```js\n// vite.config.js\nimport { defineConfig } from \'vite\'\nimport vue from \'@vitejs/plugin-vue\'\nimport vuetify from \'@vuetify/vite-plugin\'\n\nimport path from \'path\'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  // 略\n  resolve: {\n    alias: {\n      \'@\': path.resolve(__dirname, \'src\'),\n    },\n  },\n  // この一行を追加　\'/{Githubリポジトリ名}\'とか\'/\'とか\n  base: process.env.NODE_ENV === \'production\' ? \'{公開時}\' : \'{デバッグ時}\',\n\n  // 略\n})\n\n```\n\nこのbaseプロパティをvue-routerで使用します\n\nhttps://ja.vitejs.dev/guide/env-and-mode.html\n\n>import.meta.env.BASE_URL: {string} アプリが配信されているベース URL。これは base 設定オプション によって決まります。\n\n\n\nhttps://github.com/sYamaz/website-vue/blob/main/src/router/index.js\n\n```js\n//vue-router@4\n\nconst baseURL = import.meta.env.BASE_URL;\n\nconst router = createRouter({\n  history: createWebHistory(baseURL),\n  routes\n})\n\nexport default router\n```\n\n# まとめ\n\ndotnet開発者が→Webに手を広げていく際の一つの道が、「WinForm/WPF/UWP」→「Blazor」→「vue」なのかもしれません\n',coediting:!1,comments_count:0,created_at:"2022-01-09T17:48:02+09:00",group:"{ }",id:"86f574ec54a1e23ea527",likes_count:0,private:!1,tags:[{},{},{},{}],title:"C# Blazorで作ったサイトをVue.jsで作り直してみた",updated_at:"2022-01-09T17:48:02+09:00",url:"https://qiita.com/sYamaz/items/86f574ec54a1e23ea527",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>本日で今年の仕事納めなので、2021/10/18から続けていた朝活について共有しようかと思います。<br>\n（この記事も2021/12/29の朝活中に書いてます）</p>\n\n<h2>\n<span id="朝活のきっかけ" class="fragment"></span><a href="#%E6%9C%9D%E6%B4%BB%E3%81%AE%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91"><i class="fa fa-link"></i></a>朝活のきっかけ</h2>\n\n<p>仕事で大きな区切りがあり、自分を見つめ直す機会がありました。<br>\n今後企業で働くにしろ個人で働くにしろスキルは磨き続けなければいけない、というある意味当たり前のことを再認識したのがきっかけです。</p>\n\n<h2>\n<span id="朝活を始める前に最初にやったこと" class="fragment"></span><a href="#%E6%9C%9D%E6%B4%BB%E3%82%92%E5%A7%8B%E3%82%81%E3%82%8B%E5%89%8D%E3%81%AB%E6%9C%80%E5%88%9D%E3%81%AB%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8"><i class="fa fa-link"></i></a>朝活を始める前に最初にやったこと</h2>\n\n<p>M1 macbook air（一番安いモデル）を買いました。家に届いたのが10/17でその翌日から朝活を開始してます</p>\n\n<h2>\n<span id="朝活概要" class="fragment"></span><a href="#%E6%9C%9D%E6%B4%BB%E6%A6%82%E8%A6%81"><i class="fa fa-link"></i></a>朝活概要</h2>\n\n<ul>\n<li>出勤前の１時間程度</li>\n<li>会社近くのドトールコーヒーでやる</li>\n<li>平日は基本的に毎日、休日/休暇は任意</li>\n<li>仕事が終わって帰宅後GitHubにpush</li>\n</ul>\n\n<h2>\n<span id="結果" class="fragment"></span><a href="#%E7%B5%90%E6%9E%9C"><i class="fa fa-link"></i></a>結果</h2>\n\n<p>2021/10/18から2021/12/29までで合計49時間（49日間）朝活をすることができました。</p>\n\n<p>その間、以下３つの内容にチャレンジしてます。</p>\n\n<h4>\n<span id="iosアプリ" class="fragment"></span><a href="#ios%E3%82%A2%E3%83%97%E3%83%AA"><i class="fa fa-link"></i></a>iOSアプリ</h4>\n\n<p><a href="https://camo.qiitausercontent.com/12bb9f005fe366ca5b442b6467d6931a0202d82e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f35343634653663362d373066642d366537372d333561362d3737613261653265653362652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F5464e6c6-70fd-6e77-35a6-77a2ae2ee3be.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dd118a12ec06d93421db9ec270da5cca" alt="RoutineTree.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/5464e6c6-70fd-6e77-35a6-77a2ae2ee3be.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F5464e6c6-70fd-6e77-35a6-77a2ae2ee3be.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=de35680a82db997d9660ada033e7e978 1x" loading="lazy"></a></p>\n\n<p>mac, iphoneユーザーなので、私の生活に役立つアプリを作ってストアに公開しようとトライしました。</p>\n\n<p>過去もSwiftを趣味でいじってた期間はありましたが、真面目にストアに公開しようとしてたのは今回が初めてです。</p>\n\n<p>現在は<code>In Review</code>中...</p>\n\n<h4>\n<span id="自身のホームページ" class="fragment"></span><a href="#%E8%87%AA%E8%BA%AB%E3%81%AE%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8"><i class="fa fa-link"></i></a>自身のホームページ</h4>\n\n<p><qiita-embed-ogp src="https://syamaz.github.io/website/"></qiita-embed-ogp></p>\n\n<p>GitHub pagesにBlazorで作った私自身のウェブサイトをホスティングしてます。</p>\n\n<p>GitHub pagesを使ってみたかったのと、dotnetのBlazorWebAssemblyを触ってみたかったためトライ。</p>\n\n<h4>\n<span id="webサービスvue-aws使用" class="fragment"></span><a href="#web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9vue-aws%E4%BD%BF%E7%94%A8"><i class="fa fa-link"></i></a>Webサービス（Vue, AWS使用）</h4>\n\n<p>現在挑戦中です。</p>\n\n<p>iOS(モバイル)やって、ホームページ（静的Web）やったら次はWebアプリ/サービスかなということでやっています。</p>\n\n<p>iOSアプリやBlazorホームページはdotnet開発という仕事での経験が何らかの形で活きていましたが、これはストレッチ目標感が強いです。</p>\n\n<p>来年はしばらくこれをやってそうです。</p>\n\n<h2>\n<span id="今のところ朝活ってどうか" class="fragment"></span><a href="#%E4%BB%8A%E3%81%AE%E3%81%A8%E3%81%93%E3%82%8D%E6%9C%9D%E6%B4%BB%E3%81%A3%E3%81%A6%E3%81%A9%E3%81%86%E3%81%8B"><i class="fa fa-link"></i></a>今のところ朝活ってどうか</h2>\n\n<p>語り尽くされている話かもしれませんが...</p>\n\n<ul>\n<li>早寝早起きが身につく。健康になりそう\n\n<ul>\n<li>22時半就寝、5時起床</li>\n</ul>\n</li>\n<li>毎日コーヒー分（200~300円）のコストが発生\n\n<ul>\n<li>元を取るために集中することになる</li>\n<li>自宅で継続できる自信があればそれでもいいかも（私は無かった）</li>\n</ul>\n</li>\n<li>年末になった今「継続できた達成感」が得られている</li>\n<li>時間を無駄にしないために目標に対して真っ直ぐな開発ができる気がする\n\n<ul>\n<li>ホームページ作成も<code>Blazor</code>, <code>GitHub pages</code>だけに集中して不要な機能拡張やデザインへのこだわりを排除できた気がする。</li>\n</ul>\n</li>\n</ul>\n\n<p>私個人としてはいいことの方が多かったので来年も続けます。</p>\n',body:"本日で今年の仕事納めなので、2021/10/18から続けていた朝活について共有しようかと思います。\n（この記事も2021/12/29の朝活中に書いてます）\n\n## 朝活のきっかけ\n\n仕事で大きな区切りがあり、自分を見つめ直す機会がありました。\n今後企業で働くにしろ個人で働くにしろスキルは磨き続けなければいけない、というある意味当たり前のことを再認識したのがきっかけです。\n\n## 朝活を始める前に最初にやったこと\n\nM1 macbook air（一番安いモデル）を買いました。家に届いたのが10/17でその翌日から朝活を開始してます\n\n## 朝活概要\n\n* 出勤前の１時間程度\n* 会社近くのドトールコーヒーでやる\n* 平日は基本的に毎日、休日/休暇は任意\n* 仕事が終わって帰宅後GitHubにpush\n\n## 結果\n\n2021/10/18から2021/12/29までで合計49時間（49日間）朝活をすることができました。\n\nその間、以下３つの内容にチャレンジしてます。\n\n#### iOSアプリ\n\n![RoutineTree.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/5464e6c6-70fd-6e77-35a6-77a2ae2ee3be.png)\n\nmac, iphoneユーザーなので、私の生活に役立つアプリを作ってストアに公開しようとトライしました。\n\n過去もSwiftを趣味でいじってた期間はありましたが、真面目にストアに公開しようとしてたのは今回が初めてです。\n\n現在は`In Review`中...\n\n#### 自身のホームページ\n\nhttps://syamaz.github.io/website/\n\nGitHub pagesにBlazorで作った私自身のウェブサイトをホスティングしてます。\n\nGitHub pagesを使ってみたかったのと、dotnetのBlazorWebAssemblyを触ってみたかったためトライ。\n\n#### Webサービス（Vue, AWS使用）\n\n現在挑戦中です。\n\niOS(モバイル)やって、ホームページ（静的Web）やったら次はWebアプリ/サービスかなということでやっています。\n\niOSアプリやBlazorホームページはdotnet開発という仕事での経験が何らかの形で活きていましたが、これはストレッチ目標感が強いです。\n\n来年はしばらくこれをやってそうです。\n\n## 今のところ朝活ってどうか\n\n語り尽くされている話かもしれませんが...\n\n* 早寝早起きが身につく。健康になりそう\n  * 22時半就寝、5時起床\n* 毎日コーヒー分（200~300円）のコストが発生\n  * 元を取るために集中することになる\n  * 自宅で継続できる自信があればそれでもいいかも（私は無かった）\n* 年末になった今「継続できた達成感」が得られている\n* 時間を無駄にしないために目標に対して真っ直ぐな開発ができる気がする\n  * ホームページ作成も`Blazor`, `GitHub pages`だけに集中して不要な機能拡張やデザインへのこだわりを排除できた気がする。\n\n私個人としてはいいことの方が多かったので来年も続けます。\n",coediting:!1,comments_count:0,created_at:"2021-12-29T20:55:34+09:00",group:"{ }",id:"664b898221f7fef2b384",likes_count:1,private:!1,tags:[{}],title:"朝活開発を約２カ月半行った結果",updated_at:"2021-12-29T20:55:34+09:00",url:"https://qiita.com/sYamaz/items/664b898221f7fef2b384",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>GitHub Pagesで自分のポートフォリオサイト作りたいなと思い立ちましたが</p>\n\n<ul>\n<li>markdownで作るのはちょっと味気ない</li>\n<li>html書くのめんどくさいし、ReactとかVueとかはまだ使ったことない</li>\n<li>css書くのめんどくさい</li>\n</ul>\n\n<p>という壁がありました。ReactやVueなどのフレームワークは身につけたいところではありますが、とりあえずは手っ取り早く作りたかったのでBlazorとUIフレームワークの一つであるSkclusive-UIで作って見ました。</p>\n\n<p>この記事はUIフレームワークについての記事になります。</p>\n\n<h2>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h2>\n\n<ul>\n<li>VisualStudio for Mac 2022 preview</li>\n<li>dotnet6</li>\n</ul>\n\n<h2>\n<span id="skclusive-ui" class="fragment"></span><a href="#skclusive-ui"><i class="fa fa-link"></i></a>Skclusive-UI</h2>\n\n<p>Github</p>\n\n<ul>\n<li><a href="https://github.com/skclusive/Skclusive.Material.Component" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/skclusive/Skclusive.Material.Component</a></li>\n<li><a href="https://github.com/skclusive/Skclusive.Material.Layout" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/skclusive/Skclusive.Material.Layout</a></li>\n</ul>\n\n<p>パーツだけ使いたいのであればComponentの方だけ使えばOKです（Button, MenuなどパーツごとにNugetパッケージになっているので部分的に利用することもできます）</p>\n\n<p>今回は全部任せるつもりで、ComponentとLayoutの両方を使用しています。両方Ver.5.2.0です。</p>\n\n<p><a href="https://camo.qiitausercontent.com/ced58b643f2669f9f07e1bf0633743a60fdb9199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f37663637383334612d303464342d646133632d366537612d3830323131323162343735612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F7f67834a-04d4-da3c-6e7a-8021121b475a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a1ca69e2c6630f8546ae6438e9c49cee" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/7f67834a-04d4-da3c-6e7a-8021121b475a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F7f67834a-04d4-da3c-6e7a-8021121b475a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=28c9b1aed1a12734bed79302285946ae 1x" loading="lazy"></a></p>\n\n<p>Docs</p>\n\n<p><qiita-embed-ogp src="https://skclusive.github.io/Skclusive.Material.Docs/"></qiita-embed-ogp></p>\n\n<p>このdocsの<a href="https://github.com/skclusive/Skclusive.Material.Docs" rel="nofollow noopener" target="_blank">ソース</a>を見ていれば大体できる気はします</p>\n\n<h3>\n<span id="_importrazor" class="fragment"></span><a href="#_importrazor"><i class="fa fa-link"></i></a>_import.razor</h3>\n\n<p><a href="https://skclusive.github.io/Skclusive.Material.Docs/installation" rel="nofollow noopener" target="_blank">docsのinstallation with nuget</a>に書いてあることをすれば大丈夫ですが、<a href="https://skclusive.github.io/Skclusive.Material.Docs/release" rel="nofollow noopener" target="_blank">Migrating to 5.2.0 from 2.0.1</a>にあるように、<code>@using Skclusive.Material.Script</code>と<code>@using Skclusive.Material.Theme</code>を消しました。</p>\n\n<p>それとは別で<code>@using Skclusive.Material.Link</code>を追加しています。<code>HyperLink</code>コンポーネント等を使うためです。</p>\n\n<ul>\n<li><a href="https://github.com/sYamaz/website/blob/main/website/_Imports.razor" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/sYamaz/website/blob/main/website/_Imports.razor</a></li>\n</ul>\n\n<h3>\n<span id="mainlayoutrazor" class="fragment"></span><a href="#mainlayoutrazor"><i class="fa fa-link"></i></a>MainLayout.razor</h3>\n\n<p>VisualStudioで新規Blazorプロジェクトと共に作成される<code>MainLayout.razor</code>は削除しています。（Skclusive.Material.Layoutで定義済みであるため）</p>\n\n<h3>\n<span id="apprazor" class="fragment"></span><a href="#apprazor"><i class="fa fa-link"></i></a>App.razor</h3>\n\n<p><code>RouterLayout</code>を<code>ThemeProvider</code>で囲います。<code>Light</code>,<code>Dark</code>プロパティは定義しなくてもOKです。定義しない場合はデフォルトのライトテーマ、ダークテーマが割当たります。</p>\n\n<ul>\n<li><a href="https://github.com/sYamaz/website/blob/main/website/App.razor" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/sYamaz/website/blob/main/website/App.razor</a></li>\n</ul>\n\n<div class="code-frame" data-lang="html"><div class="highlight"><pre><code>\n@using Skclusive.Material.Theme\n\n<span class="nt">&lt;ThemeProvider</span>\n               <span class="na">Light=</span><span class="s">"@Light"</span>\n               <span class="na">Dark=</span><span class="s">"@Dark"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;RouterLayout</span> <span class="na">Default=</span><span class="s">"@typeof(AppLayout)"</span><span class="nt">/&gt;</span>\n<span class="nt">&lt;/ThemeProvider&gt;</span>\n\n@code{\n    public static ThemeValue Light = ThemeFactory.CreateTheme(new ThemeConfig\n    {\n        Palette = new PaletteConfig\n        {\n            Type = PaletteType.Light,\n\n            Primary = new PaletteColorConfig\n            {\n                Main = PaletteColors.Blue.X700\n            },\n\n            Secondary = new PaletteColorConfig\n            {\n                Main = PaletteColors.Pink.A400.Darken(0.1m)\n            },\n\n            Background = new PaletteBackground\n            {\n                Default = "#fff",\n\n                Custom = new Dictionary<span class="nt">&lt;string</span><span class="err">,</span> <span class="na">string</span><span class="nt">&gt;</span>\n                {\n                    { "level1", "#fff" },\n                    { "level2", PaletteColors.Grey.X100 },\n                    { "appbar-color", "var(--theme-palette-primary-contrast-text)" },\n                    { "appbar-background-color", "var(--theme-palette-primary-main)" },\n                },\n            }\n        }\n    });\n\n    public static ThemeValue Dark = ThemeFactory.CreateTheme(new ThemeConfig\n    {\n        Palette = new PaletteConfig\n        {\n            Type = PaletteType.Dark,\n\n            Primary = new PaletteColorConfig\n            {\n                Main = PaletteColors.Blue.X200\n            },\n\n            Secondary = new PaletteColorConfig\n            {\n                Main = PaletteColors.Pink.X200\n            },\n\n\n\n            Background = new PaletteBackground\n            {\n                Default = "#121212",\n\n                Custom = new Dictionary<span class="nt">&lt;string</span><span class="err">,</span> <span class="na">string</span><span class="nt">&gt;</span>\n                {\n                    { "level1", PaletteColors.Grey.X900 },\n                    { "level2", "#333" },\n                    { "appbar-color", "#fff" },\n                    { "appbar-background-color", "#333" },\n                },\n            }\n        }\n    });\n}\n</code></pre></div></div>\n\n<h3>\n<span id="applayoutrazor" class="fragment"></span><a href="#applayoutrazor"><i class="fa fa-link"></i></a>AppLayout.razor</h3>\n\n<p>メインのレイアウト部分です。最初に削除したMainLayout相当です。</p>\n\n<p>Skclusive.Material.LayoutではMainLayoutコンポーネントが定義済みになっており、良くも悪くも強制的にこのレイアウトを使うことになりそうです。</p>\n\n<p>私の場合は楽であることを追求していたのでレイアウトが決まっているのは助かりました。<br>\n一方で自由にレイアウトを決めたい人はSkclusive.Material.Componentのみを使用して好みのレイアウトにするということになりそうです。</p>\n\n<ul>\n<li><a href="https://github.com/sYamaz/website/blob/main/website/Shared/AppLayout.razor" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/sYamaz/website/blob/main/website/Shared/AppLayout.razor</a></li>\n</ul>\n\n<div class="code-frame" data-lang="html"><div class="highlight"><pre><code>@inherits MaterialLayoutComponent\n@inject NavigationManager navman\n@using website.Components\n\n<span class="nt">&lt;style&gt;</span>\n    <span class="nc">.styled-menu-item</span><span class="nd">:not</span><span class="o">(</span><span class="nd">:active</span><span class="o">)</span><span class="nd">:is</span><span class="o">(</span><span class="nd">:hover</span><span class="o">)</span> <span class="p">{</span>\n        <span class="c">/*カーソル当てた時の強調*/</span>\n        <span class="nl">background-color</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--theme-palette-primary-main</span><span class="p">,</span> <span class="m">#90caf9</span><span class="p">);</span>\n        <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="p">;</span>\n        <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="nc">.styled-menu-item</span><span class="nd">:active</span> <span class="p">{</span>\n        <span class="c">/*現在表示しているページのMenuItemの色変更*/</span>\n        <span class="nl">background-color</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--theme-palette-primary-main</span><span class="p">,</span> <span class="m">#fff</span><span class="p">)</span>\n    <span class="p">}</span>\n    <span class="nc">.styled-nav-item</span><span class="nd">:is</span><span class="o">(</span><span class="nd">:hover</span><span class="o">)</span> <span class="p">{</span>\n        <span class="nl">background-color</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--theme-palette-primary-main</span><span class="p">,</span> <span class="m">#90caf9</span><span class="p">);</span>\n        <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="nc">.styled-nav-item__active</span> <span class="p">{</span>\n        <span class="nl">background-color</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--theme-palette-primary-main</span><span class="p">,</span> <span class="m">#fff</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="nt">&lt;/style&gt;</span>\n\n<span class="nt">&lt;MainLayout</span> <span class="na">TopbarClass=</span><span class="s">"App-Topbar"</span> <span class="nt">&gt;</span>\n\n    <span class="nt">&lt;TitleContent&gt;</span>\n        <span class="nt">&lt;Button</span> <span class="na">OnClick=</span><span class="s">"@(s =&gt; NavTo("</span><span class="err">"))"</span> <span class="na">Color=</span><span class="s">"Color.Inherit"</span> <span class="na">Style=</span><span class="s">"text-transform:none;"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;Typography</span> <span class="na">NoWrap</span> <span class="na">Variant=</span><span class="s">"TypographyVariant.H6"</span><span class="nt">&gt;</span>\n                sYamaz\n            <span class="nt">&lt;/Typography&gt;</span>\n        <span class="nt">&lt;/Button&gt;</span>\n    <span class="nt">&lt;/TitleContent&gt;</span>\n\n\n    <span class="nt">&lt;ActionsContent&gt;</span>\n        <span class="nt">&lt;Hidden</span> <span class="na">ExtraSmallDown</span> <span class="na">Context=</span><span class="s">"HiddenContext"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"@HiddenContext.Class"</span><span class="nt">&gt;</span>\n                @foreach (var navItem in navigationItems)\n                {\n                    <span class="nt">&lt;Button</span> <span class="na">Style=</span><span class="s">"text-transform:none;"</span>\n                            <span class="na">Color=</span><span class="s">"Color.Inherit"</span>\n                            <span class="na">Class=</span><span class="s">"@("</span><span class="na">styled-nav-item</span><span class="err">"</span> <span class="err">+</span> <span class="na">ClassActive</span><span class="err">(</span><span class="na">navItem.Path</span><span class="err">))"</span>\n                            <span class="na">OnClick=</span><span class="s">"@(s =&gt; NavTo(navItem.Path))"</span><span class="nt">&gt;</span>\n                        <span class="nt">&lt;Typography</span> <span class="na">NoWrap</span> <span class="na">Variant=</span><span class="s">"TypographyVariant.Body1"</span><span class="nt">&gt;</span>@navItem.Title<span class="nt">&lt;/Typography&gt;</span>\n                    <span class="nt">&lt;/Button&gt;</span>\n                }\n\n            <span class="nt">&lt;/div&gt;</span>\n        <span class="nt">&lt;/Hidden&gt;</span>\n        <span class="nt">&lt;ToggleTheme</span> <span class="nt">/&gt;</span>\n    <span class="nt">&lt;/ActionsContent&gt;</span>\n\n    <span class="nt">&lt;BodyContent&gt;</span>\n        <span class="nt">&lt;Box</span> <span class="na">Padding=</span><span class="s">"3"</span> <span class="na">Class=</span><span class="s">"App-Body"</span><span class="nt">&gt;</span>\n            @Body\n        <span class="nt">&lt;/Box&gt;</span>\n    <span class="nt">&lt;/BodyContent&gt;</span>\n    <span class="nt">&lt;SidebarContent&gt;</span>\n        <span class="nt">&lt;Navigation</span> <span class="na">Items=</span><span class="s">"@navigationItems"</span><span class="nt">/&gt;</span>\n    <span class="nt">&lt;/SidebarContent&gt;</span>\n<span class="nt">&lt;/MainLayout&gt;</span>\n\n@code {\n    private void NavTo(string page)\n    {\n        navman.NavigateTo(page);\n        HandleClose(MenuCloseReason.BackdropClick);\n    }\n\n    private bool Open { set; get; }\n\n    private IReference ButtonRef { set; get; } = new Reference();\n\n    private List<span class="nt">&lt;NavigationItem&gt;</span> navigationItems = new List<span class="nt">&lt;NavigationItem&gt;</span>\n    {\n        new NavigationItem{Path = "", Title = "About"},\n        new NavigationItem{Path = "apps", Title = "Apps"},\n        new NavigationItem{Path = "posts", Title = "Posts"},\n        new NavigationItem{Path = "https://github.com/sYamaz/website", Title = "Source", Icon=@<span class="nt">&lt;GitHubIcon</span> <span class="nt">/&gt;</span>},\n    };\n\n    private void HandleClose(EventArgs args)\n    {\n\n        Open = false;\n\n        StateHasChanged();\n    }\n\n    private void HandleClose(MenuCloseReason reason)\n    {\n        Open = false;\n\n        StateHasChanged();\n    }\n\n    private void OnOpen()\n    {\n\n\n        Open = true;\n\n        StateHasChanged();\n    }\n\n    private string ClassActive(string page)\n    {\n        System.Diagnostics.Debug.WriteLine(page);\n        return navman.BaseUri + page == navman.Uri ? " styled-nav-item__active" : "";\n\n    }\n}\n</code></pre></div></div>\n\n<h2>\n<span id="できたもの" class="fragment"></span><a href="#%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%82%E3%81%AE"><i class="fa fa-link"></i></a>できたもの</h2>\n\n<p>ほぼSkclusiveのdocsのままですが、個人的に満足のいくサイトができました。</p>\n\n<ul>\n<li>GitHub pages: <a href="https://syamaz.github.io/website/" class="autolink" rel="nofollow noopener" target="_blank">https://syamaz.github.io/website/</a>\n</li>\n<li>GitHub: <a href="https://github.com/sYamaz/website" class="autolink" rel="nofollow noopener" target="_blank">https://github.com/sYamaz/website</a>\n</li>\n</ul>\n\n<p><a href="https://camo.qiitausercontent.com/c50bcd1960efd5e969cc61e3d356f7efe53aa045/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f37636335306462332d656439322d346531342d316265322d3332306332363034376261652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F7cc50db3-ed92-4e14-1be2-320c26047bae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=58553c34d9c39751f8ee84efb1e10c9e" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/7cc50db3-ed92-4e14-1be2-320c26047bae.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F7cc50db3-ed92-4e14-1be2-320c26047bae.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=47506f5ed3074478ebf85ee19e48afa5 1x" loading="lazy"></a></p>\n\n<hr>\n\n<h2>\n<span id="github-pagesについて参考にさせていただいた記事" class="fragment"></span><a href="#github-pages%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E8%A8%98%E4%BA%8B"><i class="fa fa-link"></i></a>GitHub pagesについて参考にさせていただいた記事</h2>\n\n<p><qiita-embed-ogp src="https://qiita.com/nobu17/items/116a0d1c949885e21d70"></qiita-embed-ogp></p>\n',body:'GitHub Pagesで自分のポートフォリオサイト作りたいなと思い立ちましたが\n\n* markdownで作るのはちょっと味気ない\n* html書くのめんどくさいし、ReactとかVueとかはまだ使ったことない\n* css書くのめんどくさい\n\nという壁がありました。ReactやVueなどのフレームワークは身につけたいところではありますが、とりあえずは手っ取り早く作りたかったのでBlazorとUIフレームワークの一つであるSkclusive-UIで作って見ました。\n\nこの記事はUIフレームワークについての記事になります。\n\n## 環境\n\n* VisualStudio for Mac 2022 preview\n* dotnet6\n\n## Skclusive-UI\n\nGithub\n\n* https://github.com/skclusive/Skclusive.Material.Component\n* https://github.com/skclusive/Skclusive.Material.Layout\n\nパーツだけ使いたいのであればComponentの方だけ使えばOKです（Button, MenuなどパーツごとにNugetパッケージになっているので部分的に利用することもできます）\n\n今回は全部任せるつもりで、ComponentとLayoutの両方を使用しています。両方Ver.5.2.0です。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/7f67834a-04d4-da3c-6e7a-8021121b475a.png)\n\nDocs\n\nhttps://skclusive.github.io/Skclusive.Material.Docs/\n\nこのdocsの[ソース](https://github.com/skclusive/Skclusive.Material.Docs)を見ていれば大体できる気はします\n\n### _import.razor\n\n[docsのinstallation with nuget](https://skclusive.github.io/Skclusive.Material.Docs/installation)に書いてあることをすれば大丈夫ですが、[Migrating to 5.2.0 from 2.0.1](https://skclusive.github.io/Skclusive.Material.Docs/release)にあるように、`@using Skclusive.Material.Script`と`@using Skclusive.Material.Theme`を消しました。\n\nそれとは別で`@using Skclusive.Material.Link`を追加しています。`HyperLink`コンポーネント等を使うためです。\n\n* https://github.com/sYamaz/website/blob/main/website/_Imports.razor\n\n### MainLayout.razor\n\nVisualStudioで新規Blazorプロジェクトと共に作成される`MainLayout.razor`は削除しています。（Skclusive.Material.Layoutで定義済みであるため）\n\n### App.razor\n\n`RouterLayout`を`ThemeProvider`で囲います。`Light`,`Dark`プロパティは定義しなくてもOKです。定義しない場合はデフォルトのライトテーマ、ダークテーマが割当たります。\n\n* https://github.com/sYamaz/website/blob/main/website/App.razor\n\n```html\n\n@using Skclusive.Material.Theme\n \n<ThemeProvider\n               Light="@Light"\n               Dark="@Dark">\n    <RouterLayout Default="@typeof(AppLayout)"/>\n</ThemeProvider>\n\n@code{\n    public static ThemeValue Light = ThemeFactory.CreateTheme(new ThemeConfig\n    {\n        Palette = new PaletteConfig\n        {\n            Type = PaletteType.Light,\n\n            Primary = new PaletteColorConfig\n            {\n                Main = PaletteColors.Blue.X700\n            },\n\n            Secondary = new PaletteColorConfig\n            {\n                Main = PaletteColors.Pink.A400.Darken(0.1m)\n            },\n\n            Background = new PaletteBackground\n            {\n                Default = "#fff",\n\n                Custom = new Dictionary<string, string>\n                {\n                    { "level1", "#fff" },\n                    { "level2", PaletteColors.Grey.X100 },\n                    { "appbar-color", "var(--theme-palette-primary-contrast-text)" },\n                    { "appbar-background-color", "var(--theme-palette-primary-main)" },\n                },\n            }\n        }\n    });\n\n    public static ThemeValue Dark = ThemeFactory.CreateTheme(new ThemeConfig\n    {\n        Palette = new PaletteConfig\n        {\n            Type = PaletteType.Dark,\n\n            Primary = new PaletteColorConfig\n            {\n                Main = PaletteColors.Blue.X200\n            },\n\n            Secondary = new PaletteColorConfig\n            {\n                Main = PaletteColors.Pink.X200\n            },\n\n           \n\n            Background = new PaletteBackground\n            {\n                Default = "#121212",\n\n                Custom = new Dictionary<string, string>\n                {\n                    { "level1", PaletteColors.Grey.X900 },\n                    { "level2", "#333" },\n                    { "appbar-color", "#fff" },\n                    { "appbar-background-color", "#333" },\n                },\n            }\n        }\n    });\n}\n```\n\n### AppLayout.razor\n\nメインのレイアウト部分です。最初に削除したMainLayout相当です。\n\nSkclusive.Material.LayoutではMainLayoutコンポーネントが定義済みになっており、良くも悪くも強制的にこのレイアウトを使うことになりそうです。\n\n私の場合は楽であることを追求していたのでレイアウトが決まっているのは助かりました。\n一方で自由にレイアウトを決めたい人はSkclusive.Material.Componentのみを使用して好みのレイアウトにするということになりそうです。\n\n* https://github.com/sYamaz/website/blob/main/website/Shared/AppLayout.razor\n\n```html\n@inherits MaterialLayoutComponent\n@inject NavigationManager navman\n@using website.Components\n\n<style>\n    .styled-menu-item:not(:active):is(:hover) {\n        /*カーソル当てた時の強調*/\n        background-color: var(--theme-palette-primary-main, #90caf9);\n        text-decoration: underline;\n        color: white;\n    }\n    .styled-menu-item:active {\n        /*現在表示しているページのMenuItemの色変更*/\n        background-color: var(--theme-palette-primary-main, #fff)\n    }\n    .styled-nav-item:is(:hover) {\n        background-color: var(--theme-palette-primary-main, #90caf9);\n        text-decoration: underline;\n    }\n    .styled-nav-item__active {\n        background-color: var(--theme-palette-primary-main, #fff)\n    }\n</style>\n\n<MainLayout TopbarClass="App-Topbar" >\n\n    <TitleContent>\n        <Button OnClick="@(s => NavTo(""))" Color="Color.Inherit" Style="text-transform:none;">\n            <Typography NoWrap Variant="TypographyVariant.H6">\n                sYamaz\n            </Typography>\n        </Button>\n    </TitleContent>\n\n\n    <ActionsContent>\n        <Hidden ExtraSmallDown Context="HiddenContext">\n            <div class="@HiddenContext.Class">\n                @foreach (var navItem in navigationItems)\n                {\n                    <Button Style="text-transform:none;"\n                            Color="Color.Inherit"\n                            Class="@("styled-nav-item" + ClassActive(navItem.Path))"\n                            OnClick="@(s => NavTo(navItem.Path))">\n                        <Typography NoWrap Variant="TypographyVariant.Body1">@navItem.Title</Typography>\n                    </Button>\n                }\n              \n            </div>\n        </Hidden>\n        <ToggleTheme />\n    </ActionsContent>\n\n    <BodyContent>\n        <Box Padding="3" Class="App-Body">\n            @Body\n        </Box>\n    </BodyContent>\n    <SidebarContent>\n        <Navigation Items="@navigationItems"/>\n    </SidebarContent>\n</MainLayout>\n\n@code {\n    private void NavTo(string page)\n    {\n        navman.NavigateTo(page);\n        HandleClose(MenuCloseReason.BackdropClick);\n    }\n\n    private bool Open { set; get; }\n\n    private IReference ButtonRef { set; get; } = new Reference();\n\n    private List<NavigationItem> navigationItems = new List<NavigationItem>\n    {\n        new NavigationItem{Path = "", Title = "About"},\n        new NavigationItem{Path = "apps", Title = "Apps"},\n        new NavigationItem{Path = "posts", Title = "Posts"},\n        new NavigationItem{Path = "https://github.com/sYamaz/website", Title = "Source", Icon=@<GitHubIcon />},\n    };\n\n    private void HandleClose(EventArgs args)\n    {\n\n        Open = false;\n\n        StateHasChanged();\n    }\n\n    private void HandleClose(MenuCloseReason reason)\n    {\n        Open = false;\n\n        StateHasChanged();\n    }\n\n    private void OnOpen()\n    {\n\n\n        Open = true;\n\n        StateHasChanged();\n    }\n\n    private string ClassActive(string page)\n    {\n        System.Diagnostics.Debug.WriteLine(page);\n        return navman.BaseUri + page == navman.Uri ? " styled-nav-item__active" : "";\n\n    }\n}\n```\n\n## できたもの\n\nほぼSkclusiveのdocsのままですが、個人的に満足のいくサイトができました。\n\n* GitHub pages: https://syamaz.github.io/website/\n* GitHub: https://github.com/sYamaz/website\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/7cc50db3-ed92-4e14-1be2-320c26047bae.png)\n\n\n---\n\n## GitHub pagesについて参考にさせていただいた記事\n\nhttps://qiita.com/nobu17/items/116a0d1c949885e21d70\n',coediting:!1,comments_count:0,created_at:"2021-12-25T20:01:57+09:00",group:"{ }",id:"d0b12043f5b25a36d8e6",likes_count:2,private:!1,tags:[{},{},{},{},{}],title:"BlazorでSkclusive-UIを使った話",updated_at:"2021-12-25T20:01:57+09:00",url:"https://qiita.com/sYamaz/items/d0b12043f5b25a36d8e6",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>Human Interface Guidelinesに沿った使い回しが効くようなTextFieldを検討しました</p>\n\n<ul>\n<li>Swift5</li>\n<li>Xcode ver.13.1</li>\n</ul>\n\n<h1>\n<span id="textfield" class="fragment"></span><a href="#textfield"><i class="fa fa-link"></i></a>TextField</h1>\n\n<p><a href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/text-fields/" rel="nofollow noopener" target="_blank">Human Interface Guidelines - TextFields</a></p>\n\n<p>2021.12.7時点で書いてあることは以下</p>\n\n<ol>\n<li>１行である</li>\n<li>固定高さである</li>\n<li>タップすると自動でキーボードが表示される</li>\n<li>名前やメールアドレスなどの少量の情報を要求するときに使用する</li>\n<li>別のラベルではなくプレースホルダーを表示する（プレースホルダーで十分説明可能な時）</li>\n<li>テキストのクリアボタンを末尾につける</li>\n<li>パスワードの入力などには情報を隠すためセキュアなテキストフィールド（SecureField）を使用する</li>\n<li>フィールドの両端にはフィールドの目的を示すイメージや追加機能のボタンを追加できる</li>\n</ol>\n\n<p>SwiftUIのTextFieldを使う際には<code>6.テキストのクリアボタンを末尾につける</code>、<code>8.フィールドの先頭にはフィールドの目的を示すイメージ、末尾には追加機能のボタンを追加できる</code>は自前実装する必要があります。</p>\n\n<h2>\n<span id="テキストのクリアボタンを末尾につける" class="fragment"></span><a href="#%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AE%E3%82%AF%E3%83%AA%E3%82%A2%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%9C%AB%E5%B0%BE%E3%81%AB%E3%81%A4%E3%81%91%E3%82%8B"><i class="fa fa-link"></i></a>テキストのクリアボタンを末尾につける</h2>\n\n<p>編集中のみ×ボタンが表示されるやつです。</p>\n\n<p><a href="https://camo.qiitausercontent.com/1abef334696efca9b6fd63f7908054912edd3d87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f35353435326164392d336361352d626238312d666332352d3838313337363331613235612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F55452ad9-3ca5-bb81-fc25-88137631a25a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b5630b6e8cf04e73abf276af16c4d87a" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/55452ad9-3ca5-bb81-fc25-88137631a25a.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F55452ad9-3ca5-bb81-fc25-88137631a25a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d60173cc07143e0a7ec294519df16530 1x" loading="lazy"></a></p>\n\n<p>※ ↑の画像はList内に配置しているものです</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">SwiftUI</span>\n\n<span class="kd">struct</span> <span class="kt">HIGTextField</span><span class="o">&lt;</span><span class="kt">Leading</span><span class="p">:</span><span class="kt">View</span><span class="p">,</span> <span class="kt">Trailing</span><span class="p">:</span><span class="kt">View</span><span class="o">&gt;</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>\n    <span class="kd">@Binding</span> <span class="kd">public</span> <span class="k">var</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span>\n    <span class="k">let</span> <span class="nv">prompt</span><span class="p">:</span><span class="kt">String</span>\n\n    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">editing</span><span class="p">:</span><span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>\n\n    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>\n        <span class="kt">HStack</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">center</span><span class="p">,</span> <span class="nv">spacing</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">content</span><span class="p">:</span> <span class="p">{</span>\n            <span class="c1">// for future iOS</span>\n            <span class="c1">// TextField("title", text: $task.title, prompt:Text("Routine name"))</span>\n            <span class="c1">//                            .focused($titleFocused)</span>\n            <span class="c1">//</span>\n            <span class="kt">TextField</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="nv">text</span><span class="p">:</span> <span class="err">$</span><span class="n">text</span><span class="p">,</span> <span class="nv">onEditingChanged</span><span class="p">:</span> <span class="p">{</span><span class="n">editing</span> <span class="k">in</span>\n                    <span class="k">self</span><span class="o">.</span><span class="n">editing</span> <span class="o">=</span> <span class="n">editing</span>\n            <span class="p">},</span> <span class="nv">onCommit</span><span class="p">:</span> <span class="p">{})</span>\n            <span class="k">if</span><span class="p">(</span><span class="n">editing</span><span class="p">){</span>\n                <span class="kt">Button</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="p">{</span>\n                    <span class="n">text</span> <span class="o">=</span> <span class="s">""</span>\n                <span class="p">},</span> <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>\n                    <span class="kt">Image</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"xmark.circle.fill"</span><span class="p">)</span>\n                        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">secondary</span><span class="p">)</span>\n                <span class="p">})</span>\n            <span class="p">}</span>\n        <span class="p">})</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>※onEditingChanged, onCommitを引数とするTextFieldのイニシャライザは将来的に非推奨となるため、後々はfocused()モディファイアを使った方法に変えた方が良さそうです。</p>\n\n<h2>\n<span id="フィールド先頭にはフィールドの目的を示すイメージ末尾には追加機能のボタンを追加できる" class="fragment"></span><a href="#%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E5%85%88%E9%A0%AD%E3%81%AB%E3%81%AF%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AE%E7%9B%AE%E7%9A%84%E3%82%92%E7%A4%BA%E3%81%99%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E6%9C%AB%E5%B0%BE%E3%81%AB%E3%81%AF%E8%BF%BD%E5%8A%A0%E6%A9%9F%E8%83%BD%E3%81%AE%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%A7%E3%81%8D%E3%82%8B"><i class="fa fa-link"></i></a>フィールド先頭にはフィールドの目的を示すイメージ、末尾には追加機能のボタンを追加できる</h2>\n\n<p>さらに、検索バーの虫眼鏡アイコンや、音声入力ボタンなどを実現できるようにします</p>\n\n<p>編集してない時</p>\n\n<p><a href="https://camo.qiitausercontent.com/46e1fe5e32299d06abba47ff5087cabfe04df4fe/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f65616335636539332d626533362d656336632d626535332d3761336463393931373264632e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2Feac5ce93-be36-ec6c-be53-7a3dc99172dc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=08a55fbc8bd23ffc7859a09e9cd086dc" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/eac5ce93-be36-ec6c-be53-7a3dc99172dc.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2Feac5ce93-be36-ec6c-be53-7a3dc99172dc.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=61408e22aff7a55ff0c27a214af481aa 1x" loading="lazy"></a></p>\n\n<p>編集している時</p>\n\n<p><a href="https://camo.qiitausercontent.com/0cd4be4553a52b45737407cf324c505cc55bc950/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f64386538376534362d616631662d323964342d613334302d3761393736646532616263662e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2Fd8e87e46-af1f-29d4-a340-7a976de2abcf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=937ad11b9ef67730ee89076305b32b7d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/d8e87e46-af1f-29d4-a340-7a976de2abcf.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2Fd8e87e46-af1f-29d4-a340-7a976de2abcf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c871c132cc684f211475c38bd33e5329 1x" loading="lazy"></a></p>\n\n<p>※ ×ボタンは維持しつつ、両端のImageやButtonを必要に応じてイニシャライザで定義できるようにします<br>\n※ ↑の画像はVStack内に配置し、<code>.background(RoundedRectangle(cornerRadius: 8).fill(.regularMaterial))</code>としたものです</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">SwiftUI</span>\n\n<span class="kd">struct</span> <span class="kt">HIGTextField</span><span class="o">&lt;</span><span class="kt">Leading</span><span class="p">:</span><span class="kt">View</span><span class="p">,</span> <span class="kt">Trailing</span><span class="p">:</span><span class="kt">View</span><span class="o">&gt;</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>\n    <span class="kd">typealias</span> <span class="kt">Focused</span> <span class="o">=</span> <span class="kt">Bool</span>\n    <span class="kd">@Binding</span> <span class="kd">public</span> <span class="k">var</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span>\n    <span class="k">let</span> <span class="nv">prompt</span><span class="p">:</span><span class="kt">String</span>\n    <span class="c1">// 第１引数は編集中のテキスト、第２引数は現在TextFieldが編集状態かどうか。</span>\n    <span class="c1">// 第１引数によって両端に追加するボタンから編集中のテキストにアクセスできるようにし</span>\n    <span class="c1">// 第２引数によって編集中かどうかによってコントロールの表示を切り替えられるようにする</span>\n    <span class="k">let</span> <span class="nv">leading</span><span class="p">:(</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">Focused</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Leading</span>\n    <span class="k">let</span> <span class="nv">trailing</span><span class="p">:(</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">Focused</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Trailing</span>\n\n    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">editing</span><span class="p">:</span><span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>\n    <span class="c1">// 両端にUIを追加するパターン</span>\n    <span class="nf">init</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span>\n         <span class="nv">prompt</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span>\n         <span class="nv">leading</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">Focused</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Leading</span><span class="p">,</span>\n         <span class="nv">trailing</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">Focused</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Trailing</span><span class="p">){</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">_text</span> <span class="o">=</span> <span class="n">text</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">prompt</span> <span class="o">=</span> <span class="n">prompt</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">leading</span> <span class="o">=</span> <span class="n">leading</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">trailing</span> <span class="o">=</span> <span class="n">trailing</span>\n    <span class="p">}</span>\n\n    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>\n        <span class="kt">HStack</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">center</span><span class="p">,</span> <span class="nv">spacing</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">content</span><span class="p">:</span> <span class="p">{</span>\n            <span class="nf">leading</span><span class="p">(</span><span class="err">$</span><span class="n">text</span><span class="p">,</span> <span class="k">self</span><span class="o">.</span><span class="n">editing</span><span class="p">)</span>\n            <span class="c1">// for future iOS</span>\n            <span class="c1">// TextField("title", text: $task.title, prompt:Text("Routine name"))</span>\n            <span class="c1">//                            .focused($titleFocused)</span>\n            <span class="c1">//</span>\n            <span class="kt">TextField</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="nv">text</span><span class="p">:</span> <span class="err">$</span><span class="n">text</span><span class="p">,</span> <span class="nv">onEditingChanged</span><span class="p">:</span> <span class="p">{</span><span class="n">editing</span> <span class="k">in</span>\n\n                    <span class="k">self</span><span class="o">.</span><span class="n">editing</span> <span class="o">=</span> <span class="n">editing</span>\n\n            <span class="p">},</span> <span class="nv">onCommit</span><span class="p">:</span> <span class="p">{})</span>\n\n            <span class="nf">trailing</span><span class="p">(</span><span class="err">$</span><span class="n">text</span><span class="p">,</span> <span class="k">self</span><span class="o">.</span><span class="n">editing</span><span class="p">)</span>\n\n            <span class="k">if</span><span class="p">(</span><span class="n">editing</span><span class="p">){</span>\n                <span class="kt">Button</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="p">{</span>\n                    <span class="n">text</span> <span class="o">=</span> <span class="s">""</span>\n                <span class="p">},</span> <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>\n                    <span class="kt">Image</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"xmark.circle.fill"</span><span class="p">)</span>\n                        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">secondary</span><span class="p">)</span>\n                <span class="p">})</span>\n            <span class="p">}</span>\n        <span class="p">})</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kd">extension</span> <span class="kt">HIGTextField</span><span class="p">{</span>\n    <span class="c1">// 前後に何の機能もないパターン</span>\n    <span class="nf">init</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">prompt</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="k">where</span> <span class="kt">Leading</span> <span class="o">==</span> <span class="kt">EmptyView</span><span class="p">,</span> <span class="kt">Trailing</span> <span class="o">==</span> <span class="kt">EmptyView</span><span class="p">{</span>\n        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="n">text</span><span class="p">,</span> <span class="nv">prompt</span><span class="p">:</span> <span class="n">prompt</span><span class="p">,</span> <span class="nv">leading</span><span class="p">:</span> <span class="p">{(</span><span class="n">b</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="k">in</span> <span class="kt">EmptyView</span><span class="p">()},</span> <span class="nv">trailing</span><span class="p">:</span> <span class="p">{(</span><span class="n">b</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="k">in</span> <span class="kt">EmptyView</span><span class="p">()})</span>\n    <span class="p">}</span>\n\n    <span class="c1">// 先頭にUIを追加するパターン</span>\n    <span class="nf">init</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">prompt</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">leading</span><span class="p">:</span><span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">Focused</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Leading</span><span class="p">)</span> <span class="k">where</span> <span class="kt">Trailing</span> <span class="o">==</span> <span class="kt">EmptyView</span><span class="p">{</span>\n        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="n">text</span><span class="p">,</span> <span class="nv">prompt</span><span class="p">:</span> <span class="n">prompt</span><span class="p">,</span> <span class="nv">leading</span><span class="p">:</span> <span class="n">leading</span><span class="p">,</span> <span class="nv">trailing</span><span class="p">:</span> <span class="p">{(</span><span class="n">b</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="k">in</span> <span class="kt">EmptyView</span><span class="p">()})</span>\n    <span class="p">}</span>\n\n    <span class="c1">// 末尾にUIを追加するパターン</span>\n    <span class="nf">init</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">prompt</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">trailing</span><span class="p">:</span><span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">Focused</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Trailing</span><span class="p">)</span> <span class="k">where</span> <span class="kt">Leading</span> <span class="o">==</span> <span class="kt">EmptyView</span><span class="p">{</span>\n        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="n">text</span><span class="p">,</span> <span class="nv">prompt</span><span class="p">:</span> <span class="n">prompt</span><span class="p">,</span> <span class="nv">leading</span><span class="p">:</span> <span class="p">{(</span><span class="n">b</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="k">in</span> <span class="kt">EmptyView</span><span class="p">()},</span> <span class="nv">trailing</span><span class="p">:</span> <span class="n">trailing</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<h2>\n<span id="結果" class="fragment"></span><a href="#%E7%B5%90%E6%9E%9C"><i class="fa fa-link"></i></a>結果</h2>\n\n<p>おおよそのパターンに対応できそうな汎用的なTextFieldができました。</p>\n',body:'Human Interface Guidelinesに沿った使い回しが効くようなTextFieldを検討しました\n\n- Swift5\n- Xcode ver.13.1\n\n# TextField\n\n[Human Interface Guidelines - TextFields](https://developer.apple.com/design/human-interface-guidelines/ios/controls/text-fields/)\n\n2021.12.7時点で書いてあることは以下\n\n1. １行である\n1. 固定高さである\n1. タップすると自動でキーボードが表示される\n1. 名前やメールアドレスなどの少量の情報を要求するときに使用する\n1. 別のラベルではなくプレースホルダーを表示する（プレースホルダーで十分説明可能な時）\n1. テキストのクリアボタンを末尾につける\n1. パスワードの入力などには情報を隠すためセキュアなテキストフィールド（SecureField）を使用する\n1. フィールドの両端にはフィールドの目的を示すイメージや追加機能のボタンを追加できる\n\nSwiftUIのTextFieldを使う際には`6.テキストのクリアボタンを末尾につける`、`8.フィールドの先頭にはフィールドの目的を示すイメージ、末尾には追加機能のボタンを追加できる`は自前実装する必要があります。\n\n## テキストのクリアボタンを末尾につける\n\n編集中のみ×ボタンが表示されるやつです。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/55452ad9-3ca5-bb81-fc25-88137631a25a.png)\n\n※ ↑の画像はList内に配置しているものです\n\n```swift\nimport SwiftUI\n\nstruct HIGTextField<Leading:View, Trailing:View>: View {\n    @Binding public var text:String\n    let prompt:String\n\n    @State private var editing:Bool = false\n\n    var body: some View {\n        HStack(alignment: .center, spacing: nil, content: {\n            // for future iOS\n            // TextField("title", text: $task.title, prompt:Text("Routine name"))\n            //                            .focused($titleFocused)\n            //\n            TextField(prompt, text: $text, onEditingChanged: {editing in\n                    self.editing = editing\n            }, onCommit: {})\n            if(editing){\n                Button(action: {\n                    text = ""\n                }, label: {\n                    Image(systemName: "xmark.circle.fill")\n                        .foregroundColor(.secondary)\n                })\n            }\n        })\n    }\n}\n```\n\n※onEditingChanged, onCommitを引数とするTextFieldのイニシャライザは将来的に非推奨となるため、後々はfocused()モディファイアを使った方法に変えた方が良さそうです。\n\n## フィールド先頭にはフィールドの目的を示すイメージ、末尾には追加機能のボタンを追加できる\n\nさらに、検索バーの虫眼鏡アイコンや、音声入力ボタンなどを実現できるようにします\n\n編集してない時\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/eac5ce93-be36-ec6c-be53-7a3dc99172dc.png)\n\n編集している時\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/d8e87e46-af1f-29d4-a340-7a976de2abcf.png)\n\n※ ×ボタンは維持しつつ、両端のImageやButtonを必要に応じてイニシャライザで定義できるようにします\n※ ↑の画像はVStack内に配置し、`.background(RoundedRectangle(cornerRadius: 8).fill(.regularMaterial))`としたものです\n\n```swift\nimport SwiftUI\n\nstruct HIGTextField<Leading:View, Trailing:View>: View {\n    typealias Focused = Bool\n    @Binding public var text:String\n    let prompt:String\n    // 第１引数は編集中のテキスト、第２引数は現在TextFieldが編集状態かどうか。\n    // 第１引数によって両端に追加するボタンから編集中のテキストにアクセスできるようにし\n    // 第２引数によって編集中かどうかによってコントロールの表示を切り替えられるようにする\n    let leading:(Binding<String>, Focused) -> Leading\n    let trailing:(Binding<String>, Focused) -> Trailing\n    \n    @State private var editing:Bool = false\n    // 両端にUIを追加するパターン\n    init(text:Binding<String>,\n         prompt:String,\n         leading: @escaping (Binding<String>, Focused) -> Leading,\n         trailing: @escaping (Binding<String>, Focused) -> Trailing){\n        self._text = text\n        self.prompt = prompt\n        self.leading = leading\n        self.trailing = trailing\n    }\n    \n    var body: some View {\n        HStack(alignment: .center, spacing: nil, content: {\n            leading($text, self.editing)\n            // for future iOS\n            // TextField("title", text: $task.title, prompt:Text("Routine name"))\n            //                            .focused($titleFocused)\n            //\n            TextField(prompt, text: $text, onEditingChanged: {editing in\n                \n                    self.editing = editing\n                \n            }, onCommit: {})\n            \n            trailing($text, self.editing)\n            \n            if(editing){\n                Button(action: {\n                    text = ""\n                }, label: {\n                    Image(systemName: "xmark.circle.fill")\n                        .foregroundColor(.secondary)\n                })\n            }\n        })\n    }\n}\n\nextension HIGTextField{\n    // 前後に何の機能もないパターン\n    init(text:Binding<String>, prompt:String) where Leading == EmptyView, Trailing == EmptyView{\n        self.init(text: text, prompt: prompt, leading: {(b, f) in EmptyView()}, trailing: {(b, f) in EmptyView()})\n    }\n    \n    // 先頭にUIを追加するパターン\n    init(text:Binding<String>, prompt:String, leading:@escaping (Binding<String>, Focused) -> Leading) where Trailing == EmptyView{\n        self.init(text: text, prompt: prompt, leading: leading, trailing: {(b, f) in EmptyView()})\n    }\n    \n    // 末尾にUIを追加するパターン\n    init(text:Binding<String>, prompt:String, trailing:@escaping (Binding<String>, Focused) -> Trailing) where Leading == EmptyView{\n        self.init(text: text, prompt: prompt, leading: {(b, f) in EmptyView()}, trailing: trailing)\n    }\n}\n```\n\n## 結果\n\nおおよそのパターンに対応できそうな汎用的なTextFieldができました。\n',coediting:!1,comments_count:0,created_at:"2021-12-07T22:48:48+09:00",group:"{ }",id:"cafa6a4e13db71d54eea",likes_count:1,private:!1,tags:[{},{},{},{}],title:"SwiftUI: Human Interface Guidelinesに沿ったTextField",updated_at:"2021-12-07T22:51:23+09:00",url:"https://qiita.com/sYamaz/items/cafa6a4e13db71d54eea",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>仕事ではdotnet（C#）アプリ開発、プライベートでSwift/SwiftUIでiOSアプリの開発をしています。<br>\n現在AppStoreへの初リリースを目標に黙々と手を動かしている途中ですが、その際に得られた感覚について共有できればと思います。<br>\n万人に共通するわけではないと思いますが誰かの気づきの一助になれば幸いです。</p>\n\n<h1>\n<span id="今までの経験に対して期待しすぎない" class="fragment"></span><a href="#%E4%BB%8A%E3%81%BE%E3%81%A7%E3%81%AE%E7%B5%8C%E9%A8%93%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E6%9C%9F%E5%BE%85%E3%81%97%E3%81%99%E3%81%8E%E3%81%AA%E3%81%84"><i class="fa fa-link"></i></a>今までの経験に対して期待しすぎない</h1>\n\n<p>Swift/SwiftUIについては見習いレベルですが、dotnet(C#)開発をそこそこやってきたという見栄により「ちゃんと設計しなきゃ」という意識が働き、最初にしっかりと設計をしてからコーディングに移ろうとしていました。</p>\n\n<p>その際の図（ちょっと変則的なTODOアプリをClean architecture、あわよくばVIPERパターンに則って作ろうとしていました）</p>\n\n<p><a href="https://camo.qiitausercontent.com/8db59f8107479a18a1de8c439f0f7203f12c6292/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f39313965303735662d356265642d633638352d626630302d6563653238323961303333652e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F919e075f-5bed-c685-bf00-ece2829a033e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=26cc9049792210ffb9940acb6b51b070" alt="RoutineCommander-Classのコピー.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/919e075f-5bed-c685-bf00-ece2829a033e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F919e075f-5bed-c685-bf00-ece2829a033e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e415a6d7f2f0cabe188122ac930daef3 1x" loading="lazy"></a></p>\n\n<p>結果、Swiftの言語使用等を十分に理解してない中での設計ということもあり、上記設計での実現は困難な部分が多く断念しました。断念するまでは設計のし直しなどかなり手間をかけていたと思います。<br>\n現在は、多少汚いコードでもいいからまずは動くものを完成させることを最優先に実装を進めています。</p>\n\n<p>ちゃんと設計することで可読性やメンテナンス性の向上など期待できることは多いですが、初心者のうちはまだそのステージに立っていない（特に独自で設計するとき）ことを自覚しないといつまでたってもリリースできないことに気がつきました</p>\n',body:"仕事ではdotnet（C#）アプリ開発、プライベートでSwift/SwiftUIでiOSアプリの開発をしています。\n現在AppStoreへの初リリースを目標に黙々と手を動かしている途中ですが、その際に得られた感覚について共有できればと思います。\n万人に共通するわけではないと思いますが誰かの気づきの一助になれば幸いです。\n\n# 今までの経験に対して期待しすぎない\n\nSwift/SwiftUIについては見習いレベルですが、dotnet(C#)開発をそこそこやってきたという見栄により「ちゃんと設計しなきゃ」という意識が働き、最初にしっかりと設計をしてからコーディングに移ろうとしていました。\n\nその際の図（ちょっと変則的なTODOアプリをClean architecture、あわよくばVIPERパターンに則って作ろうとしていました）\n\n![RoutineCommander-Classのコピー.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/919e075f-5bed-c685-bf00-ece2829a033e.png)\n\n結果、Swiftの言語使用等を十分に理解してない中での設計ということもあり、上記設計での実現は困難な部分が多く断念しました。断念するまでは設計のし直しなどかなり手間をかけていたと思います。\n現在は、多少汚いコードでもいいからまずは動くものを完成させることを最優先に実装を進めています。\n\nちゃんと設計することで可読性やメンテナンス性の向上など期待できることは多いですが、初心者のうちはまだそのステージに立っていない（特に独自で設計するとき）ことを自覚しないといつまでたってもリリースできないことに気がつきました\n",coediting:!1,comments_count:0,created_at:"2021-11-27T23:44:02+09:00",group:"{ }",id:"cfc3f1bbd0b3cb512a19",likes_count:4,private:!1,tags:[{},{}],title:"新たなプログラミング言語に挑戦するときは見栄を捨てようという話",updated_at:"2021-11-27T23:44:02+09:00",url:"https://qiita.com/sYamaz/items/cfc3f1bbd0b3cb512a19",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>趣味でSwiftをいじっている私ですが<code>@Published</code>プロパティラッパーとかを見て、「dotnetアプリ開発でお世話になっているReactivePropertyっぽいな...」と思ってました。</p>\n\n<p><qiita-embed-ogp src="https://github.com/runceel/ReactiveProperty"></qiita-embed-ogp></p>\n\n<p>ってことはとっつきやすいのでは？と思い<a href="https://qiita.com/sYamaz/items/7b72e26ed48579eb814b" id="reference-3414bd93f26e94155ba1">SwiftUI/Swift: 既存のプロジェクトをMVVMパターンに変更する - Qiita</a>で<code>@Published</code>等を使ってみたのですが、２時間くらいハマった出来事があったので共有します。</p>\n\n<h1>\n<span id="ハマったこと" class="fragment"></span><a href="#%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8"><i class="fa fa-link"></i></a>ハマったこと</h1>\n\n<p><code>@Published var value:T</code>の値を変更しているのに監視側で定義した<code>sink()</code>内の処理が実行されない</p>\n\n<h1>\n<span id="状況再現アプリ" class="fragment"></span><a href="#%E7%8A%B6%E6%B3%81%E5%86%8D%E7%8F%BE%E3%82%A2%E3%83%97%E3%83%AA"><i class="fa fa-link"></i></a>状況再現アプリ</h1>\n\n<p>ボタンとカウント表示があるだけのカウントアップアプリを作ります。</p>\n\n<p>C#でもSwiftでも、<code>ボタンをクリックするとModelの値が＋１されて、その変更通知がViewに届く</code>という作りです。</p>\n\n<h1>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n\n<ul>\n<li>dotnet WPF app\n\n<ul>\n<li>dotnet5</li>\n<li>ReactiveProperty 7.12.0</li>\n</ul>\n</li>\n<li>Swift app\n\n<ul>\n<li>XCode 13</li>\n<li>Swift 5</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id="dotnet-wpf-app" class="fragment"></span><a href="#dotnet-wpf-app"><i class="fa fa-link"></i></a>dotnet WPF app</h1>\n\n<p>今回論点となるViewModel。<code>Subscribe()</code>の戻り値であるIDisposableはクラスのフィールドとして参照を保持していなくてもカウントアップした結果はViewにまで到達します。</p>\n\n<div class="code-frame" data-lang="csharp"><div class="highlight"><pre><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">MainWindowViewModel</span>\n    <span class="p">{</span>\n        <span class="c1">// model</span>\n        <span class="k">private</span> <span class="n">CountStore</span> <span class="n">store</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CountStore</span><span class="p">();</span>\n\n        <span class="k">public</span> <span class="nf">MainWindowViewModel</span><span class="p">()</span>\n        <span class="p">{</span>\n            <span class="k">this</span><span class="p">.</span><span class="n">CountUpCommand</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RelayCommand</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="n">store</span><span class="p">.</span><span class="nf">CountUp</span><span class="p">());</span>\n            <span class="n">Count</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="n">store</span><span class="p">.</span><span class="n">Count</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>\n\n            <span class="kt">var</span> <span class="n">_</span> <span class="p">=</span> <span class="n">store</span><span class="p">.</span><span class="n">Count</span><span class="p">.</span><span class="nf">Subscribe</span><span class="p">(</span><span class="n">onNext</span><span class="p">:</span> <span class="n">count</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="n">Count</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="n">count</span><span class="p">);</span>\n        <span class="p">}</span>\n\n        <span class="c1">// ボタンクリック時に実行されるCommand</span>\n        <span class="k">public</span> <span class="n">ICommand</span> <span class="n">CountUpCommand</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>\n        <span class="c1">// Modelの値が反映されるプロパティ</span>\n        <span class="k">public</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">Count</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>\n    <span class="p">}</span>\n</code></pre></div></div>\n\n<p>CountStore.cs　カウントアップした値を保持するクラスです</p>\n\n<div class="code-frame" data-lang="csharp"><div class="highlight"><pre><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">CountStore</span>\n    <span class="p">{</span>\n        <span class="k">public</span> <span class="nf">CountStore</span><span class="p">()</span>\n        <span class="p">{</span>\n            <span class="n">Count</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">0</span><span class="p">);</span>\n        <span class="p">}</span>\n        <span class="k">public</span> <span class="n">ReactiveProperty</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">Count</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>\n        <span class="k">public</span> <span class="k">void</span> <span class="nf">CountUp</span><span class="p">()</span>\n        <span class="p">{</span>\n            <span class="n">Count</span><span class="p">.</span><span class="n">Value</span><span class="p">++;</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n</code></pre></div></div>\n\n<p>View(コードビハインドは無し）</p>\n\n<div class="code-frame" data-lang="xml"><div class="highlight"><pre><code><span class="nt">&lt;Window</span> <span class="na">x:Class=</span><span class="s">"WpfApp1.MainWindow"</span>\n        <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>\n        <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>\n        <span class="na">xmlns:d=</span><span class="s">"http://schemas.microsoft.com/expression/blend/2008"</span>\n        <span class="na">xmlns:mc=</span><span class="s">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span>\n        <span class="na">xmlns:local=</span><span class="s">"clr-namespace:WpfApp1"</span>\n        <span class="na">mc:Ignorable=</span><span class="s">"d"</span>\n        <span class="na">Title=</span><span class="s">"MainWindow"</span> <span class="na">Height=</span><span class="s">"450"</span> <span class="na">Width=</span><span class="s">"800"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;Window.DataContext&gt;</span>\n        <span class="nt">&lt;local:MainWindowViewModel/&gt;</span>\n    <span class="nt">&lt;/Window.DataContext&gt;</span>\n    <span class="nt">&lt;Grid&gt;</span>\n        <span class="nt">&lt;StackPanel&gt;</span>\n            <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Count.Value}"</span> <span class="na">TextAlignment=</span><span class="s">"Center"</span><span class="nt">/&gt;</span>\n            <span class="nt">&lt;Button</span> <span class="na">Command=</span><span class="s">"{Binding CountUpCommand}"</span> <span class="nt">&gt;</span>Count up<span class="nt">&lt;/Button&gt;</span>\n        <span class="nt">&lt;/StackPanel&gt;</span>\n    <span class="nt">&lt;/Grid&gt;</span>\n<span class="nt">&lt;/Window&gt;</span>\n</code></pre></div></div>\n\n<p>結果、ちゃんとカウントアップします。</p>\n\n<p><a href="https://camo.qiitausercontent.com/45e68d1667d82543f4a75cb7ed6d2075cd12395a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f35343663313738312d346233622d656465352d656361642d6164386238653366646564382e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F546c1781-4b3b-ede5-ecad-ad8b8e3fded8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=53267a09ce36d708717e9f8ae5037f5b" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/546c1781-4b3b-ede5-ecad-ad8b8e3fded8.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F546c1781-4b3b-ede5-ecad-ad8b8e3fded8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f33a4b7cae75c14d882410d48bb2757f 1x" loading="lazy"></a></p>\n\n<h1>\n<span id="swift-ios-app" class="fragment"></span><a href="#swift-ios-app"><i class="fa fa-link"></i></a>Swift iOS app</h1>\n\n<p>ViewModel</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">class</span> <span class="kt">ContentViewModel</span><span class="p">:</span> <span class="kt">ObservableObject</span><span class="p">{</span>\n    <span class="c1">// modelの値が反映されるプロパティ</span>\n    <span class="kd">@Published</span> <span class="kd">private</span> <span class="p">(</span><span class="k">set</span><span class="p">)</span> <span class="k">var</span> <span class="nv">value</span><span class="p">:</span><span class="kt">Int</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>\n    <span class="kd">private</span> <span class="k">let</span> <span class="nv">store</span><span class="p">:</span><span class="kt">CounterStore</span> <span class="o">=</span> <span class="o">.</span><span class="nf">init</span><span class="p">()</span>\n    <span class="nf">init</span><span class="p">(){</span>\n        <span class="k">let</span> <span class="nv">_</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="err">$</span><span class="n">count</span><span class="o">.</span><span class="nf">sink</span><span class="p">(</span><span class="nv">receiveValue</span><span class="p">:</span> <span class="p">{</span><span class="n">count</span> <span class="k">in</span> <span class="k">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">count</span><span class="p">})</span>\n    <span class="p">}</span>\n\n    <span class="c1">// ボタンクリック時に実行される関数</span>\n    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">countUp</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">{</span>\n        <span class="n">store</span><span class="o">.</span><span class="nf">countUp</span><span class="p">()</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>CountStore</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">class</span> <span class="kt">CounterStore</span><span class="p">:</span> <span class="kt">ObservableObject</span><span class="p">{</span>\n    <span class="kd">@Published</span> <span class="kd">private</span> <span class="p">(</span><span class="k">set</span><span class="p">)</span> <span class="k">var</span> <span class="nv">count</span><span class="p">:</span><span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>\n    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">countUp</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">{</span>\n        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>View</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>\n    <span class="kd">@ObservedObject</span> <span class="k">var</span> <span class="nv">vm</span> <span class="o">=</span> <span class="kt">ContentViewModel</span><span class="p">()</span>\n    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>\n        <span class="kt">VStack</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">center</span><span class="p">,</span> <span class="nv">spacing</span><span class="p">:</span> <span class="kc">nil</span><span class="p">){</span>\n            <span class="kt">Text</span><span class="p">(</span><span class="s">"</span><span class="se">(</span><span class="n">vm</span><span class="o">.</span><span class="n">value</span><span class="se">)</span><span class="s">"</span><span class="p">)</span><span class="o">.</span><span class="nf">padding</span><span class="p">()</span>\n            <span class="kt">Button</span><span class="p">(</span><span class="s">"Count up"</span><span class="p">){</span><span class="n">vm</span><span class="o">.</span><span class="nf">countUp</span><span class="p">()}</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>結果、カウントアップしないです。ボタンをクリックしてもずっと０のまま。</p>\n\n<p><a href="https://camo.qiitausercontent.com/efdc4e3033f2314e8f04e7af3726eb58699934f3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f33623066643863632d343961342d333032322d316234632d6639396430353661363561362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F3b0fd8cc-49a4-3022-1b4c-f99d056a65a6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e25d367ab1988934bc4f0661803ca6a8" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/3b0fd8cc-49a4-3022-1b4c-f99d056a65a6.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F3b0fd8cc-49a4-3022-1b4c-f99d056a65a6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6ceed34894d2868dc87bc94aa4397a7b 1x" loading="lazy"></a></p>\n\n<h1>\n<span id="どういうことなのか" class="fragment"></span><a href="#%E3%81%A9%E3%81%86%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%AA%E3%81%AE%E3%81%8B"><i class="fa fa-link"></i></a>どういうことなのか</h1>\n\n<p>公式ドキュメント[<a href="https://developer.apple.com/documentation/combine/anycancellable" rel="nofollow noopener" target="_blank">AnyCancellable - developper.apple.com</a>]より</p>\n\n<blockquote>\n<p>An AnyCancellable instance automatically calls cancel() when deinitialized.　（意訳：保持しとかないと使い終わったとみなして勝手にキャンセルするぞ）</p>\n</blockquote>\n\n<p>SwiftではARCという名のメモリ管理が行われているらしく、この件もAnyCancellableへの参照数が0になり即破棄されたため起きた問題だったようです。ARCについては知識として身につけておきたいところです。（ARCについてとても参考になった記事：<a href="https://qiita.com/m__ike_/items/c021e280c5b2c659c59d" id="reference-1edbbf596c43d638eb96">ARCの光と影</a>）</p>\n\n<p>つまり、今回の場合ViewModelを次のようにしてAnyCancellableの参照をキープしておく必要があるわけです。</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">class</span> <span class="kt">ContentViewModel</span><span class="p">:</span> <span class="kt">ObservableObject</span><span class="p">{</span>\n    <span class="kd">@Published</span> <span class="kd">private</span> <span class="p">(</span><span class="k">set</span><span class="p">)</span> <span class="k">var</span> <span class="nv">value</span><span class="p">:</span><span class="kt">Int</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>\n    <span class="kd">private</span> <span class="k">let</span> <span class="nv">store</span><span class="p">:</span><span class="kt">CounterStore</span> <span class="o">=</span> <span class="o">.</span><span class="nf">init</span><span class="p">()</span>\n    <span class="kd">private</span> <span class="k">var</span> <span class="nv">subscriptions</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">AnyCancellable</span><span class="o">&gt;</span><span class="p">()</span>\n    <span class="nf">init</span><span class="p">(){</span>\n        <span class="c1">// NG: init()のスコープを抜けると破棄される</span>\n        <span class="c1">//let _ = store.$count.sink(receiveValue: {count in self.value = count})</span>\n\n        <span class="c1">// OK: Set&lt;AnyCancellable&gt;に保持しておくことで参照が保たれる</span>\n        <span class="n">store</span><span class="o">.</span><span class="err">$</span><span class="n">count</span><span class="o">.</span><span class="nf">sink</span><span class="p">(</span><span class="nv">receiveValue</span><span class="p">:</span> <span class="p">{</span><span class="n">count</span> <span class="k">in</span> <span class="k">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">count</span><span class="p">})</span><span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">subscriptions</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">countUp</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">{</span>\n        <span class="n">store</span><span class="o">.</span><span class="nf">countUp</span><span class="p">()</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>OK！</p>\n\n<p><a href="https://camo.qiitausercontent.com/45e8e8a45da95ea73701fc5b5c804fda8f0168b9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f37386161346530642d333762652d623765342d393765382d3734646561333366303436342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F78aa4e0d-37be-b7e4-97e8-74dea33f0464.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=806090bd6ed4029e79216152fc3c65ff" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/78aa4e0d-37be-b7e4-97e8-74dea33f0464.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F78aa4e0d-37be-b7e4-97e8-74dea33f0464.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4138ca38a7f80d99dd4e3b8198b930d7 1x" loading="lazy"></a></p>\n',body:'趣味でSwiftをいじっている私ですが`@Published`プロパティラッパーとかを見て、「dotnetアプリ開発でお世話になっているReactivePropertyっぽいな...」と思ってました。\n\nhttps://github.com/runceel/ReactiveProperty\n\nってことはとっつきやすいのでは？と思い[SwiftUI/Swift: 既存のプロジェクトをMVVMパターンに変更する - Qiita](https://qiita.com/sYamaz/items/7b72e26ed48579eb814b)で`@Published`等を使ってみたのですが、２時間くらいハマった出来事があったので共有します。\n\n# ハマったこと\n\n`@Published var value:T`の値を変更しているのに監視側で定義した`sink()`内の処理が実行されない\n\n# 状況再現アプリ\n\nボタンとカウント表示があるだけのカウントアップアプリを作ります。\n\nC#でもSwiftでも、`ボタンをクリックするとModelの値が＋１されて、その変更通知がViewに届く`という作りです。\n\n# 環境\n\n* dotnet WPF app\n    * dotnet5\n    * ReactiveProperty 7.12.0\n* Swift app\n    * XCode 13\n    * Swift 5\n\n\n# dotnet WPF app\n\n今回論点となるViewModel。`Subscribe()`の戻り値であるIDisposableはクラスのフィールドとして参照を保持していなくてもカウントアップした結果はViewにまで到達します。\n\n```csharp\n    public class MainWindowViewModel\n    {\n        // model\n        private CountStore store = new CountStore();\n\n        public MainWindowViewModel()\n        {\n            this.CountUpCommand = new RelayCommand(_ => store.CountUp());\n            Count = new ReactiveProperty<int>(store.Count.Value);\n\n            var _ = store.Count.Subscribe(onNext: count => this.Count.Value = count);\n        }\n\n        // ボタンクリック時に実行されるCommand\n        public ICommand CountUpCommand { get; }\n        // Modelの値が反映されるプロパティ\n        public ReactiveProperty<int> Count { get; private set; }\n    }\n```\n\nCountStore.cs　カウントアップした値を保持するクラスです\n\n```csharp\n    public class CountStore\n    {\n        public CountStore()\n        {\n            Count = new ReactiveProperty<int>(0);\n        }\n        public ReactiveProperty<int> Count { get; private set; }\n        public void CountUp()\n        {\n            Count.Value++;\n        }\n    }\n```\n\nView(コードビハインドは無し）\n\n```xml\n<Window x:Class="WpfApp1.MainWindow"\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n        xmlns:local="clr-namespace:WpfApp1"\n        mc:Ignorable="d"\n        Title="MainWindow" Height="450" Width="800">\n    <Window.DataContext>\n        <local:MainWindowViewModel/>\n    </Window.DataContext>\n    <Grid>\n        <StackPanel>\n            <TextBlock Text="{Binding Count.Value}" TextAlignment="Center"/>\n            <Button Command="{Binding CountUpCommand}" >Count up</Button>\n        </StackPanel>\n    </Grid>\n</Window>\n```\n\n\n\n結果、ちゃんとカウントアップします。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/546c1781-4b3b-ede5-ecad-ad8b8e3fded8.png)\n\n# Swift iOS app\n\nViewModel\n\n```swift\nclass ContentViewModel: ObservableObject{\n    // modelの値が反映されるプロパティ\n    @Published private (set) var value:Int = -1\n    private let store:CounterStore = .init()\n    init(){\n        let _ = store.$count.sink(receiveValue: {count in self.value = count})\n    }\n    \n    // ボタンクリック時に実行される関数\n    public func countUp() -> Void{\n        store.countUp()\n    }\n}\n```\n\nCountStore\n\n```swift\nclass CounterStore: ObservableObject{\n    @Published private (set) var count:Int = 0\n    public func countUp() -> Void{\n        count += 1\n    }\n}\n```\n\nView\n\n```swift\nstruct ContentView: View {\n    @ObservedObject var vm = ContentViewModel()\n    var body: some View {\n        VStack(alignment: .center, spacing: nil){\n            Text("(vm.value)").padding()\n            Button("Count up"){vm.countUp()}\n        }\n    }\n}\n```\n\n結果、カウントアップしないです。ボタンをクリックしてもずっと０のまま。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/3b0fd8cc-49a4-3022-1b4c-f99d056a65a6.png)\n\n\n# どういうことなのか\n\n公式ドキュメント[[AnyCancellable - developper.apple.com](https://developer.apple.com/documentation/combine/anycancellable)]より\n\n> An AnyCancellable instance automatically calls cancel() when deinitialized.　（意訳：保持しとかないと使い終わったとみなして勝手にキャンセルするぞ）\n\nSwiftではARCという名のメモリ管理が行われているらしく、この件もAnyCancellableへの参照数が0になり即破棄されたため起きた問題だったようです。ARCについては知識として身につけておきたいところです。（ARCについてとても参考になった記事：[ARCの光と影](https://qiita.com/m__ike_/items/c021e280c5b2c659c59d)）\n\n\nつまり、今回の場合ViewModelを次のようにしてAnyCancellableの参照をキープしておく必要があるわけです。\n\n```swift\nclass ContentViewModel: ObservableObject{\n    @Published private (set) var value:Int = -1\n    private let store:CounterStore = .init()\n    private var subscriptions = Set<AnyCancellable>()\n    init(){\n        // NG: init()のスコープを抜けると破棄される\n        //let _ = store.$count.sink(receiveValue: {count in self.value = count})\n        \n        // OK: Set<AnyCancellable>に保持しておくことで参照が保たれる\n        store.$count.sink(receiveValue: {count in self.value = count}).store(in: &subscriptions)\n    }\n    \n    public func countUp() -> Void{\n        store.countUp()\n    }\n}\n```\n\nOK！\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/78aa4e0d-37be-b7e4-97e8-74dea33f0464.png)\n\n',coediting:!1,comments_count:0,created_at:"2021-10-30T20:27:51+09:00",group:"{ }",id:"56e943c2536397cc41d4",likes_count:0,private:!1,tags:[{},{},{},{},{}],title:"dotnet慣れした私がSwift CombineのAnyCancellableの取り扱いでハマった話",updated_at:"2021-10-30T20:27:51+09:00",url:"https://qiita.com/sYamaz/items/56e943c2536397cc41d4",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p><a href="https://qiita.com/sYamaz/items/9ef8fceb5650fc7b7ad8" id="reference-6995fde8c3fa0eb25fc5">体温を最速で入力するためのユーザーインターフェースの検討(その1) - Qiita</a>で体温入力のユーザーインターフェースを考えていました。</p>\n\n<p><a href="https://camo.qiitausercontent.com/46e7710c56e7d2ff88ce9381adc1d37869379798/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f38383238326330322d613538642d636566342d326132382d3333343131656166656433302e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F88282c02-a58d-cef4-2a28-33411eafed30.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b10cc6dae9aaf1acec2aa284de125c66" alt="タイトルなし.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/88282c02-a58d-cef4-2a28-33411eafed30.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F88282c02-a58d-cef4-2a28-33411eafed30.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9e42e486d8a5ded7e523a609cbfd64e3 1x" loading="lazy"></a></p>\n\n<p>前回は「とりあえず作った」だけの物だったので今後の変更やテストしやすさなどを考えてMVVMパターンに合わせていこうと思います。</p>\n\n<p>本来このようなリファクタリングはユニットテストをあらかじめ作った上で実施していくものだと思いますが、あまりにテストしにくい形だったため今回は先に設計を変更することにしました。</p>\n\n<p>環境は以下です</p>\n\n<ul>\n<li>Xcode 13</li>\n<li>Swift 5</li>\n</ul>\n\n<h2>\n<span id="before" class="fragment"></span><a href="#before"><i class="fa fa-link"></i></a>before</h2>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/BodyTempLogger/tree/v0.0.1"></qiita-embed-ogp></p>\n\n<p>クラス、構造体の関連を示すと以下のようなイメージです。</p>\n\n<p><a href="https://camo.qiitausercontent.com/2458396b9e6931eed0814b0347cdb84b22175899/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f34376531396130382d393536632d626637372d333939372d6439333134333263373339392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F47e19a08-956c-bf77-3997-d931432c7399.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=59d12d82ff695e454de10b43d402da85" alt="名称未設定ファイル-before.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/47e19a08-956c-bf77-3997-d931432c7399.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F47e19a08-956c-bf77-3997-d931432c7399.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4d66c7d81849d8f3626584a1b0a97049 1x" loading="lazy"></a></p>\n\n<ul>\n<li>AppDelegate；アプリケーション起動時の処理を行うクラス</li>\n<li>PostView：保存ボタン</li>\n<li>TapInputView：体温入力のためのボタンがあるView（と、その他分離できていない機能群）\n\n<ul>\n<li>その他の機能</li>\n<li>ユーザー設定のためのシート表示</li>\n<li>現在入力している値の表示</li>\n</ul>\n</li>\n<li>HealthCareRepository：HealthKitへのアクセスを担当するクラス</li>\n<li>HealthCareRepositoryDelegate：HealthKitへのアクセスのインターフェース（Protocol）。主にテストを容易にするためのもの</li>\n</ul>\n\n<p>無計画にViewを作成しており、かつ状態は全てViewが持っています。</p>\n\n<h2>\n<span id="after" class="fragment"></span><a href="#after"><i class="fa fa-link"></i></a>after</h2>\n\n<p>MVVMでModel部分をどのように作るかが私の中で定まっていないですが今回は以下のようなパターンを考えます</p>\n\n<p><a href="https://camo.qiitausercontent.com/5309dcd4c719311934de8a8a459d46c1601e13e4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f30346436656137332d353034652d306137632d396163372d6663343735663732646262612e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F04d6ea73-504e-0a7c-9ac7-fc475f72dbba.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ba0ae3ceac06edfb620eeb5c47ca7686" alt="名称未設定ファイル-after.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/04d6ea73-504e-0a7c-9ac7-fc475f72dbba.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F04d6ea73-504e-0a7c-9ac7-fc475f72dbba.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=35370fbc0c3b70985718500e35e824e1 1x" loading="lazy"></a></p>\n\n<ul>\n<li>View</li>\n<li>ViewModel</li>\n<li>Model\n\n<ul>\n<li>Store: アプリケーションの状態を保持するクラス</li>\n<li>Value: アプリケーションの状態（構造体）</li>\n<li>Repository: 外部のAPIアクセスを隠蔽する。今回はHealthKit。</li>\n</ul>\n</li>\n</ul>\n\n<p>状態を構造体一発ではなくStoreとValueという形にしたのは状態の変更とそれを通知する機能を状態そのものから分離したかったためです。</p>\n\n<p>このパターンをもとに、以下のように設計を変更しました</p>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/BodyTempLogger/tree/v0.0.3"></qiita-embed-ogp></p>\n\n<p><a href="https://camo.qiitausercontent.com/2ee646e059231a2d8d026149cc2f8f1818691eb0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f35666631353233662d306437642d633931622d356438332d6234663062313835376635362e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F5ff1523f-0d7d-c91b-5d83-b4f0b1857f56.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4b332b84878323795f10e92fbf221967" alt="名称未設定ファイル-after2.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/5ff1523f-0d7d-c91b-5d83-b4f0b1857f56.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F5ff1523f-0d7d-c91b-5d83-b4f0b1857f56.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ab1a1478496f5df729d00b2ef8dc4ee1 1x" loading="lazy"></a></p>\n\n<p>ユーザー設定に関しては<code>PreferenceStore</code>, 入力中の体温値に関しては<code>TemperatureStore</code>が管理してます。</p>\n\n<p>TapInputViewに詰め込んでいたユーザー設定や現在値の表示を分離し、ViewModelを作成しています</p>\n\n<p>参考までに一番コードがシンプルなDisplayViewに関するView/ViewModel/Model(Store/Value)のコードを載せておきます。</p>\n\n<h3>\n<span id="displayviewview" class="fragment"></span><a href="#displayviewview"><i class="fa fa-link"></i></a>DisplayView(View)</h3>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">SwiftUI</span>\n\n<span class="kd">extension</span> <span class="kt">DisplayView</span><span class="p">{</span>\n    <span class="kd">private</span> <span class="nf">init</span><span class="p">(</span><span class="nv">vm</span><span class="p">:</span><span class="kt">DisplayViewModel</span><span class="p">,</span> <span class="nv">upperColor</span><span class="p">:</span><span class="kt">Color</span><span class="p">,</span> <span class="nv">lowerColor</span><span class="p">:</span><span class="kt">Color</span><span class="p">){</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">vm</span> <span class="o">=</span> <span class="n">vm</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">upperValueColor</span> <span class="o">=</span> <span class="n">upperColor</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">lowerValueColor</span> <span class="o">=</span> <span class="n">lowerColor</span>\n    <span class="p">}</span>\n\n    <span class="kd">func</span> <span class="nf">upperColor</span><span class="p">(</span><span class="n">_</span> <span class="nv">color</span><span class="p">:</span><span class="kt">Color</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">Self</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">DisplayView</span><span class="p">(</span><span class="nv">vm</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">vm</span><span class="p">,</span> <span class="nv">upperColor</span><span class="p">:</span> <span class="n">color</span><span class="p">,</span> <span class="nv">lowerColor</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">lowerValueColor</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">func</span> <span class="nf">lowerColor</span><span class="p">(</span><span class="n">_</span> <span class="nv">color</span><span class="p">:</span><span class="kt">Color</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">Self</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">DisplayView</span><span class="p">(</span><span class="nv">vm</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">vm</span><span class="p">,</span> <span class="nv">upperColor</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">upperValueColor</span><span class="p">,</span> <span class="nv">lowerColor</span><span class="p">:</span> <span class="n">color</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">DisplayView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>\n\n    <span class="kd">private</span> <span class="k">let</span> <span class="nv">upperValueColor</span><span class="p">:</span><span class="kt">Color</span>\n    <span class="kd">private</span> <span class="k">let</span> <span class="nv">lowerValueColor</span><span class="p">:</span><span class="kt">Color</span>\n\n    <span class="kd">@ObservedObject</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">vm</span><span class="p">:</span><span class="kt">DisplayViewModel</span>\n\n    <span class="nf">init</span><span class="p">(</span><span class="nv">vm</span><span class="p">:</span><span class="kt">DisplayViewModel</span><span class="p">){</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">vm</span> <span class="o">=</span> <span class="n">vm</span>\n\n        <span class="k">self</span><span class="o">.</span><span class="n">upperValueColor</span> <span class="o">=</span> <span class="kt">Color</span><span class="o">.</span><span class="n">primary</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">lowerValueColor</span> <span class="o">=</span> <span class="kt">Color</span><span class="o">.</span><span class="n">primary</span>\n    <span class="p">}</span>\n\n    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>\n        <span class="c1">// 表示</span>\n        <span class="kt">HStack</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">firstTextBaseline</span><span class="p">,</span> <span class="nv">spacing</span><span class="p">:</span> <span class="mi">4</span><span class="p">){</span>\n            <span class="kt">Text</span><span class="p">(</span><span class="s">"</span><span class="se">(</span><span class="n">vm</span><span class="o">.</span><span class="n">temp</span><span class="o">.</span><span class="n">higher</span><span class="se">)</span><span class="s">."</span><span class="p">)</span>\n                <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="n">upperValueColor</span><span class="p">)</span>\n            <span class="kt">Text</span><span class="p">(</span><span class="s">"</span><span class="se">(</span><span class="n">vm</span><span class="o">.</span><span class="n">temp</span><span class="o">.</span><span class="n">lower</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>\n                <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="n">lowerValueColor</span><span class="p">)</span>\n            <span class="kt">Text</span><span class="p">(</span><span class="s">"℃"</span><span class="p">)</span><span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="kt">Font</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">48</span><span class="p">))</span>\n        <span class="p">}</span><span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="kt">Font</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">80</span><span class="p">))</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<h3>\n<span id="displayviewmodelviewmodel" class="fragment"></span><a href="#displayviewmodelviewmodel"><i class="fa fa-link"></i></a>DisplayViewModel(ViewModel)</h3>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">Foundation</span>\n<span class="kd">import</span> <span class="kt">Combine</span>\n<span class="kd">class</span> <span class="kt">DisplayViewModel</span><span class="p">:</span> <span class="kt">ObservableObject</span><span class="p">{</span>\n    <span class="kd">private</span> <span class="k">let</span> <span class="nv">healthCareRepository</span><span class="p">:</span> <span class="kt">HealthCareRepositoryDelegate</span>\n    <span class="kd">@Published</span> <span class="kd">private</span> <span class="p">(</span><span class="k">set</span><span class="p">)</span> <span class="k">var</span> <span class="nv">temp</span><span class="p">:</span><span class="kt">Temperature</span>\n\n    <span class="kd">private</span> <span class="k">var</span> <span class="nv">cancellable</span><span class="p">:</span><span class="kt">AnyCancellable</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>\n\n    <span class="nf">init</span><span class="p">(</span><span class="nv">repo</span><span class="p">:</span><span class="kt">HealthCareRepositoryDelegate</span><span class="p">,</span> <span class="nv">store</span><span class="p">:</span><span class="kt">TemperatureStore</span><span class="p">)</span> <span class="p">{</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">healthCareRepository</span> <span class="o">=</span> <span class="n">repo</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">temp</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="n">value</span>\n\n        <span class="k">self</span><span class="o">.</span><span class="n">cancellable</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="err">$</span><span class="n">value</span><span class="o">.</span><span class="nf">sink</span><span class="p">(</span><span class="nv">receiveValue</span><span class="p">:</span> <span class="p">{</span><span class="n">t</span> <span class="k">in</span> <span class="k">self</span><span class="o">.</span><span class="n">temp</span> <span class="o">=</span> <span class="n">t</span><span class="p">})</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n</code></pre></div></div>\n\n<h3>\n<span id="temperaturestoremodel---store" class="fragment"></span><a href="#temperaturestoremodel---store"><i class="fa fa-link"></i></a>TemperatureStore(Model - Store)</h3>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">Foundation</span>\n<span class="kd">import</span> <span class="kt">Combine</span>\n<span class="kd">class</span> <span class="kt">TemperatureStore</span><span class="p">:</span> <span class="kt">ObservableObject</span><span class="p">{</span>\n\n    <span class="kd">@Published</span> <span class="kd">private</span> <span class="p">(</span><span class="k">set</span><span class="p">)</span> <span class="k">var</span> <span class="nv">value</span><span class="p">:</span><span class="kt">Temperature</span>\n\n    <span class="nf">init</span><span class="p">(</span><span class="n">_</span> <span class="nv">initialValue</span><span class="p">:</span><span class="kt">Temperature</span><span class="p">){</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">initialValue</span>\n    <span class="p">}</span>\n\n    <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="n">_</span> <span class="nv">closure</span><span class="p">:(</span><span class="kt">Temperature</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Temperature</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">{</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n</code></pre></div></div>\n\n<p>使い方</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="k">let</span> <span class="nv">store</span><span class="p">:</span><span class="kt">TemperatureStore</span>\n<span class="c1">// 小数点以下の値を更新する</span>\n<span class="n">store</span><span class="o">.</span><span class="nf">update</span><span class="p">({</span><span class="n">old</span> <span class="k">in</span> <span class="n">old</span><span class="o">.</span><span class="nf">lower</span><span class="p">(</span><span class="mi">9</span><span class="p">))</span>\n</code></pre></div></div>\n\n<h3>\n<span id="temperaturemodel---value" class="fragment"></span><a href="#temperaturemodel---value"><i class="fa fa-link"></i></a>Temperature(Model - Value)</h3>\n\n<p>今回の用途では、体温の小数点以上/以下それぞれ個別に変更するため以下のような作りにしてます</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">Foundation</span>\n\n<span class="c1">/// 入力中の体温を保持する構造体です</span>\n<span class="kd">struct</span> <span class="kt">Temperature</span><span class="p">{</span>\n    <span class="c1">/// 小数点以下</span>\n    <span class="k">let</span> <span class="nv">lower</span><span class="p">:</span><span class="kt">Int</span>\n\n    <span class="c1">/// 小数点以上</span>\n    <span class="k">let</span> <span class="nv">higher</span><span class="p">:</span><span class="kt">Int</span>\n<span class="p">}</span>\n\n<span class="kd">extension</span> <span class="kt">Temperature</span><span class="p">{</span>\n    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">lower</span><span class="p">(</span><span class="n">_</span> <span class="nv">val</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">Self</span><span class="p">{</span>\n        <span class="k">return</span> <span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">lower</span><span class="p">:</span> <span class="n">val</span><span class="p">,</span> <span class="nv">higher</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">higher</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">higher</span><span class="p">(</span><span class="n">_</span> <span class="nv">val</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">Self</span><span class="p">{</span>\n        <span class="k">return</span> <span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">lower</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">lower</span><span class="p">,</span> <span class="nv">higher</span><span class="p">:</span> <span class="n">val</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n</code></pre></div></div>\n\n<h2>\n<span id="終わりに" class="fragment"></span><a href="#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB"><i class="fa fa-link"></i></a>終わりに</h2>\n\n<p>私が現時点でそうだと思っているMVVM化できました。</p>\n\n<p>Store-Value部分は使いやすいかどうか、テストしやすいかどうかなど今後検証してみたいところです。</p>\n',body:'[体温を最速で入力するためのユーザーインターフェースの検討(その1) - Qiita](https://qiita.com/sYamaz/items/9ef8fceb5650fc7b7ad8)で体温入力のユーザーインターフェースを考えていました。\n\n![タイトルなし.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/88282c02-a58d-cef4-2a28-33411eafed30.gif)\n\n前回は「とりあえず作った」だけの物だったので今後の変更やテストしやすさなどを考えてMVVMパターンに合わせていこうと思います。\n\n\n本来このようなリファクタリングはユニットテストをあらかじめ作った上で実施していくものだと思いますが、あまりにテストしにくい形だったため今回は先に設計を変更することにしました。\n\n環境は以下です\n\n* Xcode 13\n* Swift 5\n\n## before\n\nhttps://github.com/sYamaz/BodyTempLogger/tree/v0.0.1\n\nクラス、構造体の関連を示すと以下のようなイメージです。\n\n![名称未設定ファイル-before.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/47e19a08-956c-bf77-3997-d931432c7399.png)\n\n* AppDelegate；アプリケーション起動時の処理を行うクラス\n* PostView：保存ボタン\n* TapInputView：体温入力のためのボタンがあるView（と、その他分離できていない機能群）\n  * その他の機能\n    * ユーザー設定のためのシート表示\n    * 現在入力している値の表示\n* HealthCareRepository：HealthKitへのアクセスを担当するクラス\n* HealthCareRepositoryDelegate：HealthKitへのアクセスのインターフェース（Protocol）。主にテストを容易にするためのもの\n\n無計画にViewを作成しており、かつ状態は全てViewが持っています。\n\n## after\n\nMVVMでModel部分をどのように作るかが私の中で定まっていないですが今回は以下のようなパターンを考えます\n\n![名称未設定ファイル-after.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/04d6ea73-504e-0a7c-9ac7-fc475f72dbba.png)\n\n\n* View\n* ViewModel\n* Model\n  * Store: アプリケーションの状態を保持するクラス\n    * Value: アプリケーションの状態（構造体）\n  * Repository: 外部のAPIアクセスを隠蔽する。今回はHealthKit。\n\n状態を構造体一発ではなくStoreとValueという形にしたのは状態の変更とそれを通知する機能を状態そのものから分離したかったためです。\n\nこのパターンをもとに、以下のように設計を変更しました\n\nhttps://github.com/sYamaz/BodyTempLogger/tree/v0.0.3\n\n![名称未設定ファイル-after2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/5ff1523f-0d7d-c91b-5d83-b4f0b1857f56.png)\n\nユーザー設定に関しては`PreferenceStore`, 入力中の体温値に関しては`TemperatureStore`が管理してます。\n\nTapInputViewに詰め込んでいたユーザー設定や現在値の表示を分離し、ViewModelを作成しています\n\n\n\n参考までに一番コードがシンプルなDisplayViewに関するView/ViewModel/Model(Store/Value)のコードを載せておきます。\n\n### DisplayView(View)\n\n```swift\nimport SwiftUI\n\nextension DisplayView{\n    private init(vm:DisplayViewModel, upperColor:Color, lowerColor:Color){\n        self.vm = vm\n        self.upperValueColor = upperColor\n        self.lowerValueColor = lowerColor\n    }\n    \n    func upperColor(_ color:Color) -> Self{\n        return DisplayView(vm: self.vm, upperColor: color, lowerColor: self.lowerValueColor)\n    }\n    \n    func lowerColor(_ color:Color) -> Self{\n        return DisplayView(vm: self.vm, upperColor: self.upperValueColor, lowerColor: color)\n    }\n}\n\nstruct DisplayView: View {\n    \n    private let upperValueColor:Color\n    private let lowerValueColor:Color\n    \n    @ObservedObject private var vm:DisplayViewModel\n    \n    init(vm:DisplayViewModel){\n        self.vm = vm\n        \n        self.upperValueColor = Color.primary\n        self.lowerValueColor = Color.primary\n    }\n    \n    var body: some View {\n        // 表示\n        HStack(alignment: .firstTextBaseline, spacing: 4){\n            Text("(vm.temp.higher).")\n                .foregroundColor(upperValueColor)\n            Text("(vm.temp.lower)")\n                .foregroundColor(lowerValueColor)\n            Text("℃").font(Font.system(size: 48))\n        }.font(Font.system(size: 80))\n    }\n}\n```\n\n### DisplayViewModel(ViewModel)\n\n\n```swift\nimport Foundation\nimport Combine\nclass DisplayViewModel: ObservableObject{\n    private let healthCareRepository: HealthCareRepositoryDelegate\n    @Published private (set) var temp:Temperature\n    \n    private var cancellable:AnyCancellable? = nil\n    \n    init(repo:HealthCareRepositoryDelegate, store:TemperatureStore) {\n        self.healthCareRepository = repo\n        self.temp = store.value\n        \n        self.cancellable = store.$value.sink(receiveValue: {t in self.temp = t})\n    }\n}\n\n```\n\n### TemperatureStore(Model - Store)\n\n```swift\nimport Foundation\nimport Combine\nclass TemperatureStore: ObservableObject{\n\n    @Published private (set) var value:Temperature\n    \n    init(_ initialValue:Temperature){\n        self.value = initialValue\n    }\n    \n    func update(_ closure:(Temperature) -> Temperature) -> Void{\n        self.value = closure(self.value)\n    }\n}\n\n```\n\n使い方\n\n```swift\nlet store:TemperatureStore\n// 小数点以下の値を更新する\nstore.update({old in old.lower(9))\n```\n\n\n### Temperature(Model - Value)\n\n今回の用途では、体温の小数点以上/以下それぞれ個別に変更するため以下のような作りにしてます\n\n```swift\nimport Foundation\n\n/// 入力中の体温を保持する構造体です\nstruct Temperature{\n    /// 小数点以下\n    let lower:Int\n    \n    /// 小数点以上\n    let higher:Int\n}\n\nextension Temperature{\n    public func lower(_ val:Int) -> Self{\n        return .init(lower: val, higher: self.higher)\n    }\n    \n    public func higher(_ val:Int) -> Self{\n        return .init(lower: self.lower, higher: val)\n    }\n}\n\n```\n\n## 終わりに\n\n私が現時点でそうだと思っているMVVM化できました。\n\nStore-Value部分は使いやすいかどうか、テストしやすいかどうかなど今後検証してみたいところです。\n',coediting:!1,comments_count:0,created_at:"2021-10-27T22:30:12+09:00",group:"{ }",id:"7b72e26ed48579eb814b",likes_count:1,private:!1,tags:[{},{},{}],title:"SwiftUI/Swift: 既存のプロジェクトをMVVMパターンに変更する",updated_at:"2021-10-27T22:40:45+09:00",url:"https://qiita.com/sYamaz/items/7b72e26ed48579eb814b",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>体調管理（と会社での感染予防）のために毎朝体温を測るのが習慣化しています。<br>\nしかし、朝の1分1秒は非常に貴重な時間です。できればiPhoneでの体温データ入力も極限まで無駄を減らしたいところです。</p>\n\n<p>そこで、体温を最速で入力するためにはどんな入力インターフェースがいいのかを検討してみようと思いました。</p>\n\n<p>HealthKitへの体温データ追加については前回調査しました</p>\n\n<p><a href="https://qiita.com/sYamaz/items/cedfd869f74f14b4b25b" id="reference-edf7ca93e2003fef1e79">Swift: HealthKitに体温データを入力する。できるだけ公式ドキュメントだけを見て。</a></p>\n\n<h1>\n<span id="開発環境" class="fragment"></span><a href="#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>開発環境</h1>\n\n<ul>\n<li>Xcode 13</li>\n<li>swift 5</li>\n<li>対象プラットフォーム:iOS 14以上（主にiphone）</li>\n</ul>\n\n<h1>\n<span id="条件" class="fragment"></span><a href="#%E6%9D%A1%E4%BB%B6"><i class="fa fa-link"></i></a>条件</h1>\n\n<ul>\n<li>主なユーザー：私\n\n<ul>\n<li>体温の単位は摂氏です</li>\n<li>平熱は36℃台中盤で、35℃台になることはありません</li>\n<li>40℃台になったことはありません。</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id="タップ数ベースの参考記録" class="fragment"></span><a href="#%E3%82%BF%E3%83%83%E3%83%97%E6%95%B0%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AE%E5%8F%82%E8%80%83%E8%A8%98%E9%8C%B2"><i class="fa fa-link"></i></a>タップ数ベースの参考記録</h1>\n\n<p>新規入力時</p>\n\n<ol>\n<li>ヘルスケアアプリ起動（1タップ）</li>\n<li>お気に入り登録してある「体温」の項目をタップ（1タップ）</li>\n<li>「データを追加」をタップ（1タップ）</li>\n<li>iOSのソフトウェアキーボードで体温を入力（4タップ:"36.5"など）</li>\n<li>「追加」をタップ（1タップ）</li>\n</ol>\n\n<p>合計8タップ</p>\n\n<h1>\n<span id="ユーザーインターフェースの検討" class="fragment"></span><a href="#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%81%AE%E6%A4%9C%E8%A8%8E"><i class="fa fa-link"></i></a>ユーザーインターフェースの検討</h1>\n\n<p>※そもそも体温を測ったらiPhoneと接続して勝手に記録してくれる体温計があればいい話ですがそれは置いておきます。</p>\n\n<p>どんな入力方法があるか考えてみます（実現方法は置いておきます）</p>\n\n<h2>\n<span id="画像入力" class="fragment"></span><a href="#%E7%94%BB%E5%83%8F%E5%85%A5%E5%8A%9B"><i class="fa fa-link"></i></a>画像入力</h2>\n\n<p>以下の２方法を思いつきました</p>\n\n<ul>\n<li>計測後の体温計にカメラをかざして体温の文字列を読み込む方式</li>\n<li>計測後の体温計の写真を撮って解析する方式</li>\n</ul>\n\n<p>今後Try予定です</p>\n\n<h2>\n<span id="音声入力" class="fragment"></span><a href="#%E9%9F%B3%E5%A3%B0%E5%85%A5%E5%8A%9B"><i class="fa fa-link"></i></a>音声入力</h2>\n\n<p>「Hey Siri！ 今日の体温は36.7度だったよ！」と言う方式です</p>\n\n<p>今後Try予定です</p>\n\n<h2>\n<span id="タッチ入力" class="fragment"></span><a href="#%E3%82%BF%E3%83%83%E3%83%81%E5%85%A5%E5%8A%9B"><i class="fa fa-link"></i></a>タッチ入力</h2>\n\n<p>ソフトウェアキーボードをはじめとしたタッチ操作で入力する方式です。</p>\n\n<p>とはいえソフトウェアキーボードを使用したアプリだと上記参考記録とタップ数は大差なくなってしまうので別の方法を考えてみます。</p>\n\n<h3>\n<span id="ソフトウェアキーボードじゃダメなの" class="fragment"></span><a href="#%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%98%E3%82%83%E3%83%80%E3%83%A1%E3%81%AA%E3%81%AE"><i class="fa fa-link"></i></a>ソフトウェアキーボードじゃダメなの？</h3>\n\n<p>※1秒を惜しむ人間の思考です</p>\n\n<ul>\n<li>仮に体温が「36.5度」だったとして、「3」と「.」は入力しなくて良のではないでしょうか？大抵変わるのは「6」と「5」の部分です。冒頭で示したように40度行くことはほぼないです。</li>\n<li>修正するときにBackSpace入力するのがめんどくさいという思いもあります</li>\n</ul>\n\n<p>これらに対して、「小数点以上」「小数点以下」それぞれで上書きで入力することができればいいのでは？と思い作成したプロトタイプが以下になります。</p>\n\n<p><a href="https://camo.qiitausercontent.com/46e7710c56e7d2ff88ce9381adc1d37869379798/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f38383238326330322d613538642d636566342d326132382d3333343131656166656433302e676966" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F88282c02-a58d-cef4-2a28-33411eafed30.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b10cc6dae9aaf1acec2aa284de125c66" alt="タイトルなし.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/88282c02-a58d-cef4-2a28-33411eafed30.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F88282c02-a58d-cef4-2a28-33411eafed30.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9e42e486d8a5ded7e523a609cbfd64e3 1x" loading="lazy"></a></p>\n\n<p>理想的には</p>\n\n<ul>\n<li>アプリ起動（1タップ）</li>\n<li>小数点以上の桁入力（1タップ。平熱の場合タップ無しになることも）</li>\n<li>小数点以下の桁入力（1タップ）</li>\n<li>登録ボタン（1タップ）</li>\n</ul>\n\n<p>合計4タップ</p>\n\n<p>小数点以上、以下それぞれ独立して数値を上書きしていくため、入力後の修正もBackSpace不要です</p>\n\n<h1>\n<span id="repository" class="fragment"></span><a href="#repository"><i class="fa fa-link"></i></a>repository</h1>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/BodyTempLogger"></qiita-embed-ogp></p>\n\n<h1>\n<span id="結果" class="fragment"></span><a href="#%E7%B5%90%E6%9E%9C"><i class="fa fa-link"></i></a>結果</h1>\n\n<p>今回は使用者を限定することで理論上ではタップ数が半減するインターフェースとなりました。</p>\n\n<p>次回以降試してみたいことの一覧です</p>\n\n<ul>\n<li>タッチ入力\n\n<ul>\n<li>スワイプなどの操作も活用できないか</li>\n</ul>\n</li>\n<li>画像入力</li>\n<li>音声入力</li>\n</ul>\n',body:'体調管理（と会社での感染予防）のために毎朝体温を測るのが習慣化しています。\nしかし、朝の1分1秒は非常に貴重な時間です。できればiPhoneでの体温データ入力も極限まで無駄を減らしたいところです。\n\nそこで、体温を最速で入力するためにはどんな入力インターフェースがいいのかを検討してみようと思いました。\n\nHealthKitへの体温データ追加については前回調査しました\n\n[Swift: HealthKitに体温データを入力する。できるだけ公式ドキュメントだけを見て。](https://qiita.com/sYamaz/items/cedfd869f74f14b4b25b)\n\n# 開発環境\n\n* Xcode 13\n* swift 5\n* 対象プラットフォーム:iOS 14以上（主にiphone）\n\n# 条件\n\n* 主なユーザー：私\n    * 体温の単位は摂氏です\n    * 平熱は36℃台中盤で、35℃台になることはありません\n    * 40℃台になったことはありません。\n\n# タップ数ベースの参考記録\n\n新規入力時\n\n1. ヘルスケアアプリ起動（1タップ）\n1. お気に入り登録してある「体温」の項目をタップ（1タップ）\n1. 「データを追加」をタップ（1タップ）\n1. iOSのソフトウェアキーボードで体温を入力（4タップ:"36.5"など）\n1. 「追加」をタップ（1タップ）\n\n合計8タップ\n\n\n\n# ユーザーインターフェースの検討\n\n※そもそも体温を測ったらiPhoneと接続して勝手に記録してくれる体温計があればいい話ですがそれは置いておきます。\n\nどんな入力方法があるか考えてみます（実現方法は置いておきます）\n\n## 画像入力\n\n以下の２方法を思いつきました\n\n* 計測後の体温計にカメラをかざして体温の文字列を読み込む方式\n* 計測後の体温計の写真を撮って解析する方式\n\n今後Try予定です\n\n## 音声入力\n\n「Hey Siri！ 今日の体温は36.7度だったよ！」と言う方式です\n\n今後Try予定です\n\n## タッチ入力\n\nソフトウェアキーボードをはじめとしたタッチ操作で入力する方式です。\n\nとはいえソフトウェアキーボードを使用したアプリだと上記参考記録とタップ数は大差なくなってしまうので別の方法を考えてみます。\n\n### ソフトウェアキーボードじゃダメなの？\n\n※1秒を惜しむ人間の思考です\n\n* 仮に体温が「36.5度」だったとして、「3」と「.」は入力しなくて良のではないでしょうか？大抵変わるのは「6」と「5」の部分です。冒頭で示したように40度行くことはほぼないです。\n* 修正するときにBackSpace入力するのがめんどくさいという思いもあります\n\nこれらに対して、「小数点以上」「小数点以下」それぞれで上書きで入力することができればいいのでは？と思い作成したプロトタイプが以下になります。\n\n![タイトルなし.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/88282c02-a58d-cef4-2a28-33411eafed30.gif)\n\n理想的には\n\n* アプリ起動（1タップ）\n* 小数点以上の桁入力（1タップ。平熱の場合タップ無しになることも）\n* 小数点以下の桁入力（1タップ）\n* 登録ボタン（1タップ）\n\n合計4タップ\n\n小数点以上、以下それぞれ独立して数値を上書きしていくため、入力後の修正もBackSpace不要です\n\n# repository\n\nhttps://github.com/sYamaz/BodyTempLogger\n\n# 結果\n\n今回は使用者を限定することで理論上ではタップ数が半減するインターフェースとなりました。\n\n次回以降試してみたいことの一覧です\n\n* タッチ入力\n    * スワイプなどの操作も活用できないか\n* 画像入力\n* 音声入力\n\n\n',coediting:!1,comments_count:0,created_at:"2021-10-17T22:22:01+09:00",group:"{ }",id:"9ef8fceb5650fc7b7ad8",likes_count:1,private:!1,tags:[{},{},{},{},{}],title:"体温を最速で入力するためのユーザーインターフェースの検討（その1）",updated_at:"2021-10-28T22:25:02+09:00",url:"https://qiita.com/sYamaz/items/9ef8fceb5650fc7b7ad8",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>まずは公式ドキュメントをちゃんと読む人間になろうと思いたち、Apple公式ドキュメント<strong>だけ</strong>を元にHealthKitにアクセスを試みました。</p>\n\n<h1>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n\n<ul>\n<li>XCode Version 13.0</li>\n<li>iOS target 14.0</li>\n</ul>\n\n<h1>\n<span id="参考公式" class="fragment"></span><a href="#%E5%8F%82%E8%80%83%E5%85%AC%E5%BC%8F"><i class="fa fa-link"></i></a>参考(公式）</h1>\n\n<ul>\n<li>前説\n\n<ul>\n<li><a href="https://developer.apple.com/documentation/healthkit/about_the_healthkit_framework" class="autolink" rel="nofollow noopener" target="_blank">https://developer.apple.com/documentation/healthkit/about_the_healthkit_framework</a></li>\n</ul>\n</li>\n<li>XCodeでHealthKitを有効化する\n\n<ul>\n<li><a href="https://developer.apple.com/documentation/healthkit/setting_up_healthkit" class="autolink" rel="nofollow noopener" target="_blank">https://developer.apple.com/documentation/healthkit/setting_up_healthkit</a></li>\n</ul>\n</li>\n<li>プライバシーデータへアクセスするためのプロジェクト設定\n\n<ul>\n<li><a href="https://developer.apple.com/documentation/healthkit/protecting_user_privacy" class="autolink" rel="nofollow noopener" target="_blank">https://developer.apple.com/documentation/healthkit/protecting_user_privacy</a></li>\n</ul>\n</li>\n<li>Swiftでヘルスケアデータにアクセス\n\n<ul>\n<li><a href="https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data" class="autolink" rel="nofollow noopener" target="_blank">https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data</a></li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id="プロジェクト設定" class="fragment"></span><a href="#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E8%A8%AD%E5%AE%9A"><i class="fa fa-link"></i></a>プロジェクト設定</h1>\n\n<p>HealthKitの有効化(プロジェクト設定の「Signing &amp; Capabilities」にHealthKitを追加</p>\n\n<p><a href="https://camo.qiitausercontent.com/0211e77a2ebbe197a44be78d8dfb43e85393efb2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f30326432346564382d656231302d623030372d613436382d6332643563646531333538342e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F02d24ed8-eb10-b007-a468-c2d5cde13584.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=80641514039fefa756c0148300968c9d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/02d24ed8-eb10-b007-a468-c2d5cde13584.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F02d24ed8-eb10-b007-a468-c2d5cde13584.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=927ef4f2159ce1e0c1597dcb0f764398 1x" loading="lazy"></a></p>\n\n<p>アクセス要求用のメッセージ定義</p>\n\n<p><a href="https://camo.qiitausercontent.com/11b9b19ef7f705c173251b9411ecf9e76317e500/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f34363565656534612d386131332d333737382d626438362d6666623031313765353964332e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F465eee4a-8a13-3778-bd86-ffb0117e59d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d586d3d2365acd96b247f3d69701692c" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/465eee4a-8a13-3778-bd86-ffb0117e59d3.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F465eee4a-8a13-3778-bd86-ffb0117e59d3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=1b2ffc03a0086e24631bbce1266c41de 1x" loading="lazy"></a></p>\n\n<p>今回は体温データの入力のみなので<code>Privacy - Health Update Usage Description</code><br>\nアプリが読み出しする場合は<code>Privacy - Health Share Usage Description</code>が必要になります</p>\n\n<p>参考: <a href="https://developer.apple.com/documentation/healthkit/protecting_user_privacy" rel="nofollow noopener" target="_blank">Protecting User Privacy (developer.apple.com)</a></p>\n\n<div class="note info">\n<span class="fa fa-fw fa-check-circle"></span><p>これらのDescriptionは１３文字以上必要なようです。これに関しては調査力が足りず、StackOverflowのお世話になりました。\n\nhttps://stackoverflow.com/questions/37863093/exception-nsinvalidargumentexception-nshealthupdateusagedescritption\n</p>\n</div>\n\n<h1>\n<span id="コード" class="fragment"></span><a href="#%E3%82%B3%E3%83%BC%E3%83%89"><i class="fa fa-link"></i></a>コード</h1>\n\n<p>今回は1つのクラス内でHealthKitへの参照を完結させます</p>\n\n<h2>\n<span id="setup" class="fragment"></span><a href="#setup"><i class="fa fa-link"></i></a>setup()</h2>\n\n<p><code>HKHealthStore</code>はドキュメントによれば、無闇に生成せず保持し続けるのがいいようです。</p>\n\n<blockquote>\n<p>You need only a single HealthKit store per app. These are long-lived objects; you create the store once, and keep a reference for later use.</p>\n\n<p><a href="https://developer.apple.com/documentation/healthkit/setting_up_healthkit" rel="nofollow noopener" target="_blank">Setting Up HealthKit (developer.apple.com)</a></p>\n</blockquote>\n\n<p>エラーチェックで呼び出し側の処理を変えることなども考慮し、setup()メソッドでStoreの生成を行います。（エラーチェックが不要であればinit()内で生成してました）</p>\n\n<h2>\n<span id="postbodytemperature" class="fragment"></span><a href="#postbodytemperature"><i class="fa fa-link"></i></a>postBodyTemperature()</h2>\n\n<p>以下の順番で処理を行います</p>\n\n<ul>\n<li>体温データに関するアクセス許可取得</li>\n<li>アクセス許可状態の確認</li>\n<li>体温データの保存</li>\n</ul>\n\n<h2>\n<span id="出来上がったclass" class="fragment"></span><a href="#%E5%87%BA%E6%9D%A5%E4%B8%8A%E3%81%8C%E3%81%A3%E3%81%9Fclass"><i class="fa fa-link"></i></a>出来上がったClass</h2>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">Foundation</span>\n<span class="kd">import</span> <span class="kt">HealthKit</span>\n\n<span class="kd">enum</span> <span class="kt">BodyTemperatureUnit</span><span class="p">{</span>\n    <span class="c1">/// 摂氏</span>\n    <span class="k">case</span> <span class="n">degreeCelsius</span>\n    <span class="c1">/// 華氏</span>\n    <span class="k">case</span> <span class="n">degreeFahrenheit</span>\n<span class="p">}</span>\n<span class="kd">class</span> <span class="kt">HealthCareRepository</span><span class="p">{</span>\n    <span class="k">let</span> <span class="nv">allTypes</span> <span class="o">=</span> <span class="kt">Set</span><span class="p">([</span><span class="kt">HKObjectType</span><span class="o">.</span><span class="nf">quantityType</span><span class="p">(</span><span class="nv">forIdentifier</span><span class="p">:</span> <span class="o">.</span><span class="n">bodyTemperature</span><span class="p">)</span><span class="o">!</span><span class="p">])</span>\n    <span class="c1">/// HKHealthStoreはアプリケーションあたり1インスタンス。１回生成したらそれを使い続ける必要あり</span>\n    <span class="k">var</span> <span class="nv">store</span><span class="p">:</span><span class="kt">HKHealthStore</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>\n\n    <span class="kd">func</span> <span class="nf">setup</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">{</span>\n        <span class="c1">/// ipadではヘルスケア使えない</span>\n        <span class="c1">/// https://developer.apple.com/documentation/healthkit/setting_up_healthkit</span>\n        <span class="c1">/// Ensure HealthKit’s Availability</span>\n        <span class="k">if</span> <span class="p">(</span><span class="kt">HKHealthStore</span><span class="o">.</span><span class="nf">isHealthDataAvailable</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span><span class="p">){</span>\n            <span class="c1">// ヘルスデータが無効状態</span>\n            <span class="k">return</span> <span class="kc">false</span>\n        <span class="p">}</span>\n\n        <span class="c1">/// ヘルスケア機能があり、有効である場合生成する</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">store</span> <span class="o">=</span> <span class="kt">HKHealthStore</span><span class="p">()</span>\n        <span class="k">return</span> <span class="kc">true</span>\n    <span class="p">}</span>\n\n    <span class="kd">func</span> <span class="nf">postBodyTemperature</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span><span class="kt">Double</span><span class="p">,</span> <span class="nv">unit</span><span class="p">:</span><span class="kt">BodyTemperatureUnit</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span><span class="kd">@escaping</span> <span class="p">(</span><span class="kt">Bool</span><span class="p">,</span> <span class="kt">Error</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">{</span>\n\n        <span class="c1">/// https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data</span>\n        <span class="c1">/// Request Permission from the User</span>\n        <span class="c1">/// toShare: Write要求</span>\n        <span class="c1">/// read: Read要求</span>\n        <span class="k">self</span><span class="o">.</span><span class="n">store</span><span class="o">!.</span><span class="nf">requestAuthorization</span><span class="p">(</span><span class="nv">toShare</span><span class="p">:</span> <span class="n">allTypes</span><span class="p">,</span> <span class="nv">read</span><span class="p">:</span> <span class="kc">nil</span><span class="p">){</span> <span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>\n            <span class="k">if</span> <span class="o">!</span><span class="n">success</span><span class="p">{</span>\n                <span class="nf">completion</span><span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>\n                <span class="k">return</span>\n            <span class="p">}</span>\n\n            <span class="c1">/// https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data</span>\n            <span class="c1">/// Check for Authorization Before Saving Data</span>\n            <span class="k">let</span> <span class="nv">status</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">store</span><span class="o">!.</span><span class="nf">authorizationStatus</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="nf">quantityType</span><span class="p">(</span><span class="nv">forIdentifier</span><span class="p">:</span> <span class="o">.</span><span class="n">bodyTemperature</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>\n            <span class="k">switch</span> <span class="n">status</span><span class="p">{</span>\n            <span class="k">case</span> <span class="o">.</span><span class="nv">notDetermined</span><span class="p">:</span>\n                <span class="c1">// "If you have not yet requested permission"</span>\n                <span class="c1">// ここに入ることはないはず</span>\n                <span class="nf">print</span><span class="p">(</span><span class="s">"Not determined"</span><span class="p">)</span>\n                <span class="nf">completion</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="kt">HKError</span><span class="p">(</span><span class="kt">HKError</span><span class="o">.</span><span class="n">errorAuthorizationNotDetermined</span><span class="p">))</span>\n                <span class="k">return</span>\n            <span class="k">case</span> <span class="o">.</span><span class="nv">sharingDenied</span><span class="p">:</span><span class="c1">// If the user has denied permission</span>\n                <span class="c1">// ユーザーが許可しなかった場合</span>\n                <span class="nf">print</span><span class="p">(</span><span class="s">"Sharing Denied"</span><span class="p">)</span>\n                <span class="nf">completion</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="kt">HKError</span><span class="p">(</span><span class="kt">HKError</span><span class="o">.</span><span class="n">errorAuthorizationDenied</span><span class="p">))</span>\n                <span class="k">break</span>\n            <span class="k">case</span> <span class="o">.</span><span class="nv">sharingAuthorized</span><span class="p">:</span>\n                <span class="c1">// ユーザーが許可した場合</span>\n                <span class="nf">print</span><span class="p">(</span><span class="s">"Sharing Authorized"</span><span class="p">)</span>\n                <span class="k">break</span>\n            <span class="kd">@unknown</span> <span class="k">default</span><span class="p">:</span>\n                <span class="nf">print</span><span class="p">(</span><span class="s">"Unknown status."</span><span class="p">)</span>\n                <span class="k">break</span>\n            <span class="p">}</span>\n\n            <span class="c1">// Datetime</span>\n            <span class="k">let</span> <span class="nv">now</span> <span class="o">=</span> <span class="kt">Date</span><span class="p">()</span>\n            <span class="c1">// 摂氏 or 華氏</span>\n            <span class="k">let</span> <span class="nv">hkUnit</span><span class="p">:</span><span class="kt">HKUnit</span>\n            <span class="k">switch</span> <span class="n">unit</span> <span class="p">{</span>\n            <span class="k">case</span> <span class="o">.</span><span class="nv">degreeCelsius</span><span class="p">:</span>\n                <span class="n">hkUnit</span> <span class="o">=</span> <span class="o">.</span><span class="nf">degreeCelsius</span><span class="p">()</span>\n            <span class="k">case</span> <span class="o">.</span><span class="nv">degreeFahrenheit</span><span class="p">:</span>\n                <span class="n">hkUnit</span> <span class="o">=</span> <span class="o">.</span><span class="nf">degreeFahrenheit</span><span class="p">()</span>\n            <span class="p">}</span>\n\n            <span class="k">let</span> <span class="nv">quantity</span> <span class="o">=</span> <span class="kt">HKQuantity</span><span class="p">(</span><span class="nv">unit</span><span class="p">:</span> <span class="n">hkUnit</span><span class="p">,</span> <span class="nv">doubleValue</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span>\n            <span class="k">let</span> <span class="nv">obj</span> <span class="o">=</span> <span class="kt">HKQuantitySample</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="nf">quantityType</span><span class="p">(</span><span class="nv">forIdentifier</span><span class="p">:</span> <span class="o">.</span><span class="n">bodyTemperature</span><span class="p">)</span><span class="o">!</span><span class="p">,</span> <span class="nv">quantity</span><span class="p">:</span> <span class="n">quantity</span><span class="p">,</span> <span class="nv">start</span><span class="p">:</span> <span class="n">now</span><span class="p">,</span> <span class="nv">end</span><span class="p">:</span> <span class="n">now</span><span class="p">)</span>\n            <span class="k">self</span><span class="o">.</span><span class="n">store</span><span class="o">!.</span><span class="nf">save</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nv">withCompletion</span><span class="p">:</span> <span class="n">completion</span><span class="p">)</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<h2>\n<span id="結果" class="fragment"></span><a href="#%E7%B5%90%E6%9E%9C"><i class="fa fa-link"></i></a>結果</h2>\n\n<p>適当なUI作って上記クラスを試した結果、シミュレータ上ではありますが無事に体温データをヘルスケアに登録することができました。大抵のことは公式Documentに書いてあることも実感できました。次回はUI予定です。</p>\n\n<p><a href="https://camo.qiitausercontent.com/341c61dda64b171dac4e10e84e8312c6e46a8a6c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f33653464336634612d633035612d633263362d393865632d3531626432316137393234392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F3e4d3f4a-c05a-c2c6-98ec-51bd21a79249.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bd4343448314c8824b4a89cd17d773bf" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/3e4d3f4a-c05a-c2c6-98ec-51bd21a79249.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2F3e4d3f4a-c05a-c2c6-98ec-51bd21a79249.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d1e6f96b440cc125043b12b6c156a0f5 1x" loading="lazy"></a></p>\n',body:'まずは公式ドキュメントをちゃんと読む人間になろうと思いたち、Apple公式ドキュメント**だけ**を元にHealthKitにアクセスを試みました。\n\n# 環境\n\n* XCode Version 13.0\n* iOS target 14.0\n\n# 参考(公式）\n\n* 前説\n    * https://developer.apple.com/documentation/healthkit/about_the_healthkit_framework\n* XCodeでHealthKitを有効化する\n    * https://developer.apple.com/documentation/healthkit/setting_up_healthkit\n* プライバシーデータへアクセスするためのプロジェクト設定\n    * https://developer.apple.com/documentation/healthkit/protecting_user_privacy\n* Swiftでヘルスケアデータにアクセス\n    * https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data\n\n# プロジェクト設定\n\nHealthKitの有効化(プロジェクト設定の「Signing & Capabilities」にHealthKitを追加\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/02d24ed8-eb10-b007-a468-c2d5cde13584.png)\n\n\nアクセス要求用のメッセージ定義\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/465eee4a-8a13-3778-bd86-ffb0117e59d3.png)\n\n\n今回は体温データの入力のみなので`Privacy - Health Update Usage Description`\nアプリが読み出しする場合は`Privacy - Health Share Usage Description`が必要になります\n\n参考: [Protecting User Privacy (developer.apple.com)](https://developer.apple.com/documentation/healthkit/protecting_user_privacy)\n\n:::note info\nこれらのDescriptionは１３文字以上必要なようです。これに関しては調査力が足りず、StackOverflowのお世話になりました。\n\nhttps://stackoverflow.com/questions/37863093/exception-nsinvalidargumentexception-nshealthupdateusagedescritption\n:::\n\n# コード\n\n今回は1つのクラス内でHealthKitへの参照を完結させます\n\n\n## setup()\n\n`HKHealthStore`はドキュメントによれば、無闇に生成せず保持し続けるのがいいようです。\n\n> You need only a single HealthKit store per app. These are long-lived objects; you create the store once, and keep a reference for later use.\n>\n> [Setting Up HealthKit (developer.apple.com)](https://developer.apple.com/documentation/healthkit/setting_up_healthkit)\n\n\nエラーチェックで呼び出し側の処理を変えることなども考慮し、setup()メソッドでStoreの生成を行います。（エラーチェックが不要であればinit()内で生成してました）\n## postBodyTemperature()\n\n以下の順番で処理を行います\n\n* 体温データに関するアクセス許可取得\n* アクセス許可状態の確認\n* 体温データの保存\n\n## 出来上がったClass\n\n```swift\nimport Foundation\nimport HealthKit\n\nenum BodyTemperatureUnit{\n    /// 摂氏\n    case degreeCelsius\n    /// 華氏\n    case degreeFahrenheit\n}\nclass HealthCareRepository{\n    let allTypes = Set([HKObjectType.quantityType(forIdentifier: .bodyTemperature)!])\n    /// HKHealthStoreはアプリケーションあたり1インスタンス。１回生成したらそれを使い続ける必要あり\n    var store:HKHealthStore? = nil\n    \n    func setup() -> Bool{\n        /// ipadではヘルスケア使えない\n        /// https://developer.apple.com/documentation/healthkit/setting_up_healthkit\n        /// Ensure HealthKit’s Availability\n        if (HKHealthStore.isHealthDataAvailable() == false){\n            // ヘルスデータが無効状態\n            return false\n        }\n        \n        /// ヘルスケア機能があり、有効である場合生成する\n        self.store = HKHealthStore()\n        return true\n    }\n\n    func postBodyTemperature(_ value:Double, unit:BodyTemperatureUnit, completion:@escaping (Bool, Error?) -> Void) -> Void{\n        \n        /// https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data\n        /// Request Permission from the User\n        /// toShare: Write要求\n        /// read: Read要求\n        self.store!.requestAuthorization(toShare: allTypes, read: nil){ (success, error) in\n            if !success{\n                completion(success, error)\n                return\n            }\n            \n            /// https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data\n            /// Check for Authorization Before Saving Data\n            let status = self.store!.authorizationStatus(for: .quantityType(forIdentifier: .bodyTemperature)!)\n            switch status{\n            case .notDetermined:\n                // "If you have not yet requested permission"\n                // ここに入ることはないはず\n                print("Not determined")\n                completion(false, HKError(HKError.errorAuthorizationNotDetermined))\n                return\n            case .sharingDenied:// If the user has denied permission\n                // ユーザーが許可しなかった場合\n                print("Sharing Denied")\n                completion(false, HKError(HKError.errorAuthorizationDenied))\n                break\n            case .sharingAuthorized:\n                // ユーザーが許可した場合\n                print("Sharing Authorized")\n                break\n            @unknown default:\n                print("Unknown status.")\n                break\n            }\n            \n            // Datetime\n            let now = Date()\n            // 摂氏 or 華氏\n            let hkUnit:HKUnit\n            switch unit {\n            case .degreeCelsius:\n                hkUnit = .degreeCelsius()\n            case .degreeFahrenheit:\n                hkUnit = .degreeFahrenheit()\n            }\n            \n            let quantity = HKQuantity(unit: hkUnit, doubleValue: value)\n            let obj = HKQuantitySample(type: .quantityType(forIdentifier: .bodyTemperature)!, quantity: quantity, start: now, end: now)\n            self.store!.save(obj, withCompletion: completion)\n        }\n    }\n}\n```\n\n\n## 結果\n\n適当なUI作って上記クラスを試した結果、シミュレータ上ではありますが無事に体温データをヘルスケアに登録することができました。大抵のことは公式Documentに書いてあることも実感できました。次回はUI予定です。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/3e4d3f4a-c05a-c2c6-98ec-51bd21a79249.png)\n',coediting:!1,comments_count:1,created_at:"2021-10-14T22:26:17+09:00",group:"{ }",id:"cedfd869f74f14b4b25b",likes_count:0,private:!1,tags:[{},{}],title:"Swift: HealthKitに体温データを入力する。できるだけ公式ドキュメントだけを見て。",updated_at:"2021-12-30T15:59:37+09:00",url:"https://qiita.com/sYamaz/items/cedfd869f74f14b4b25b",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>前回、<a href="https://qiita.com/sYamaz/items/1a29a2cb5b3207ad87dc" id="reference-b37a8931e3901955ed10">SwiftでMarkdownを解析してオブジェクトツリーに変換する</a>という記事を作成しましたが、今回はその続きです。</p>\n\n<p>尚、前回記事で「レンダリングはしてくれるけどオブジェクトツリーにしてくれるパッケージあまりないな...」と言いましたが大抵のSwiftのMarkdownレンダリング系パッケージは</p>\n\n<p><code>text</code>--&gt;<code>node tree</code>--&gt;<code>html</code></p>\n\n<p>のような変換過程を辿っていることがわかりました。つまり今Tryしていることはいわゆる「車輪の再発明」ということです。勉強になるからいいかと割り切ってます</p>\n\n<h1>\n<span id="問題点" class="fragment"></span><a href="#%E5%95%8F%E9%A1%8C%E7%82%B9"><i class="fa fa-link"></i></a>問題点</h1>\n\n<p>「とりあえず動くもの！」ということで前回はとりあえずif分岐をひたすらしていましたが流石にテストし難いです。</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="c1">/// 以下はイメージです</span>\n<span class="kd">func</span> <span class="nf">parse</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="p">){</span>\n  <span class="k">while</span><span class="p">(</span><span class="n">全文字探査するまで</span><span class="p">){</span>\n    <span class="k">if</span><span class="p">(</span><span class="kt">H1の場合</span><span class="p">){</span>\n    <span class="p">}</span>\n    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="kt">H2の場合</span><span class="p">){</span>\n    <span class="p">}</span>\n    <span class="c1">// 中略。無限にelse if...</span>\n    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nf">コードブロック</span><span class="p">(</span><span class="s">"```"</span><span class="p">)</span><span class="n">の場合</span><span class="p">){</span>\n    <span class="p">}</span>\n\n    <span class="mi">1</span><span class="n">文字進める</span><span class="err">、</span><span class="nf">または処理済みの所まで進める</span><span class="p">()</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n\n</code></pre></div></div>\n\n<h1>\n<span id="変更" class="fragment"></span><a href="#%E5%A4%89%E6%9B%B4"><i class="fa fa-link"></i></a>変更</h1>\n\n<p>Markdownの要素（<code># H1</code>や<code>**strong**</code>,...)ごとにシンプルなテストができるようにしたいです</p>\n\n<h3>\n<span id="markdown要素ごとの解析処理の分化" class="fragment"></span><a href="#markdown%E8%A6%81%E7%B4%A0%E3%81%94%E3%81%A8%E3%81%AE%E8%A7%A3%E6%9E%90%E5%87%A6%E7%90%86%E3%81%AE%E5%88%86%E5%8C%96"><i class="fa fa-link"></i></a>Markdown要素ごとの解析処理の分化</h3>\n\n<p><a href="https://qiita.com/sYamaz/items/1a29a2cb5b3207ad87dc">前回記事</a>で述べているように、この開発中のパッケージではMarkdownの各種要素をそれぞれインライン要素、ブロック要素とみなしています。それぞれの要素ごとにParserを作成するイメージでクラス分離していってます。</p>\n\n<p>（紫で塗りつぶされているのは<code>protocol</code>)</p>\n\n<p><a href="https://camo.qiitausercontent.com/35d3e18b9cd266404ce99a3b813a9c393d93a965/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323038383339392f66353931383463382d613436322d316337322d313666622d3435653837626638616333392e706e67" target="_blank" rel="nofollow noopener"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2Ff59184c8-a462-1c72-16fb-45e87bf8ac39.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8f853ab3c291b326b886075ecc064d09" alt="Untitled Diagram.drawio.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/f59184c8-a462-1c72-16fb-45e87bf8ac39.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2088399%2Ff59184c8-a462-1c72-16fb-45e87bf8ac39.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=38ea9016a1831ce46629de5c0efecf8f 1x" loading="lazy"></a></p>\n\n<p><code>BlockParserDelegate</code>も<code>InlineParserDelegate</code>もそれぞれ、解析結果のオブジェクトと、まだ解析していないMarkdown文字列を返します。</p>\n\n<h4>\n<span id="blockparserdelegate" class="fragment"></span><a href="#blockparserdelegate"><i class="fa fa-link"></i></a>BlockParserDelegate</h4>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">Foundation</span>\n<span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">BlockParserDelegate</span><span class="p">{</span>\n    <span class="kd">func</span> <span class="nf">parse</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">closure</span><span class="p">:(</span><span class="kt">String</span><span class="p">)</span><span class="o">-&gt;</span><span class="p">[</span><span class="kt">MDInline</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">nextText</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">node</span><span class="p">:</span><span class="kt">MDBlock</span><span class="p">?);</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<h4>\n<span id="inlineparserdelegate" class="fragment"></span><a href="#inlineparserdelegate"><i class="fa fa-link"></i></a>InlineParserDelegate</h4>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">Foundation</span>\n<span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">InlineParserDelegate</span><span class="p">{</span>\n    <span class="kd">func</span> <span class="nf">parse</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">nextText</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">node</span><span class="p">:</span><span class="kt">MDInline</span><span class="p">?)</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>このProtocolの実装クラス<code>StrongParser</code></p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">Foundation</span>\n<span class="kd">public</span> <span class="kd">class</span> <span class="kt">StrongParser</span><span class="p">:</span> <span class="kt">InlineParserDelegate</span>\n<span class="p">{</span>\n    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">parse</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">nextText</span><span class="p">:</span><span class="kt">String</span><span class="p">,</span> <span class="nv">node</span><span class="p">:</span><span class="kt">MDInline</span><span class="p">?){</span>\n        <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"**"</span><span class="p">)){</span>\n            <span class="c1">// scan</span>\n            <span class="k">let</span> <span class="nv">subStartIndex</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">text</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>\n            <span class="k">let</span> <span class="nv">subText</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">subStartIndex</span><span class="o">...</span><span class="p">]</span>\n            <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subText</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"**"</span><span class="p">){</span>\n                <span class="c1">// text between ** and **</span>\n                <span class="k">let</span> <span class="nv">content</span> <span class="o">=</span> <span class="n">subText</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]</span>\n\n                <span class="nf">return</span> <span class="p">(</span><span class="kt">String</span><span class="p">(</span><span class="n">subText</span><span class="p">[</span><span class="n">end</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]),</span> <span class="kt">MDStrong</span><span class="p">(</span><span class="kt">String</span><span class="p">(</span><span class="n">content</span><span class="p">)))</span>\n            <span class="p">}</span>\n        <span class="p">}</span>\n\n        <span class="nf">return</span> <span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p><code>StrongParser</code>では以下のようなイメージです</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="k">let</span> <span class="nv">parser</span> <span class="o">=</span> <span class="kt">StrongParser</span><span class="p">();</span>\n\n<span class="k">let</span> <span class="nv">result1</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="nf">parse</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="s">"**bold**text"</span><span class="p">)</span>\n\n<span class="c1">// result1.nextText -&gt; "text"</span>\n<span class="c1">// result1.node -&gt; MDStrong(text:"bold")</span>\n\n<span class="k">let</span> <span class="nv">result2</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="nf">parse</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="s">"texttext"</span><span class="p">)</span>\n\n<span class="c1">// result2.nextText -&gt; "texttext"</span>\n<span class="c1">// result2.node -&gt; nil</span>\n\n</code></pre></div></div>\n\n<h1>\n<span id="結果" class="fragment"></span><a href="#%E7%B5%90%E6%9E%9C"><i class="fa fa-link"></i></a>結果</h1>\n\n<p>この変更によってMarkdown要素ごとのテストが可能になりました。あとは呼び出し側のクラスがテスト済みのそれらをうまく使うだけです。</p>\n\n<hr>\n\n<p>今回の記事の内容を適用したまだまだ改善の余地が大きいMarkdown解析Githubリポジトリ</p>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/MarkdownAnalyzer"></qiita-embed-ogp></p>\n',body:'前回、[SwiftでMarkdownを解析してオブジェクトツリーに変換する](https://qiita.com/sYamaz/items/1a29a2cb5b3207ad87dc)という記事を作成しましたが、今回はその続きです。\n\n尚、前回記事で「レンダリングはしてくれるけどオブジェクトツリーにしてくれるパッケージあまりないな...」と言いましたが大抵のSwiftのMarkdownレンダリング系パッケージは\n\n`text`--\x3e`node tree`--\x3e`html`\n\nのような変換過程を辿っていることがわかりました。つまり今Tryしていることはいわゆる「車輪の再発明」ということです。勉強になるからいいかと割り切ってます\n\n# 問題点\n\n「とりあえず動くもの！」ということで前回はとりあえずif分岐をひたすらしていましたが流石にテストし難いです。\n\n```swift\n/// 以下はイメージです\nfunc parse(text:String){\n  while(全文字探査するまで){\n    if(H1の場合){\n    }\n    else if(H2の場合){\n    }\n    // 中略。無限にelse if...\n    else if(コードブロック("```")の場合){\n    }\n\n    1文字進める、または処理済みの所まで進める()\n  }\n}\n\n```\n\n# 変更\n\nMarkdownの要素（`# H1`や`**strong**`,...)ごとにシンプルなテストができるようにしたいです\n\n### Markdown要素ごとの解析処理の分化\n\n[前回記事](https://qiita.com/sYamaz/items/1a29a2cb5b3207ad87dc)で述べているように、この開発中のパッケージではMarkdownの各種要素をそれぞれインライン要素、ブロック要素とみなしています。それぞれの要素ごとにParserを作成するイメージでクラス分離していってます。\n\n（紫で塗りつぶされているのは`protocol`)\n\n\n![Untitled Diagram.drawio.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/f59184c8-a462-1c72-16fb-45e87bf8ac39.png)\n\n`BlockParserDelegate`も`InlineParserDelegate`もそれぞれ、解析結果のオブジェクトと、まだ解析していないMarkdown文字列を返します。\n\n#### BlockParserDelegate\n\n```swift\nimport Foundation\npublic protocol BlockParserDelegate{\n    func parse(_ text:String, closure:(String)->[MDInline]) -> (nextText:String, node:MDBlock?);\n}\n```\n\n#### InlineParserDelegate\n\n```swift\nimport Foundation\npublic protocol InlineParserDelegate{\n    func parse(text:String) -> (nextText:String, node:MDInline?)\n}\n```\n\nこのProtocolの実装クラス`StrongParser`\n\n```swift\nimport Foundation\npublic class StrongParser: InlineParserDelegate\n{\n    public func parse(text:String) -> (nextText:String, node:MDInline?){\n        if(text.starts(with: "**")){\n            // scan\n            let subStartIndex = text.index(text.startIndex, offsetBy: 2)\n            let subText = text[subStartIndex...]\n            if let end = subText.range(of: "**"){\n                // text between ** and **\n                let content = subText[..<end.lowerBound]\n                \n                return (String(subText[end.upperBound...]), MDStrong(String(content)))\n            }\n        }\n        \n        return (text, nil)\n    }\n}\n```\n\n`StrongParser`では以下のようなイメージです\n\n```swift\nlet parser = StrongParser();\n\nlet result1 = parser.parse(text: "**bold**text")\n\n// result1.nextText -> "text"\n// result1.node -> MDStrong(text:"bold")\n\nlet result2 = parser.parse(text: "texttext")\n\n// result2.nextText -> "texttext"\n// result2.node -> nil\n\n```\n\n# 結果\n\nこの変更によってMarkdown要素ごとのテストが可能になりました。あとは呼び出し側のクラスがテスト済みのそれらをうまく使うだけです。\n\n---\n\n今回の記事の内容を適用したまだまだ改善の余地が大きいMarkdown解析Githubリポジトリ\n\nhttps://github.com/sYamaz/MarkdownAnalyzer\n\n',coediting:!1,comments_count:0,created_at:"2021-10-03T22:30:32+09:00",group:"{ }",id:"31ef5374ad7c9a0dfde4",likes_count:0,private:!1,tags:[{},{},{},{}],title:"Swift：開発中のMarkdown解析パッケージをもう少しテストしやすくする",updated_at:"2021-10-03T22:30:32+09:00",url:"https://qiita.com/sYamaz/items/31ef5374ad7c9a0dfde4",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}},{rendered_body:'<p>Markdownをレンダリングしてくれるパッケージはあるけど、オブジェクトツリーにしてくれるものは無いなと思ったのでやってみてます。</p>\n\n<p>オブジェクトツリーに変換できるとコードからMarkdownを扱いやすくなるんじゃないかと思ってます。</p>\n\n<p>続きはこちら:<a href="https://qiita.com/sYamaz/items/31ef5374ad7c9a0dfde4" id="reference-20c42c7a0088ab39fd2d">Swift：開発中のMarkdown解析パッケージをもう少しテストしやすくする</a></p>\n\n<h1>\n<span id="環境" class="fragment"></span><a href="#%E7%92%B0%E5%A2%83"><i class="fa fa-link"></i></a>環境</h1>\n\n<ul>\n<li>Xcode 13</li>\n</ul>\n\n<h1>\n<span id="tryした解析の考え方" class="fragment"></span><a href="#try%E3%81%97%E3%81%9F%E8%A7%A3%E6%9E%90%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9"><i class="fa fa-link"></i></a>Tryした解析の考え方</h1>\n\n<p>Markdownの記法は以下の2つに分類できると考えました</p>\n\n<ul>\n<li>\n<code># h1</code>やリスト、引用文などの１行〜複数行の役割が決まる定義</li>\n<li>\n<code>**bold**</code>や<code>[name](link)</code>などの１行の中で繰り返し使用できる定義</li>\n</ul>\n\n<p>仮にこの記事では前者をブロック要素、後者をインライン要素と名付けると、ブロック要素の中にはインライン要素が含まれる可能性がありますが、逆のパターンは存在しません。（命名が意味不明だったらすみません）</p>\n\n<p>したがって、以下のサンプルMarkdownの構造をツリーとして表現すると次のような形になると考えます</p>\n\n<h5>\n<span id="サンプルmarkdown" class="fragment"></span><a href="#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%ABmarkdown"><i class="fa fa-link"></i></a>サンプルMarkdown</h5>\n\n<div class="code-frame" data-lang="markdown"><div class="highlight"><pre><code>\n<span class="gh"># Tryした解析の考え方</span>\n\nMarkdownの記法は以下の２つに分類できると考えました\n<span class="p">\n*</span> <span class="sb">`# h1`</span>やリスト、引用文などの１行〜複数行の役割が決まる定義\n<span class="p">*</span> <span class="sb">`**bold**`</span>や<span class="sb">`[name](link)`</span>などの１行の中で繰り返し使用できる定義\n\n仮にこの記事では前者をブロック要素、後者をインライン要素と名付けると、ブロック要素の中にはインライン要素が含まれる可能性がありますが、逆のパターンは存在しません。\n\n</code></pre></div></div>\n\n<h5>\n<span id="ツリー" class="fragment"></span><a href="#%E3%83%84%E3%83%AA%E3%83%BC"><i class="fa fa-link"></i></a>ツリー</h5>\n\n<ul>\n<li>\n<p>Markdownツリー</p>\n\n<ul>\n<li>ブロック要素 h1要素\n\n<ul>\n<li>インライン要素 テキスト「<code>Tryした解析の考え方</code>」</li>\n</ul>\n</li>\n<li>ブロック要素 段落要素\n\n<ul>\n<li>インライン要素 テキスト「<code>Markdownの記法は以下の２つに分類できると考えました</code>」</li>\n</ul>\n</li>\n<li>ブロック要素 リスト要素\n\n<ul>\n<li>ブロック要素 リスト項目要素\n\n<ul>\n<li>インライン要素 コード「<code># h1</code>」</li>\n<li>インライン要素 テキスト「<code>や、リスト、引用文などの1行〜複数行の役割が決まる定義</code>」</li>\n</ul>\n</li>\n<li>ブロック要素 リスト項目要素\n\n<ul>\n<li>インライン要素 太字「<code>bold</code>」</li>\n<li>インライン要素 テキスト「<code>や</code>」</li>\n<li>インライン要素 リンク「<code>[name](link)</code>」</li>\n<li>インライン要素 テキスト「<code>などの１行の中で繰り返し使用できる定義</code>」</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ブロック要素 段落要素\n\n<ul>\n<li>インライン要素 テキスト「<code>仮にこの記事では前者をブロック要素、後者をインライン要素と名付けると、ブロック要素の中にはインライン要素が含まれる可能性がありますが、逆のパターンは存在しません。</code>」</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id="結果" class="fragment"></span><a href="#%E7%B5%90%E6%9E%9C"><i class="fa fa-link"></i></a>結果</h1>\n\n<p>Swiftでこれらを表現した結果（一部不十分な実装あり）をGithubのリポジトリに作成しました。今後、バグ修正しつつPackageとして使えるようにしていこうと思ってます。</p>\n\n<p><qiita-embed-ogp src="https://github.com/sYamaz/MarkdownAnalyzer"></qiita-embed-ogp></p>\n\n<p>2021.9.26時点のコード。</p>\n\n<div class="code-frame" data-lang="swift"><div class="highlight"><pre><code><span class="kd">import</span> <span class="kt">Foundation</span>\n<span class="kd">import</span> <span class="kt">SwiftUI</span>\n\n<span class="kd">protocol</span> <span class="kt">MDNodeDelegate</span><span class="p">{}</span>\n\n<span class="kd">protocol</span> <span class="kt">MDBlockDelegate</span> <span class="p">:</span> <span class="kt">MDNodeDelegate</span><span class="p">{}</span>\n\n<span class="kd">protocol</span> <span class="kt">MDInlineDelegate</span> <span class="p">:</span> <span class="kt">MDNodeDelegate</span><span class="p">{}</span>\n\n<span class="kd">public</span> <span class="kd">class</span> <span class="kt">MarkdownAnalyzer</span>\n<span class="p">{</span>\n    <span class="kd">func</span> <span class="nf">parse</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDSyntaxTree</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="kt">MDBlockDelegate</span><span class="p">]()</span>\n        <span class="c1">// blockに分割する</span>\n        <span class="k">var</span> <span class="nv">ind</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">startIndex</span>\n        <span class="k">while</span><span class="p">(</span><span class="n">ind</span> <span class="o">!=</span> <span class="n">text</span><span class="o">.</span><span class="n">endIndex</span><span class="p">){</span>\n            <span class="k">var</span> <span class="nv">nextInd</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">after</span><span class="p">:</span> <span class="n">ind</span><span class="p">)</span>\n            <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"# "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline1</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span> <span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline1</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"## "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline2</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span> <span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline2</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"### "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline3</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline3</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"#### "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline4</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline4</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"##### "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline5</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline5</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"###### "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline6</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHeadline6</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"---</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"---</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHorizontalRule</span><span class="p">(</span><span class="s">"---</span><span class="se">\n\n</span><span class="s">"</span><span class="p">))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"===</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"===</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseHorizontalRule</span><span class="p">(</span><span class="s">"===</span><span class="se">\n\n</span><span class="s">"</span><span class="p">))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"```"</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"```"</span><span class="p">){</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">start</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"```</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n\n                        <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseCodeBlock</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">upperBound</span><span class="p">]))</span>\n                        <span class="n">nextInd</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                    <span class="p">}</span>\n                    <span class="k">else</span><span class="p">{</span>\n                        <span class="k">break</span><span class="p">;</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"- "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseUnorderedList</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseUnorderedList</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"* "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseUnorderedList</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseUnorderedList</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"+ "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseUnorderedList</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseUnorderedList</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"1. "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseOrderedList</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseOrderedList</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"&gt; "</span><span class="p">)){</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseBlockQuote</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseBlockQuote</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"|"</span><span class="p">)){</span>\n                <span class="c1">//table or paragragh</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"|</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseTable</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseParagragh</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span><span class="p">{</span> <span class="c1">// paragragh</span>\n                <span class="k">let</span> <span class="nv">blockSpan</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="n">blockSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">){</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseParagragh</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">r</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                    <span class="n">nextInd</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">upperBound</span>\n                <span class="p">}</span><span class="k">else</span><span class="p">{</span>\n                    <span class="n">blocks</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseParagragh</span><span class="p">(</span><span class="n">blockSpan</span><span class="p">))</span>\n                    <span class="k">break</span><span class="p">;</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n\n            <span class="n">ind</span> <span class="o">=</span> <span class="n">nextInd</span>\n        <span class="p">}</span>\n\n        <span class="k">let</span> <span class="nv">ret</span> <span class="o">=</span> <span class="kt">MDSyntaxTree</span><span class="p">(</span><span class="nv">blocks</span><span class="p">:</span> <span class="n">blocks</span><span class="p">)</span>\n        <span class="k">return</span> <span class="n">ret</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseHeadline1</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">text</span>\n        <span class="n">data</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">subString</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CharacterSet</span><span class="p">(</span><span class="nv">charactersIn</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>\n        <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">(</span><span class="n">subString</span><span class="p">))</span>\n        <span class="k">return</span> <span class="kt">MDHeading1</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseHeadline2</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">text</span>\n        <span class="n">data</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">subString</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CharacterSet</span><span class="p">(</span><span class="nv">charactersIn</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>\n        <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">(</span><span class="n">subString</span><span class="p">))</span>\n        <span class="k">return</span> <span class="kt">MDHeading2</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseHeadline3</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">text</span>\n        <span class="n">data</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">subString</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CharacterSet</span><span class="p">(</span><span class="nv">charactersIn</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>\n        <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">(</span><span class="n">subString</span><span class="p">))</span>\n\n        <span class="k">return</span> <span class="kt">MDHeading3</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseHeadline4</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">text</span>\n        <span class="n">data</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">subString</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CharacterSet</span><span class="p">(</span><span class="nv">charactersIn</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>\n        <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">(</span><span class="n">subString</span><span class="p">))</span>\n        <span class="k">return</span> <span class="kt">MDHeading4</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseHeadline5</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">text</span>\n        <span class="n">data</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">subString</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CharacterSet</span><span class="p">(</span><span class="nv">charactersIn</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>\n        <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">(</span><span class="n">subString</span><span class="p">))</span>\n        <span class="k">return</span> <span class="kt">MDHeading5</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseHeadline6</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">text</span>\n        <span class="n">data</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">subString</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CharacterSet</span><span class="p">(</span><span class="nv">charactersIn</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>\n        <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">(</span><span class="n">subString</span><span class="p">))</span>\n        <span class="k">return</span> <span class="kt">MDHeading6</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseParagragh</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>\n        <span class="k">return</span> <span class="kt">MDParagraph</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">)</span>\n    <span class="p">}</span>\n\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseUnorderedList</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">items</span><span class="p">:[</span><span class="kt">MDUnorderedListItem</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="kt">MDUnorderedListItem</span><span class="p">]()</span>\n        <span class="k">var</span> <span class="nv">span</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">text</span><span class="o">.</span><span class="n">startIndex</span><span class="o">...</span><span class="p">]</span>\n        <span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>\n            <span class="k">if</span> <span class="k">let</span> <span class="nv">endofLine</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">){</span>\n                <span class="k">let</span> <span class="nv">line</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">span</span><span class="o">.</span><span class="n">startIndex</span><span class="o">..&lt;</span><span class="n">endofLine</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]</span>\n                <span class="k">var</span> <span class="nv">lineTxt</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>\n                <span class="n">lineTxt</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>\n                <span class="k">if</span><span class="p">(</span><span class="n">lineTxt</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>\n                    <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">(</span><span class="n">lineTxt</span><span class="p">))</span>\n                    <span class="n">items</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">MDUnorderedListItem</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">,</span> <span class="nv">children</span><span class="p">:</span> <span class="p">[</span><span class="kt">MDUnorderedListItem</span><span class="p">]()))</span>\n                <span class="p">}</span>\n                <span class="n">span</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">endofLine</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n                <span class="k">break</span>\n            <span class="p">}</span>\n        <span class="p">}</span>\n\n        <span class="k">return</span> <span class="kt">MDUnorderedList</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="n">items</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseOrderedList</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">items</span><span class="p">:[</span><span class="kt">MDOrderedListItem</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="kt">MDOrderedListItem</span><span class="p">]()</span>\n        <span class="k">var</span> <span class="nv">span</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">text</span><span class="o">.</span><span class="n">startIndex</span><span class="o">...</span><span class="p">]</span>\n        <span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>\n            <span class="k">if</span> <span class="k">let</span> <span class="nv">endofLine</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">){</span>\n                <span class="k">let</span> <span class="nv">line</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">span</span><span class="o">.</span><span class="n">startIndex</span><span class="o">..&lt;</span><span class="n">endofLine</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]</span>\n                <span class="k">var</span> <span class="nv">lineTxt</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>\n                <span class="n">lineTxt</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>\n                <span class="k">if</span><span class="p">(</span><span class="n">lineTxt</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>\n                    <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">(</span><span class="n">lineTxt</span><span class="p">))</span>\n                    <span class="n">items</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="kt">MDOrderedListItem</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">,</span> <span class="nv">children</span><span class="p">:</span> <span class="p">[</span><span class="kt">MDOrderedListItem</span><span class="p">]()))</span>\n                <span class="p">}</span>\n                <span class="n">span</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">endofLine</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n                <span class="k">break</span>\n            <span class="p">}</span>\n        <span class="p">}</span>\n\n        <span class="k">return</span> <span class="kt">MDOrderedList</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="n">items</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseCodeBlock</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">text</span>\n        <span class="n">data</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">id</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span><span class="o">!</span>\n\n        <span class="k">let</span> <span class="nv">langName</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">id</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]</span>\n\n        <span class="k">let</span> <span class="nv">content</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">id</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n        <span class="k">var</span> <span class="nv">contentText</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CharacterSet</span><span class="p">(</span><span class="nv">charactersIn</span><span class="p">:</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">))</span>\n        <span class="n">contentText</span><span class="o">.</span><span class="nf">removeLast</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>\n\n        <span class="k">return</span> <span class="kt">MDCodeBlock</span><span class="p">(</span><span class="nv">lang</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">langName</span><span class="p">),</span> <span class="nv">multilineText</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">contentText</span><span class="p">))</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseBlockQuote</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">MDBlockQuote</span><span class="p">(</span><span class="nv">multilineText</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseTable</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n        <span class="k">let</span> <span class="nv">lines</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>\n        <span class="k">if</span><span class="p">(</span><span class="n">lines</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">){</span>\n            <span class="k">return</span> <span class="nf">parseParagragh</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>\n        <span class="p">}</span>\n\n        <span class="k">let</span> <span class="nv">headlineRow</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>\n        <span class="k">let</span> <span class="nv">headlineCellTexts</span> <span class="o">=</span> <span class="n">headlineRow</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">"|"</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">headlineCells</span> <span class="o">=</span> <span class="n">headlineCellTexts</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="n">txt</span> <span class="k">in</span> <span class="kt">MDTableCell</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="n">txt</span><span class="p">))}</span>\n\n        <span class="k">let</span> <span class="nv">configRow</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>\n        <span class="k">let</span> <span class="nv">configTexts</span>  <span class="o">=</span> <span class="n">configRow</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">"|"</span><span class="p">)</span>\n        <span class="k">let</span> <span class="nv">configs</span><span class="p">:[</span><span class="kt">MDTableColConfig</span><span class="p">]</span> <span class="o">=</span> <span class="n">configTexts</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="n">c</span> <span class="k">in</span>\n            <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">c</span><span class="o">.</span><span class="n">startIndex</span><span class="p">]</span> <span class="o">==</span> <span class="s">":"</span><span class="p">){</span>\n                <span class="k">return</span> <span class="kt">MDTableColConfig</span><span class="o">.</span><span class="n">leading</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">c</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">before</span><span class="p">:</span> <span class="n">c</span><span class="o">.</span><span class="n">endIndex</span><span class="p">)]</span> <span class="o">==</span> <span class="s">":"</span><span class="p">){</span>\n                <span class="k">return</span> <span class="kt">MDTableColConfig</span><span class="o">.</span><span class="n">trailing</span>\n            <span class="p">}</span>\n            <span class="k">else</span><span class="p">{</span>\n                <span class="k">return</span> <span class="kt">MDTableColConfig</span><span class="o">.</span><span class="n">center</span>\n            <span class="p">}</span>\n        <span class="p">}</span>\n\n        <span class="k">let</span> <span class="nv">dataRows</span><span class="p">:[</span><span class="kt">MDTableRow</span><span class="p">]</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="mi">2</span><span class="o">...</span><span class="p">]</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="n">line</span> <span class="k">in</span>\n            <span class="k">return</span> <span class="kt">MDTableRow</span><span class="p">(</span><span class="nv">cells</span><span class="p">:</span> <span class="n">line</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">"|"</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="n">c</span> <span class="k">in</span>\n                <span class="k">let</span> <span class="nv">inlines</span> <span class="o">=</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>\n                <span class="k">return</span> <span class="kt">MDTableCell</span><span class="p">(</span><span class="nv">inlines</span><span class="p">:</span> <span class="n">inlines</span><span class="p">)</span>\n            <span class="p">})</span>\n        <span class="p">}</span>\n\n        <span class="k">return</span> <span class="kt">MDTable</span><span class="p">(</span><span class="nv">headline</span><span class="p">:</span> <span class="kt">MDTableHeader</span><span class="p">(</span><span class="nv">cells</span><span class="p">:</span> <span class="n">headlineCells</span><span class="p">),</span> <span class="nv">colconfigs</span><span class="p">:</span> <span class="kt">MDTableColConfigs</span><span class="p">(</span><span class="nv">colconfigs</span><span class="p">:</span> <span class="n">configs</span><span class="p">),</span> <span class="nv">rows</span><span class="p">:</span> <span class="n">dataRows</span><span class="p">)</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseHorizontalRule</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDHorizontalRule</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">MDHorizontalRule</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>\n    <span class="p">}</span>\n\n\n    <span class="kd">internal</span> <span class="kd">func</span> <span class="nf">parseInlineData</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">MDInlineDelegate</span><span class="p">]{</span>\n        <span class="k">var</span> <span class="nv">ind</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">startIndex</span>\n        <span class="k">var</span> <span class="nv">ret</span> <span class="o">=</span> <span class="p">[</span><span class="kt">MDInlineDelegate</span><span class="p">]()</span>\n        <span class="k">var</span> <span class="nv">txtBuffer</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Character</span><span class="p">]()</span>\n        <span class="k">while</span><span class="p">(</span><span class="n">ind</span> <span class="o">!=</span> <span class="n">text</span><span class="o">.</span><span class="n">endIndex</span><span class="p">){</span>\n            <span class="k">let</span> <span class="nv">nextInd</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">after</span><span class="p">:</span> <span class="n">ind</span><span class="p">)</span>\n            <span class="k">let</span> <span class="nv">span</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="o">...</span><span class="p">]</span>\n            <span class="k">if</span><span class="p">(</span><span class="n">span</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"**"</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"**"</span><span class="p">){</span>\n                    <span class="k">let</span> <span class="nv">subSpan</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">start</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"**"</span><span class="p">){</span>\n                        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n                            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n                            <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">()</span>\n                        <span class="p">}</span>\n                        <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseBold</span><span class="p">(</span><span class="n">subSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                        <span class="n">ind</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                        <span class="k">continue</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">span</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"__"</span><span class="p">)){</span>\n\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"__"</span><span class="p">){</span>\n                    <span class="k">let</span> <span class="nv">subSpan</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">start</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"__"</span><span class="p">){</span>\n                        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n                            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n                            <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">()</span>\n                        <span class="p">}</span>\n                        <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseBold</span><span class="p">(</span><span class="n">subSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                        <span class="n">ind</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                        <span class="k">continue</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">span</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"*"</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"*"</span><span class="p">){</span>\n                    <span class="k">let</span> <span class="nv">subSpan</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">start</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"*"</span><span class="p">){</span>\n                        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n                            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n                            <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">()</span>\n                        <span class="p">}</span>\n                        <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseItalic</span><span class="p">(</span><span class="n">subSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                        <span class="n">ind</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                        <span class="k">continue</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">span</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"_"</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"_"</span><span class="p">){</span>\n                    <span class="k">let</span> <span class="nv">subSpan</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">start</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"_"</span><span class="p">){</span>\n                        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n                            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n                            <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">()</span>\n                        <span class="p">}</span>\n                        <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseItalic</span><span class="p">(</span><span class="n">subSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                        <span class="n">ind</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                        <span class="k">continue</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">span</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"~~"</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"~~"</span><span class="p">){</span>\n                    <span class="k">let</span> <span class="nv">subSpan</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">start</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"~~"</span><span class="p">){</span>\n                        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n                            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n                            <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">()</span>\n                        <span class="p">}</span>\n                        <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseStrikethrough</span><span class="p">(</span><span class="n">subSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                        <span class="n">ind</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                        <span class="k">continue</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">span</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"`"</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"`"</span><span class="p">){</span>\n                    <span class="k">let</span> <span class="nv">subSpan</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">start</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"`"</span><span class="p">){</span>\n                        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n                            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n                            <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">()</span>\n                        <span class="p">}</span>\n                        <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseInlineCode</span><span class="p">(</span><span class="n">subSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                        <span class="n">ind</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                        <span class="k">continue</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">span</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"["</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">nameStart</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"]("</span><span class="p">){</span>\n                    <span class="k">var</span> <span class="nv">display</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">nameStart</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]</span>\n                    <span class="n">display</span> <span class="o">=</span> <span class="n">display</span><span class="p">[</span><span class="n">display</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">after</span><span class="p">:</span> <span class="n">display</span><span class="o">.</span><span class="n">startIndex</span><span class="p">)</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">let</span> <span class="nv">subSpan</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">nameStart</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">")"</span><span class="p">){</span>\n                        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n                            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n                            <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">()</span>\n                        <span class="p">}</span>\n                        <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseLink</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">subSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                        <span class="n">ind</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                        <span class="k">continue</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">span</span><span class="o">.</span><span class="nf">starts</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="s">"!["</span><span class="p">)){</span>\n                <span class="k">if</span> <span class="k">let</span> <span class="nv">nameStart</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"]("</span><span class="p">){</span>\n                    <span class="k">var</span> <span class="nv">display</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">nameStart</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]</span>\n                    <span class="n">display</span> <span class="o">=</span> <span class="n">display</span><span class="p">[</span><span class="n">display</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">after</span><span class="p">:</span> <span class="n">display</span><span class="o">.</span><span class="n">startIndex</span><span class="p">)</span><span class="o">...</span><span class="p">]</span>\n                    <span class="n">display</span> <span class="o">=</span> <span class="n">display</span><span class="p">[</span><span class="n">display</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">after</span><span class="p">:</span> <span class="n">display</span><span class="o">.</span><span class="n">startIndex</span><span class="p">)</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">let</span> <span class="nv">subSpan</span> <span class="o">=</span> <span class="n">span</span><span class="p">[</span><span class="n">nameStart</span><span class="o">.</span><span class="n">upperBound</span><span class="o">...</span><span class="p">]</span>\n                    <span class="k">if</span> <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="n">subSpan</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">")"</span><span class="p">){</span>\n                        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n                            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n                            <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">()</span>\n                        <span class="p">}</span>\n                        <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseImage</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">subSpan</span><span class="p">[</span><span class="o">..&lt;</span><span class="n">end</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">]))</span>\n                        <span class="n">ind</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">upperBound</span>\n                        <span class="k">continue</span>\n                    <span class="p">}</span>\n                <span class="p">}</span>\n            <span class="p">}</span>\n            <span class="k">else</span><span class="p">{</span>\n                <span class="n">txtBuffer</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">ind</span><span class="p">])</span>\n            <span class="p">}</span>\n\n            <span class="n">ind</span> <span class="o">=</span> <span class="n">nextInd</span>\n        <span class="p">}</span>\n        <span class="k">if</span><span class="p">(</span><span class="n">txtBuffer</span><span class="o">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>\n            <span class="n">ret</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">parseText</span><span class="p">(</span><span class="n">txtBuffer</span><span class="p">))</span>\n        <span class="p">}</span>\n        <span class="k">return</span> <span class="n">ret</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseBold</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDBold</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">MDBold</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseInlineCode</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDInlineCode</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">MDInlineCode</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseItalic</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDItalic</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">MDItalic</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseStrikethrough</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDStrikethrough</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">MDStrikethrough</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseLink</span><span class="p">(</span><span class="n">_</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">,</span> <span class="n">_</span> <span class="nv">address</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDLink</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">MDLink</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="nv">source</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">address</span><span class="p">))</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseImage</span><span class="p">(</span><span class="n">_</span> <span class="nv">name</span><span class="p">:</span><span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">,</span> <span class="n">_</span> <span class="nv">address</span><span class="p">:</span> <span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MDImage</span><span class="p">{</span>\n        <span class="k">return</span> <span class="kt">MDImage</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span><span class="kt">String</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="nv">source</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="n">address</span><span class="p">))</span>\n    <span class="p">}</span>\n\n    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">parseText</span><span class="p">(</span><span class="n">_</span> <span class="nv">text</span><span class="p">:[</span><span class="kt">Character</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">MDText</span><span class="p">{</span>\n        <span class="k">let</span> <span class="nv">txt</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>\n        <span class="k">return</span> <span class="kt">MDText</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="n">txt</span><span class="p">)</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDSyntaxTree</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">blocks</span><span class="p">:[</span><span class="kt">MDBlockDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDBold</span><span class="p">:</span> <span class="kt">MDInlineDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDStrikethrough</span><span class="p">:</span> <span class="kt">MDInlineDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDItalic</span><span class="p">:</span><span class="kt">MDInlineDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDLink</span><span class="p">:</span> <span class="kt">MDInlineDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span><span class="kt">String</span>\n    <span class="k">var</span> <span class="nv">source</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDImage</span><span class="p">:</span> <span class="kt">MDInlineDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span><span class="kt">String</span>\n    <span class="k">var</span> <span class="nv">source</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDInlineCode</span> <span class="p">:</span> <span class="kt">MDInlineDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDText</span><span class="p">:</span> <span class="kt">MDInlineDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">text</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDHeading1</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDHeading2</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDHeading3</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDHeading4</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDHeading5</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDHeading6</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDParagraph</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDUnorderedList</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">items</span><span class="p">:[</span><span class="kt">MDUnorderedListItem</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDUnorderedListItem</span>\n<span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n    <span class="k">var</span> <span class="nv">children</span><span class="p">:[</span><span class="kt">MDUnorderedListItem</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDOrderedList</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">items</span><span class="p">:[</span><span class="kt">MDOrderedListItem</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDOrderedListItem</span>\n<span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n    <span class="k">var</span> <span class="nv">children</span><span class="p">:[</span><span class="kt">MDOrderedListItem</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDCodeBlock</span> <span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">lang</span><span class="p">:</span><span class="kt">String</span>\n    <span class="k">var</span> <span class="nv">multilineText</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDHorizontalRule</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n\n    <span class="k">var</span> <span class="nv">data</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDBlockQuote</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n\n    <span class="k">var</span> <span class="nv">multilineText</span><span class="p">:</span><span class="kt">String</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDTable</span><span class="p">:</span> <span class="kt">MDBlockDelegate</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">headline</span><span class="p">:</span><span class="kt">MDTableHeader</span>\n    <span class="k">var</span> <span class="nv">colconfigs</span><span class="p">:</span><span class="kt">MDTableColConfigs</span>\n    <span class="k">var</span> <span class="nv">rows</span><span class="p">:[</span><span class="kt">MDTableRow</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDTableHeader</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">cells</span><span class="p">:[</span><span class="kt">MDTableCell</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDTableCell</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">inlines</span><span class="p">:[</span><span class="kt">MDInlineDelegate</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDTableColConfigs</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">colconfigs</span><span class="p">:[</span><span class="kt">MDTableColConfig</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">enum</span> <span class="kt">MDTableColConfig</span><span class="p">{</span>\n    <span class="k">case</span> <span class="n">leading</span>\n    <span class="k">case</span> <span class="n">trailing</span>\n    <span class="k">case</span> <span class="n">center</span>\n<span class="p">}</span>\n\n<span class="kd">struct</span> <span class="kt">MDTableRow</span><span class="p">{</span>\n    <span class="k">var</span> <span class="nv">cells</span><span class="p">:[</span><span class="kt">MDTableCell</span><span class="p">]</span>\n<span class="p">}</span>\n</code></pre></div></div>\n',body:'Markdownをレンダリングしてくれるパッケージはあるけど、オブジェクトツリーにしてくれるものは無いなと思ったのでやってみてます。\n\nオブジェクトツリーに変換できるとコードからMarkdownを扱いやすくなるんじゃないかと思ってます。\n\n\n続きはこちら:[Swift：開発中のMarkdown解析パッケージをもう少しテストしやすくする](https://qiita.com/sYamaz/items/31ef5374ad7c9a0dfde4)\n\n# 環境\n\n* Xcode 13\n\n# Tryした解析の考え方\n\nMarkdownの記法は以下の2つに分類できると考えました\n\n* `# h1`やリスト、引用文などの１行〜複数行の役割が決まる定義\n* `**bold**`や`[name](link)`などの１行の中で繰り返し使用できる定義\n\n仮にこの記事では前者をブロック要素、後者をインライン要素と名付けると、ブロック要素の中にはインライン要素が含まれる可能性がありますが、逆のパターンは存在しません。（命名が意味不明だったらすみません）\n\nしたがって、以下のサンプルMarkdownの構造をツリーとして表現すると次のような形になると考えます\n\n##### サンプルMarkdown\n\n``` markdown\n\n# Tryした解析の考え方\n\nMarkdownの記法は以下の２つに分類できると考えました\n\n* `# h1`やリスト、引用文などの１行〜複数行の役割が決まる定義\n* `**bold**`や`[name](link)`などの１行の中で繰り返し使用できる定義\n\n仮にこの記事では前者をブロック要素、後者をインライン要素と名付けると、ブロック要素の中にはインライン要素が含まれる可能性がありますが、逆のパターンは存在しません。\n\n```\n\n##### ツリー\n\n* Markdownツリー\n  * ブロック要素 h1要素\n     * インライン要素 テキスト「`Tryした解析の考え方`」\n  * ブロック要素 段落要素\n     * インライン要素 テキスト「`Markdownの記法は以下の２つに分類できると考えました`」\n  * ブロック要素 リスト要素\n     * ブロック要素 リスト項目要素\n         * インライン要素 コード「`# h1`」\n         * インライン要素 テキスト「`や、リスト、引用文などの1行〜複数行の役割が決まる定義`」\n     * ブロック要素 リスト項目要素\n         * インライン要素 太字「`bold`」\n         * インライン要素 テキスト「`や`」\n         * インライン要素 リンク「`[name](link)`」\n         * インライン要素 テキスト「`などの１行の中で繰り返し使用できる定義`」\n\n  * ブロック要素 段落要素\n     * インライン要素 テキスト「`仮にこの記事では前者をブロック要素、後者をインライン要素と名付けると、ブロック要素の中にはインライン要素が含まれる可能性がありますが、逆のパターンは存在しません。`」\n\n# 結果\n\nSwiftでこれらを表現した結果（一部不十分な実装あり）をGithubのリポジトリに作成しました。今後、バグ修正しつつPackageとして使えるようにしていこうと思ってます。\n\nhttps://github.com/sYamaz/MarkdownAnalyzer\n\n2021.9.26時点のコード。\n\n``` swift\nimport Foundation\nimport SwiftUI\n\nprotocol MDNodeDelegate{}\n\nprotocol MDBlockDelegate : MDNodeDelegate{}\n\nprotocol MDInlineDelegate : MDNodeDelegate{}\n\npublic class MarkdownAnalyzer\n{\n    func parse(_ text: String) -> MDSyntaxTree{\n        var blocks = [MDBlockDelegate]()\n        // blockに分割する\n        var ind = text.startIndex\n        while(ind != text.endIndex){\n            var nextInd = text.index(after: ind)\n            if(text[ind...].starts(with: "# ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseHeadline1(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                } else{\n                    blocks.append(parseHeadline1(blockSpan))\n                    break\n                }\n            }\n            else if(text[ind...].starts(with: "## ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseHeadline2(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                } else{\n                    blocks.append(parseHeadline2(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "### ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseHeadline3(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseHeadline3(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "#### ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseHeadline4(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseHeadline4(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "##### ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseHeadline5(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseHeadline5(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "###### ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseHeadline6(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseHeadline6(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "---\n\n")){\n                if let r = text[ind...].range(of: "---\n\n"){\n                    blocks.append(parseHorizontalRule("---\n\n"))\n                    nextInd = r.upperBound\n                }\n            }\n            else if(text[ind...].starts(with: "===\n\n")){\n                if let r = text[ind...].range(of: "===\n\n"){\n                    blocks.append(parseHorizontalRule("===\n\n"))\n                    nextInd = r.upperBound\n                }\n            }\n            else if(text[ind...].starts(with: "```")){\n                if let start = text[ind...].range(of: "```"){\n                    if let end = text[start.upperBound...].range(of: "```\n\n"){\n                        \n                        blocks.append(parseCodeBlock(text[ind..<end.upperBound]))\n                        nextInd = end.upperBound\n                    }\n                    else{\n                        break;\n                    }\n                }\n            }\n            else if(text[ind...].starts(with: "- ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseUnorderedList(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseUnorderedList(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "* ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseUnorderedList(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseUnorderedList(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "+ ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseUnorderedList(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseUnorderedList(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "1. ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseOrderedList(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseOrderedList(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "> ")){\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseBlockQuote(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseBlockQuote(blockSpan))\n                    break;\n                }\n            }\n            else if(text[ind...].starts(with: "|")){\n                //table or paragragh\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "|\n\n"){\n                    \n                    blocks.append(parseTable(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseParagragh(blockSpan))\n                    break\n                }\n            }\n            else{ // paragragh\n                let blockSpan = text[ind...]\n                if let r = blockSpan.range(of: "\n\n"){\n                    blocks.append(parseParagragh(blockSpan[..<r.lowerBound]))\n                    nextInd = r.upperBound\n                }else{\n                    blocks.append(parseParagragh(blockSpan))\n                    break;\n                }\n            }\n            \n            ind = nextInd\n        }\n        \n        let ret = MDSyntaxTree(blocks: blocks)\n        return ret\n    }\n    \n    private func parseHeadline1(_ text:String.SubSequence) -> MDBlockDelegate{\n        var data = text\n        data.removeFirst(1)\n        let subString = data.trimmingCharacters(in: CharacterSet(charactersIn: " "))\n        let inlines = parseInlineData(String.SubSequence(subString))\n        return MDHeading1(inlines: inlines)\n    }\n    \n    private func parseHeadline2(_ text:String.SubSequence) -> MDBlockDelegate{\n        var data = text\n        data.removeFirst(2)\n        let subString = data.trimmingCharacters(in: CharacterSet(charactersIn: " "))\n        let inlines = parseInlineData(String.SubSequence(subString))\n        return MDHeading2(inlines: inlines)\n    }\n    \n    private func parseHeadline3(_ text:String.SubSequence) -> MDBlockDelegate{\n        var data = text\n        data.removeFirst(3)\n        let subString = data.trimmingCharacters(in: CharacterSet(charactersIn: " "))\n        let inlines = parseInlineData(String.SubSequence(subString))\n        \n        return MDHeading3(inlines: inlines)\n    }\n    \n    private func parseHeadline4(_ text:String.SubSequence) -> MDBlockDelegate{\n        var data = text\n        data.removeFirst(4)\n        let subString = data.trimmingCharacters(in: CharacterSet(charactersIn: " "))\n        let inlines = parseInlineData(String.SubSequence(subString))\n        return MDHeading4(inlines: inlines)\n    }\n    \n    private func parseHeadline5(_ text:String.SubSequence) -> MDBlockDelegate{\n        var data = text\n        data.removeFirst(5)\n        let subString = data.trimmingCharacters(in: CharacterSet(charactersIn: " "))\n        let inlines = parseInlineData(String.SubSequence(subString))\n        return MDHeading5(inlines: inlines)\n    }\n    \n    private func parseHeadline6(_ text:String.SubSequence) -> MDBlockDelegate{\n        var data = text\n        data.removeFirst(6)\n        let subString = data.trimmingCharacters(in: CharacterSet(charactersIn: " "))\n        let inlines = parseInlineData(String.SubSequence(subString))\n        return MDHeading6(inlines: inlines)\n    }\n    \n    private func parseParagragh(_ text:String.SubSequence) -> MDBlockDelegate{\n        let inlines = parseInlineData(text)\n        return MDParagraph(inlines: inlines)\n    }\n    \n    \n    private func parseUnorderedList(_ text:String.SubSequence) -> MDBlockDelegate{\n        var items:[MDUnorderedListItem] = [MDUnorderedListItem]()\n        var span = text[text.startIndex...]\n        while(true){\n            if let endofLine = span.range(of: "\n"){\n                let line = span[span.startIndex..<endofLine.lowerBound]\n                var lineTxt = String(line)\n                lineTxt.removeFirst(2)\n                if(lineTxt.count > 0){\n                    let inlines = parseInlineData(String.SubSequence(lineTxt))\n                    items.append(MDUnorderedListItem(inlines: inlines, children: [MDUnorderedListItem]()))\n                }\n                span = span[endofLine.upperBound...]\n            } else {\n                break\n            }\n        }\n        \n        return MDUnorderedList(items: items)\n    }\n    \n    private func parseOrderedList(_ text:String.SubSequence) -> MDBlockDelegate{\n        var items:[MDOrderedListItem] = [MDOrderedListItem]()\n        var span = text[text.startIndex...]\n        while(true){\n            if let endofLine = span.range(of: "\n"){\n                let line = span[span.startIndex..<endofLine.lowerBound]\n                var lineTxt = String(line)\n                lineTxt.removeFirst(2)\n                if(lineTxt.count > 0){\n                    let inlines = parseInlineData(String.SubSequence(lineTxt))\n                    items.append(MDOrderedListItem(inlines: inlines, children: [MDOrderedListItem]()))\n                }\n                span = span[endofLine.upperBound...]\n            } else {\n                break\n            }\n        }\n        \n        return MDOrderedList(items: items)\n    }\n    \n    private func parseCodeBlock(_ text:String.SubSequence) -> MDBlockDelegate{\n        var data = text\n        data.removeFirst(3)\n        let id = data.range(of: "\n")!\n        \n        let langName = data[..<id.lowerBound]\n        \n        let content = data[id.upperBound...]\n        var contentText = content.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))\n        contentText.removeLast(3)\n        \n        return MDCodeBlock(lang: String(langName), multilineText: String(contentText))\n    }\n    \n    private func parseBlockQuote(_ text:String.SubSequence) -> MDBlockDelegate{\n        return MDBlockQuote(multilineText: String(text))\n    }\n    \n    private func parseTable(_ text: String.SubSequence) -> MDBlockDelegate{\n        let lines = text.split(separator: "\n")\n        if(lines.count < 3){\n            return parseParagragh(text)\n        }\n        \n        let headlineRow = lines[0]\n        let headlineCellTexts = headlineRow.split(separator: "|")\n        let headlineCells = headlineCellTexts.map{txt in MDTableCell(inlines: parseInlineData(txt))}\n        \n        let configRow = lines[1]\n        let configTexts  = configRow.split(separator: "|")\n        let configs:[MDTableColConfig] = configTexts.map{c in\n            if(c[c.startIndex] == ":"){\n                return MDTableColConfig.leading\n            }\n            else if(c[c.index(before: c.endIndex)] == ":"){\n                return MDTableColConfig.trailing\n            }\n            else{\n                return MDTableColConfig.center\n            }\n        }\n        \n        let dataRows:[MDTableRow] = lines[2...].map{line in\n            return MDTableRow(cells: line.split(separator: "|").map{c in\n                let inlines = parseInlineData(c)\n                return MDTableCell(inlines: inlines)\n            })\n        }\n        \n        return MDTable(headline: MDTableHeader(cells: headlineCells), colconfigs: MDTableColConfigs(colconfigs: configs), rows: dataRows)\n    }\n    \n    private func parseHorizontalRule(_ text:String.SubSequence) -> MDHorizontalRule{\n        return MDHorizontalRule(data: String(text))\n    }\n    \n    \n    internal func parseInlineData(_ text:String.SubSequence) -> [MDInlineDelegate]{\n        var ind = text.startIndex\n        var ret = [MDInlineDelegate]()\n        var txtBuffer = [Character]()\n        while(ind != text.endIndex){\n            let nextInd = text.index(after: ind)\n            let span = text[ind...]\n            if(span.starts(with: "**")){\n                if let start = span.range(of: "**"){\n                    let subSpan = span[start.upperBound...]\n                    if let end = subSpan.range(of: "**"){\n                        if(txtBuffer.count != 0){\n                            ret.append(parseText(txtBuffer))\n                            txtBuffer.removeAll()\n                        }\n                        ret.append(parseBold(subSpan[..<end.lowerBound]))\n                        ind = end.upperBound\n                        continue\n                    }\n                }\n            }\n            else if(span.starts(with: "__")){\n                \n                if let start = span.range(of: "__"){\n                    let subSpan = span[start.upperBound...]\n                    if let end = subSpan.range(of: "__"){\n                        if(txtBuffer.count != 0){\n                            ret.append(parseText(txtBuffer))\n                            txtBuffer.removeAll()\n                        }\n                        ret.append(parseBold(subSpan[..<end.lowerBound]))\n                        ind = end.upperBound\n                        continue\n                    }\n                }\n            }\n            else if(span.starts(with: "*")){\n                if let start = span.range(of: "*"){\n                    let subSpan = span[start.upperBound...]\n                    if let end = subSpan.range(of: "*"){\n                        if(txtBuffer.count != 0){\n                            ret.append(parseText(txtBuffer))\n                            txtBuffer.removeAll()\n                        }\n                        ret.append(parseItalic(subSpan[..<end.lowerBound]))\n                        ind = end.upperBound\n                        continue\n                    }\n                }\n            }\n            else if(span.starts(with: "_")){\n                if let start = span.range(of: "_"){\n                    let subSpan = span[start.upperBound...]\n                    if let end = subSpan.range(of: "_"){\n                        if(txtBuffer.count != 0){\n                            ret.append(parseText(txtBuffer))\n                            txtBuffer.removeAll()\n                        }\n                        ret.append(parseItalic(subSpan[..<end.lowerBound]))\n                        ind = end.upperBound\n                        continue\n                    }\n                }\n            }\n            else if(span.starts(with: "~~")){\n                if let start = span.range(of: "~~"){\n                    let subSpan = span[start.upperBound...]\n                    if let end = subSpan.range(of: "~~"){\n                        if(txtBuffer.count != 0){\n                            ret.append(parseText(txtBuffer))\n                            txtBuffer.removeAll()\n                        }\n                        ret.append(parseStrikethrough(subSpan[..<end.lowerBound]))\n                        ind = end.upperBound\n                        continue\n                    }\n                }\n            }\n            else if(span.starts(with: "`")){\n                if let start = span.range(of: "`"){\n                    let subSpan = span[start.upperBound...]\n                    if let end = subSpan.range(of: "`"){\n                        if(txtBuffer.count != 0){\n                            ret.append(parseText(txtBuffer))\n                            txtBuffer.removeAll()\n                        }\n                        ret.append(parseInlineCode(subSpan[..<end.lowerBound]))\n                        ind = end.upperBound\n                        continue\n                    }\n                }\n            }\n            else if(span.starts(with: "[")){\n                if let nameStart = span.range(of: "]("){\n                    var display = span[..<nameStart.lowerBound]\n                    display = display[display.index(after: display.startIndex)...]\n                    let subSpan = span[nameStart.upperBound...]\n                    if let end = subSpan.range(of: ")"){\n                        if(txtBuffer.count != 0){\n                            ret.append(parseText(txtBuffer))\n                            txtBuffer.removeAll()\n                        }\n                        ret.append(parseLink(display, subSpan[..<end.lowerBound]))\n                        ind = end.upperBound\n                        continue\n                    }\n                }\n            }\n            else if(span.starts(with: "![")){\n                if let nameStart = span.range(of: "]("){\n                    var display = span[..<nameStart.lowerBound]\n                    display = display[display.index(after: display.startIndex)...]\n                    display = display[display.index(after: display.startIndex)...]\n                    let subSpan = span[nameStart.upperBound...]\n                    if let end = subSpan.range(of: ")"){\n                        if(txtBuffer.count != 0){\n                            ret.append(parseText(txtBuffer))\n                            txtBuffer.removeAll()\n                        }\n                        ret.append(parseImage(display, subSpan[..<end.lowerBound]))\n                        ind = end.upperBound\n                        continue\n                    }\n                }\n            }\n            else{\n                txtBuffer.append(text[ind])\n            }\n            \n            ind = nextInd\n        }\n        if(txtBuffer.count != 0){\n            ret.append(parseText(txtBuffer))\n        }\n        return ret\n    }\n    \n    private func parseBold(_ text:String.SubSequence) -> MDBold{\n        return MDBold(text:String(text))\n    }\n    \n    private func parseInlineCode(_ text: String.SubSequence) -> MDInlineCode{\n        return MDInlineCode(text: String(text))\n    }\n    \n    private func parseItalic(_ text:String.SubSequence) -> MDItalic{\n        return MDItalic(text: String(text))\n    }\n    \n    private func parseStrikethrough(_ text:String.SubSequence) -> MDStrikethrough{\n        return MDStrikethrough(text: String(text))\n    }\n    \n    private func parseLink(_ name: String.SubSequence, _ address:String.SubSequence) -> MDLink{\n        return MDLink(name: String(name), source: String(address))\n    }\n    \n    private func parseImage(_ name:String.SubSequence, _ address: String.SubSequence) -> MDImage{\n        return MDImage(name:String(name), source: String(address))\n    }\n    \n    private func parseText(_ text:[Character]) -> MDText{\n        let txt = String(text)\n        return MDText(text: txt)\n    }\n}\n\nstruct MDSyntaxTree{\n    var blocks:[MDBlockDelegate]\n}\n\nstruct MDBold: MDInlineDelegate{\n    var text:String\n}\n\nstruct MDStrikethrough: MDInlineDelegate{\n    var text:String\n}\n\nstruct MDItalic:MDInlineDelegate{\n    var text:String\n}\n\nstruct MDLink: MDInlineDelegate{\n    var name:String\n    var source:String\n}\n\nstruct MDImage: MDInlineDelegate{\n    var name:String\n    var source:String\n}\n\nstruct MDInlineCode : MDInlineDelegate{\n    var text:String\n}\n\nstruct MDText: MDInlineDelegate{\n    var text:String\n}\n\nstruct MDHeading1: MDBlockDelegate{\n    var inlines:[MDInlineDelegate]\n}\n\nstruct MDHeading2: MDBlockDelegate{\n    var inlines:[MDInlineDelegate]\n}\n\nstruct MDHeading3: MDBlockDelegate{\n    var inlines:[MDInlineDelegate]\n}\n\nstruct MDHeading4: MDBlockDelegate{\n    var inlines:[MDInlineDelegate]\n}\n\nstruct MDHeading5: MDBlockDelegate{\n    var inlines:[MDInlineDelegate]\n}\n\nstruct MDHeading6: MDBlockDelegate{\n    var inlines:[MDInlineDelegate]\n}\n\nstruct MDParagraph: MDBlockDelegate{\n    var inlines:[MDInlineDelegate]\n}\n\nstruct MDUnorderedList: MDBlockDelegate{\n    var items:[MDUnorderedListItem]\n}\n\nstruct MDUnorderedListItem\n{\n    var inlines:[MDInlineDelegate]\n    var children:[MDUnorderedListItem]\n}\n\nstruct MDOrderedList: MDBlockDelegate{\n    var items:[MDOrderedListItem]\n}\n\nstruct MDOrderedListItem\n{\n    var inlines:[MDInlineDelegate]\n    var children:[MDOrderedListItem]\n}\n\nstruct MDCodeBlock : MDBlockDelegate{\n    var lang:String\n    var multilineText:String\n}\n\nstruct MDHorizontalRule: MDBlockDelegate{\n    \n    var data:String\n}\n\nstruct MDBlockQuote: MDBlockDelegate{\n    \n    var multilineText:String\n}\n\nstruct MDTable: MDBlockDelegate{\n    var headline:MDTableHeader\n    var colconfigs:MDTableColConfigs\n    var rows:[MDTableRow]\n}\n\nstruct MDTableHeader{\n    var cells:[MDTableCell]\n}\n\nstruct MDTableCell{\n    var inlines:[MDInlineDelegate]\n}\n\nstruct MDTableColConfigs{\n    var colconfigs:[MDTableColConfig]\n}\n\nenum MDTableColConfig{\n    case leading\n    case trailing\n    case center\n}\n\nstruct MDTableRow{\n    var cells:[MDTableCell]\n}\n```\n',coediting:!1,comments_count:0,created_at:"2021-09-26T22:19:57+09:00",group:"{ }",id:"1a29a2cb5b3207ad87dc",likes_count:3,private:!1,tags:[{},{},{}],title:"SwiftでMarkdownを解析してオブジェクトツリーに変換する",updated_at:"2021-10-06T07:54:17+09:00",url:"https://qiita.com/sYamaz/items/1a29a2cb5b3207ad87dc",user:{description:"職業Web (フロント、バック）開発者。\n\n過去dotnetプログラマもしていました。\n趣味でSwift、Vueをいじってます",facebook_id:"",followees_count:0,followers_count:1,github_login_name:"sYamaz",id:"sYamaz",items_count:13,linkedin_id:"shun-yamazaki/",location:"",name:"Shun Yamazaki",organization:"",permanent_id:"2088399",profile_image_url:"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2088399/profile-images/1639196322",team_only:!1,twitter_screen_name:"ShunYamazaki5",website_url:"https://syamaz.github.io/website-nuxt/"},page_views_count:null,team_membership:{}}];function x(n){var l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var e,c=Object(d.a)(n);if(l){var t=Object(d.a)(this).constructor;e=Reflect.construct(c,arguments,t)}else e=c.apply(this,arguments);return Object(r.a)(this,e)}}var w=function(n,l,e,desc){var c,t=arguments.length,o=t<3?l:null===desc?desc=Object.getOwnPropertyDescriptor(l,e):desc;if("object"===("undefined"==typeof Reflect?"undefined":Object(f.a)(Reflect))&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,l,e,desc);else for(var i=n.length-1;i>=0;i--)(c=n[i])&&(o=(t<3?c(o):t>3?c(l,e,o):c(l,e))||o);return t>3&&o&&Object.defineProperty(l,e,o),o},S=function(n){Object(o.a)(e,n);var l=x(e);function e(){var n;return Object(t.a)(this,e),(n=l.apply(this,arguments)).header=[{text:"id",align:"start",sortable:!1,value:"id"},{text:"html",value:"rendered_body"},{text:"markdown",value:"body"},{text:"coediting",value:"coediting"},{text:"comment_count",value:"comment_count"},{text:"created_at",value:"coediting"},{text:"group",value:"group"},{text:"likes_count",value:"likes_count"},{text:"private",value:"private"},{text:"reactions_count",value:"reactions_count"},{text:"tags",value:"tags"},{text:"title",value:"title"},{text:"updated_at",value:"updated_at"},{text:"url",value:"url"},{text:"page_views_count",value:"page_views_count"},{text:"team_membership",value:"team_membership"}],n}return Object(c.a)(e)}(m.default),y=S=w([Object(k.Component)({components:{OGPCard:h.default},asyncData:function(n){return console.log(v),{posts:v}}})],S),B=e(90),D=e(131),_=e.n(D),C=e(418),component=Object(B.a)(y,(function(){var n=this,l=n.$createElement,c=n._self._c||l;return c("v-container",[c("h2",[n._v("Posts")]),n._v(" "),n._l(n.posts,(function(l){return c("OGPCard",{key:n.posts.id,staticClass:"ma-4",attrs:{url:l.url,title:l.title,description:l.body.slice(0,140)+"...",site_name:"qiita.com",image:e(462)}})}))],2)}),[],!1,null,null,null);l.default=component.exports;_()(component,{VContainer:C.a})}}]);